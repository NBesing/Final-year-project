[
    {
        "model": "lessons.lesson",
        "pk": 15,
        "fields": {
            "module_id": 2,
            "title": "JS Operators",
            "description": "Learn about the different operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Operators",
                        "notes": "Operators are used to perform operations on variables and values.",
                        "code": ""
                    },
                    {
                        "topic": "Types of Operators",
                        "notes": "JavaScript includes various types of operators such as arithmetic, comparison, logical, and more.",
                        "code": ""
                    },
                    {
                        "topic": "Operator Precedence",
                        "notes": "Operator precedence determines the order in which operators are evaluated.",
                        "code": "let x = 3 + 5 * 2; // 13, not 16"
                    },
                    {
                        "topic": "Using Operators",
                        "notes": "How to use different operators in JavaScript.",
                        "code": "let sum = 5 + 5; let product = 5 * 5;"
                    },
                    {
                        "topic": "Unary Operators",
                        "notes": "Operators that operate on a single operand.",
                        "code": "let x = -5; let y = !true;"
                    },
                    {
                        "topic": "Binary Operators",
                        "notes": "Operators that operate on two operands.",
                        "code": "let sum = 5 + 5; let product = 5 * 5;"
                    },
                    {
                        "topic": "Assignment Operators",
                        "notes": "Operators used to assign values to variables.",
                        "code": "let x = 5; x += 3;"
                    },
                    {
                        "topic": "Comparison Operators",
                        "notes": "Operators used to compare two values.",
                        "code": "let isEqual = 5 == 5; let isStrictEqual = 5 === '5';"
                    },
                    {
                        "topic": "Logical Operators",
                        "notes": "Operators used to perform logical operations.",
                        "code": "let and = true && false; let or = true || false;"
                    },
                    {
                        "topic": "Bitwise Operators",
                        "notes": "Operators used to perform bit-level operations.",
                        "code": "let and = 5 & 1; let or = 5 | 1;"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 16,
        "fields": {
            "module_id": 2,
            "title": "JS Arithmetic Operators",
            "description": "Learn about arithmetic operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Arithmetic Operators",
                        "notes": "Arithmetic operators are used to perform mathematical operations.",
                        "code": ""
                    },
                    {
                        "topic": "Addition Operator",
                        "notes": "The addition operator (+) adds numbers.",
                        "code": "let sum = 5 + 10;"
                    },
                    {
                        "topic": "Subtraction Operator",
                        "notes": "The subtraction operator (-) subtracts numbers.",
                        "code": "let difference = 10 - 5;"
                    },
                    {
                        "topic": "Multiplication Operator",
                        "notes": "The multiplication operator (*) multiplies numbers.",
                        "code": "let product = 5 * 10;"
                    },
                    {
                        "topic": "Division Operator",
                        "notes": "The division operator (/) divides numbers.",
                        "code": "let quotient = 10 / 5;"
                    },
                    {
                        "topic": "Modulus Operator",
                        "notes": "The modulus operator (%) returns the division remainder.",
                        "code": "let remainder = 10 % 3;"
                    },
                    {
                        "topic": "Increment Operator",
                        "notes": "The increment operator (++) increases a number by one.",
                        "code": "let x = 5; x++;"
                    },
                    {
                        "topic": "Decrement Operator",
                        "notes": "The decrement operator (--) decreases a number by one.",
                        "code": "let x = 5; x--;"
                    },
                    {
                        "topic": "Unary Negation Operator",
                        "notes": "The unary negation operator (-) negates a number.",
                        "code": "let x = -5;"
                    },
                    {
                        "topic": "Unary Plus Operator",
                        "notes": "The unary plus operator (+) attempts to convert the operand to a number.",
                        "code": "let x = +'5';"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 17,
        "fields": {
            "module_id": 2,
            "title": "JS Comparison Operators",
            "description": "Learn about comparison operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Comparison Operators",
                        "notes": "Comparison operators are used to compare two values.",
                        "code": ""
                    },
                    {
                        "topic": "Equal to Operator",
                        "notes": "The equal to operator (==) compares two values for equality.",
                        "code": "let isEqual = 5 == '5';"
                    },
                    {
                        "topic": "Strict Equal to Operator",
                        "notes": "The strict equal to operator (===) compares two values for equality and type.",
                        "code": "let isStrictEqual = 5 === 5;"
                    },
                    {
                        "topic": "Not Equal to Operator",
                        "notes": "The not equal to operator (!=) compares two values for inequality.",
                        "code": "let isNotEqual = 5 != '6';"
                    },
                    {
                        "topic": "Strict Not Equal to Operator",
                        "notes": "The strict not equal to operator (!==) compares two values for inequality and type.",
                        "code": "let isStrictNotEqual = 5 !== '5';"
                    },
                    {
                        "topic": "Greater than Operator",
                        "notes": "The greater than operator (>) checks if the left operand is greater than the right operand.",
                        "code": "let isGreaterThan = 10 > 5;"
                    },
                    {
                        "topic": "Less than Operator",
                        "notes": "The less than operator (<) checks if the left operand is less than the right operand.",
                        "code": "let isLessThan = 5 < 10;"
                    },
                    {
                        "topic": "Greater than or Equal to Operator",
                        "notes": "The greater than or equal to operator (>=) checks if the left operand is greater than or equal to the right operand.",
                        "code": "let isGreaterThanOrEqual = 10 >= 5;"
                    },
                    {
                        "topic": "Less than or Equal to Operator",
                        "notes": "The less than or equal to operator (<=) checks if the left operand is less than or equal to the right operand.",
                        "code": "let isLessThanOrEqual = 5 <= 10;"
                    },
                    {
                        "topic": "Using Comparison Operators",
                        "notes": "How to use comparison operators in JavaScript.",
                        "code": "let x = 10; let y = 5; let result = x > y;"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 18,
        "fields": {
            "module_id": 2,
            "title": "JS Logical Operators",
            "description": "Learn about logical operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Logical Operators",
                        "notes": "Logical operators are used to perform logical operations.",
                        "code": ""
                    },
                    {
                        "topic": "Logical AND Operator",
                        "notes": "The logical AND operator (&&) returns true if both operands are true.",
                        "code": "let result = true && true; // true"
                    },
                    {
                        "topic": "Logical OR Operator",
                        "notes": "The logical OR operator (||) returns true if at least one operand is true.",
                        "code": "let result = true || false; // true"
                    },
                    {
                        "topic": "Logical NOT Operator",
                        "notes": "The logical NOT operator (!) negates the value of the operand.",
                        "code": "let result = !true; // false"
                    },
                    {
                        "topic": "Combining Logical Operators",
                        "notes": "Logical operators can be combined to form complex expressions.",
                        "code": "let result = (true && false) || true; // true"
                    },
                    {
                        "topic": "Using Logical Operators",
                        "notes": "How to use logical operators in JavaScript.",
                        "code": "let x = 10; let y = 5; let result = (x > y) && (y < 10);"
                    },
                    {
                        "topic": "Short-Circuit Evaluation",
                        "notes": "Logical operators perform short-circuit evaluation.",
                        "code": "let result = true || (false && true); // true"
                    },
                    {
                        "topic": "Logical AND Assignment",
                        "notes": "The logical AND assignment (&&=) assigns a value only if the left operand is true.",
                        "code": "let x = true; x &&= false; // x is false"
                    },
                    {
                        "topic": "Logical OR Assignment",
                        "notes": "The logical OR assignment (||=) assigns a value only if the left operand is false.",
                        "code": "let x = false; x ||= true; // x is true"
                    },
                    {
                        "topic": "Logical Nullish Assignment",
                        "notes": "The logical nullish assignment (??=) assigns a value only if the left operand is null or undefined.",
                        "code": "let x = null; x ??= true; // x is true"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 19,
        "fields": {
            "module_id": 2,
            "title": "JS Bitwise Operators",
            "description": "Learn about bitwise operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Bitwise Operators",
                        "notes": "Bitwise operators perform operations on binary representations of numbers.",
                        "code": ""
                    },
                    {
                        "topic": "Bitwise AND Operator",
                        "notes": "The bitwise AND operator (&) returns a 1 in each bit position for which the corresponding bits of both operands are 1.",
                        "code": "let result = 5 & 1; // 1"
                    },
                    {
                        "topic": "Bitwise OR Operator",
                        "notes": "The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1.",
                        "code": "let result = 5 | 1; // 5"
                    },
                    {
                        "topic": "Bitwise XOR Operator",
                        "notes": "The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1.",
                        "code": "let result = 5 ^ 1; // 4"
                    },
                    {
                        "topic": "Bitwise NOT Operator",
                        "notes": "The bitwise NOT operator (~) inverts the bits of its operand.",
                        "code": "let result = ~5; // -6"
                    },
                    {
                        "topic": "Bitwise Left Shift Operator",
                        "notes": "The bitwise left shift operator (<<) shifts the bits of its first operand to the left by the number of positions specified by the second operand.",
                        "code": "let result = 5 << 1; // 10"
                    },
                    {
                        "topic": "Bitwise Right Shift Operator",
                        "notes": "The bitwise right shift operator (>>) shifts the bits of its first operand to the right by the number of positions specified by the second operand.",
                        "code": "let result = 5 >> 1; // 2"
                    },
                    {
                        "topic": "Bitwise Zero-Fill Right Shift Operator",
                        "notes": "The bitwise zero-fill right shift operator (>>>) shifts the bits of its first operand to the right by the number of positions specified by the second operand, filling in zeros from the left.",
                        "code": "let result = 5 >>> 1; // 2"
                    },
                    {
                        "topic": "Using Bitwise Operators",
                        "notes": "How to use bitwise operators in JavaScript.",
                        "code": "let x = 5; let y = 1; let result = x & y;"
                    },
                    {
                        "topic": "Bitwise Operator Applications",
                        "notes": "Common applications of bitwise operators.",
                        "code": ""
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 20,
        "fields": {
            "module_id": 2,
            "title": "JS Assignment Operators",
            "description": "Learn about assignment operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Assignment Operators",
                        "notes": "Assignment operators are used to assign values to variables.",
                        "code": ""
                    },
                    {
                        "topic": "Assignment Operator",
                        "notes": "The assignment operator (=) assigns a value to a variable.",
                        "code": "let x = 10;"
                    },
                    {
                        "topic": "Addition Assignment Operator",
                        "notes": "The addition assignment operator (+=) adds a value to a variable.",
                        "code": "let x = 10; x += 5; // x is now 15"
                    },
                    {
                        "topic": "Subtraction Assignment Operator",
                        "notes": "The subtraction assignment operator (-=) subtracts a value from a variable.",
                        "code": "let x = 10; x -= 5; // x is now 5"
                    },
                    {
                        "topic": "Multiplication Assignment Operator",
                        "notes": "The multiplication assignment operator (*=) multiplies a variable by a value.",
                        "code": "let x = 10; x *= 5; // x is now 50"
                    },
                    {
                        "topic": "Division Assignment Operator",
                        "notes": "The division assignment operator (/=) divides a variable by a value.",
                        "code": "let x = 10; x /= 5; // x is now 2"
                    },
                    {
                        "topic": "Modulus Assignment Operator",
                        "notes": "The modulus assignment operator (%=) assigns the remainder of dividing a variable by a value.",
                        "code": "let x = 10; x %= 3; // x is now 1"
                    },
                    {
                        "topic": "Exponentiation Assignment Operator",
                        "notes": "The exponentiation assignment operator (**=) raises a variable to the power of a value.",
                        "code": "let x = 2; x **= 3; // x is now 8"
                    },
                    {
                        "topic": "Bitwise AND Assignment Operator",
                        "notes": "The bitwise AND assignment operator (&=) performs a bitwise AND on a variable and a value.",
                        "code": "let x = 5; x &= 1; // x is now 1"
                    },
                    {
                        "topic": "Bitwise OR Assignment Operator",
                        "notes": "The bitwise OR assignment operator (|=) performs a bitwise OR on a variable and a value.",
                        "code": "let x = 5; x |= 1; // x is now 5"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 21,
        "fields": {
            "module_id": 2,
            "title": "JS Conditional Operators",
            "description": "Learn about conditional operators in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Conditional Operators",
                        "notes": "Conditional operators are used to perform different actions based on different conditions.",
                        "code": ""
                    },
                    {
                        "topic": "Conditional (Ternary) Operator",
                        "notes": "The conditional (ternary) operator (?:) assigns a value to a variable based on a condition.",
                        "code": "let x = (10 > 5) ? 'Yes' : 'No'; // x is 'Yes'"
                    },
                    {
                        "topic": "Syntax of Conditional Operator",
                        "notes": "The syntax of the conditional operator is condition ? expr1 : expr2.",
                        "code": "let result = (condition) ? expr1 : expr2;"
                    },
                    {
                        "topic": "Using Conditional Operators",
                        "notes": "How to use conditional operators in JavaScript.",
                        "code": "let x = 10; let y = 5; let result = (x > y) ? 'Greater' : 'Lesser';"
                    },
                    {
                        "topic": "Combining Conditional Operators",
                        "notes": "Conditional operators can be combined with other operators.",
                        "code": "let result = (x > y) ? (y > 0) ? 'Positive' : 'Negative' : 'Equal';"
                    },
                    {
                        "topic": "Nested Conditional Operators",
                        "notes": "Conditional operators can be nested to form complex expressions.",
                        "code": "let result = (x > y) ? (y > z) ? 'Greater' : 'Lesser' : 'Equal';"
                    },
                    {
                        "topic": "Best Practices for Conditional Operators",
                        "notes": "Best practices for using conditional operators.",
                        "code": ""
                    },
                    {
                        "topic": "Common Mistakes with Conditional Operators",
                        "notes": "Common mistakes made when using conditional operators.",
                        "code": ""
                    },
                    {
                        "topic": "Examples of Conditional Operators",
                        "notes": "Examples of using conditional operators in JavaScript.",
                        "code": "let result = (x > y) ? 'Greater' : 'Lesser';"
                    },
                    {
                        "topic": "Alternatives to Conditional Operators",
                        "notes": "Alternatives to using conditional operators.",
                        "code": "let result = if (x > y) { 'Greater' } else { 'Lesser' }"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 22,
        "fields": {
            "module_id": 2,
            "title": "JS Typeof Operator",
            "description": "Learn about the typeof operator in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to typeof Operator",
                        "notes": "The typeof operator returns the type of a variable.",
                        "code": ""
                    },
                    {
                        "topic": "Syntax of typeof Operator",
                        "notes": "The syntax of the typeof operator is typeof operand.",
                        "code": "let type = typeof 10; // 'number'"
                    },
                    {
                        "topic": "Using typeof Operator",
                        "notes": "How to use the typeof operator in JavaScript.",
                        "code": "let type = typeof 'Hello'; // 'string'"
                    },
                    {
                        "topic": "Common Use Cases for typeof Operator",
                        "notes": "Common use cases for the typeof operator.",
                        "code": "let type = typeof true; // 'boolean'"
                    },
                    {
                        "topic": "Limitations of typeof Operator",
                        "notes": "Limitations of the typeof operator.",
                        "code": "let type = typeof null; // 'object'"
                    },
                    {
                        "topic": "typeof Operator with Arrays",
                        "notes": "The typeof operator returns 'object' for arrays.",
                        "code": "let type = typeof [1, 2, 3]; // 'object'"
                    },
                    {
                        "topic": "typeof Operator with Functions",
                        "notes": "The typeof operator returns 'function' for functions.",
                        "code": "let type = typeof function() {}; // 'function'"
                    },
                    {
                        "topic": "typeof Operator with Undefined",
                        "notes": "The typeof operator returns 'undefined' for undefined variables.",
                        "code": "let type = typeof undefined; // 'undefined'"
                    },
                    {
                        "topic": "typeof Operator with Objects",
                        "notes": "The typeof operator returns 'object' for objects.",
                        "code": "let type = typeof {a: 1}; // 'object'"
                    },
                    {
                        "topic": "Examples of typeof Operator",
                        "notes": "Examples of using the typeof operator in JavaScript.",
                        "code": "let type = typeof 42; // 'number'"
                    }
                ]
            }
        }
    },
    {
        "model": "lessons.lesson",
        "pk": 23,
        "fields": {
            "module_id": 2,
            "title": "JS Operator Precedence",
            "description": "Learn about operator precedence in JavaScript.",
            "content": {
                "subtopics": [
                    {
                        "topic": "Introduction to Operator Precedence",
                        "notes": "Operator precedence determines the order in which operators are evaluated.",
                        "code": ""
                    },
                    {
                        "topic": "Understanding Operator Precedence",
                        "notes": "Operators with higher precedence are evaluated before operators with lower precedence.",
                        "code": "let result = 3 + 5 * 2; // 13"
                    },
                    {
                        "topic": "Operator Associativity",
                        "notes": "Operator associativity determines the order of evaluation for operators with the same precedence.",
                        "code": "let result = 3 - 2 + 1; // 2"
                    },
                    {
                        "topic": "Parentheses and Precedence",
                        "notes": "Parentheses can be used to change the order of evaluation.",
                        "code": "let result = (3 + 5) * 2; // 16"
                    },
                    {
                        "topic": "Using Operator Precedence",
                        "notes": "How to use operator precedence in JavaScript.",
                        "code": "let result = 10 - 2 / 2; // 9"
                    },
                    {
                        "topic": "Examples of Operator Precedence",
                        "notes": "Examples of using operator precedence in JavaScript.",
                        "code": "let result = 3 + 4 * 2 / (1 - 5); // 1"
                    },
                    {
                        "topic": "Common Mistakes with Operator Precedence",
                        "notes": "Common mistakes made when using operator precedence.",
                        "code": "let result = 10 - 2 * 2; // 6, not 16"
                    },
                    {
                        "topic": "Operator Precedence Table",
                        "notes": "A table of JavaScript operators with their precedence levels.",
                        "code": ""
                    },
                    {
                        "topic": "Precedence and Associativity in Detail",
                        "notes": "Detailed explanation of operator precedence and associativity.",
                        "code": ""
                    },
                    {
                        "topic": "Operator Precedence in Practice",
                        "notes": "How operator precedence is used in real-world JavaScript code.",
                        "code": "let result = (a + b) * (c - d);"
                    }
                ]
            }
        }
    },
        {
            "model": "lessons.lesson",
            "pk": 24,
            "fields": {
                "module_id": 3,
                "title": "JS If…Else",
                "description": "Learn about JavaScript if...else statements.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic If...Else",
                            "notes": "The if statement is used to execute code based on a condition.",
                            "code": "if (condition) { /* code to run if condition is true */ } else { /* code to run if condition is false */ }"
                        },
                        {
                            "topic": "Else If",
                            "notes": "The else if statement is used to specify a new condition to test, if the first condition is false.",
                            "code": "if (condition1) { /* code */ } else if (condition2) { /* code */ } else { /* code */ }"
                        },
                        {
                            "topic": "Nested If",
                            "notes": "You can have one if statement inside another if statement.",
                            "code": "if (condition1) { if (condition2) { /* code */ } }"
                        },
                        {
                            "topic": "Ternary Operator",
                            "notes": "A shorter syntax for the if...else statement.",
                            "code": "let result = condition ? 'true case' : 'false case';"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 25,
            "fields": {
                "module_id": 3,
                "title": "JS While",
                "description": "Learn about JavaScript while loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic While Loop",
                            "notes": "The while loop loops through a block of code as long as a specified condition is true.",
                            "code": "while (condition) { /* code */ }"
                        },
                        {
                            "topic": "Infinite Loop",
                            "notes": "Be careful not to create a loop that never ends.",
                            "code": "while (true) { /* code */ }"
                        },
                        {
                            "topic": "Breaking the Loop",
                            "notes": "Use the break statement to exit the loop.",
                            "code": "while (condition) { if (breakCondition) { break; } /* code */ }"
                        },
                        {
                            "topic": "Continue Statement",
                            "notes": "Use the continue statement to skip the current iteration and continue with the next iteration.",
                            "code": "while (condition) { if (skipCondition) { continue; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 26,
            "fields": {
                "module_id": 3,
                "title": "JS For",
                "description": "Learn about JavaScript for loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For Loop",
                            "notes": "The for loop is used to run a block of code a number of times.",
                            "code": "for (let i = 0; i < 10; i++) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Arrays",
                            "notes": "Use for loops to iterate over arrays.",
                            "code": "for (let i = 0; i < array.length; i++) { console.log(array[i]); }"
                        },
                        {
                            "topic": "Nested For Loop",
                            "notes": "You can nest one for loop inside another.",
                            "code": "for (let i = 0; i < array1.length; i++) { for (let j = 0; j < array2.length; j++) { /* code */ } }"
                        },
                        {
                            "topic": "Using Break and Continue",
                            "notes": "Use break and continue statements within for loops.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 27,
            "fields": {
                "module_id": 3,
                "title": "JS For…In",
                "description": "Learn about JavaScript for...in loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For...In Loop",
                            "notes": "The for...in loop is used to iterate over the properties of an object.",
                            "code": "for (let key in object) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Objects",
                            "notes": "Use for...in to iterate over all enumerable properties of an object.",
                            "code": "for (let key in object) { console.log(key + ': ' + object[key]); }"
                        },
                        {
                            "topic": "Enumerating Properties",
                            "notes": "Be aware that the order of iteration is not guaranteed.",
                            "code": "for (let key in object) { /* code */ }"
                        },
                        {
                            "topic": "Avoiding Inherited Properties",
                            "notes": "Use hasOwnProperty to filter out properties from the object's prototype.",
                            "code": "for (let key in object) { if (object.hasOwnProperty(key)) { /* code */ } }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 28,
            "fields": {
                "module_id": 3,
                "title": "JS For…Of",
                "description": "Learn about JavaScript for...of loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For...Of Loop",
                            "notes": "The for...of loop is used to iterate over iterable objects like arrays.",
                            "code": "for (let value of array) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Arrays",
                            "notes": "Use for...of to iterate over all elements in an array.",
                            "code": "for (let value of array) { console.log(value); }"
                        },
                        {
                            "topic": "Looping through Strings",
                            "notes": "Use for...of to iterate over characters in a string.",
                            "code": "for (let char of 'string') { console.log(char); }"
                        },
                        {
                            "topic": "Iterating over Sets and Maps",
                            "notes": "Use for...of to iterate over Set and Map objects.",
                            "code": "for (let item of set) { console.log(item); }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 29,
            "fields": {
                "module_id": 3,
                "title": "JS Loop Control",
                "description": "Learn about controlling loops in JavaScript.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Break Statement",
                            "notes": "The break statement exits a loop prematurely.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        },
                        {
                            "topic": "Continue Statement",
                            "notes": "The continue statement skips the current iteration and continues with the next.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { continue; } /* code */ }"
                        },
                        {
                            "topic": "Labeled Statements",
                            "notes": "Labels can be used with break and continue statements to control loops.",
                            "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { break outerLoop; } /* code */ } }"
                        },
                        {
                            "topic": "Exiting Loops",
                            "notes": "Use break statements to exit loops early.",
                            "code": "while (condition) { if (exitCondition) { break; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 30,
            "fields": {
                "module_id": 3,
                "title": "JS Break Statements",
                "description": "Learn about break statements in JavaScript.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Using Break in Loops",
                            "notes": "Break statements exit loops early.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        },
                        {
                            "topic": "Breaking out of Nested Loops",
                            "notes": "Break can be used with labels to exit nested loops.",
                            "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { break outerLoop; } /* code */ } }"
                        },
                        {
                            "topic": "Avoiding Infinite Loops",
                            "notes": "Break statements help prevent infinite loops.",
                            "code": "while (true) { /* code */ if (condition) { break; } }"
                        },
                        {
                            "topic": "Breaking Switch Statements",
                            "notes": "Use break to exit switch cases.",
                            "code": "switch (expression) { case value1: /* code */ break; case value2: /* code */ break; }"
                        }
                    ]
                }
            }
        },
        
         {
                "model": "lessons.lesson",
                "pk": 31,
                "fields": {
                    "module_id": 3,
                    "title": "JS Continue Statements",
                    "description": "Learn about continue statements in JavaScript loops.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Continue Statement",
                                "notes": "The continue statement skips the current iteration and continues with the next in a loop.",
                                "code": "for (let i = 0; i < 5; i++) { if (i === 2) { continue; } console.log(i); }"
                            },
                            {
                                "topic": "Skipping Specific Iterations",
                                "notes": "Use continue to skip specific iterations based on conditions.",
                                "code": "for (let i = 0; i < 10; i++) { if (i % 2 === 0) { continue; } console.log(i); }"
                            },
                            {
                                "topic": "Using Continue in Nested Loops",
                                "notes": "Continue statements can be used in nested loops to skip inner or outer loop iterations.",
                                "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { continue outerLoop; } console.log('i = ' + i + ', j = ' + j); } }"
                            },
                            {
                                "topic": "Skipping Iterations with While Loops",
                                "notes": "While loops can also utilize continue statements to skip certain iterations.",
                                "code": "let i = 0; while (i < 5) { i++; if (i === 3) { continue; } console.log(i); }"
                            }
                        ]
                    }
                }
            },
            {
                "model": "lessons.lesson",
                "pk": 32,
                "fields": {
                    "module_id": 3,
                    "title": "JS Switch Case",
                    "description": "Learn about switch case statements in JavaScript.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Basic Switch Statement",
                                "notes": "The switch statement evaluates an expression and executes code associated with the matching case.",
                                "code": "let day = 2; switch (day) { case 1: console.log('Monday'); break; case 2: console.log('Tuesday'); break; default: console.log('Other day'); }"
                            },
                            {
                                "topic": "Multiple Cases",
                                "notes": "Use multiple cases for a single block of code in a switch statement.",
                                "code": "let grade = 'B'; switch (grade) { case 'A': case 'B': console.log('Good'); break; case 'C': console.log('Average'); break; default: console.log('Unknown'); }"
                            },
                            {
                                "topic": "Switch Case Fall-Through",
                                "notes": "Cases in switch statements fall through unless terminated by a break statement.",
                                "code": "let x = 2; switch (x) { case 1: console.log('One'); case 2: console.log('Two'); break; case 3: console.log('Three'); }"
                            },
                            {
                                "topic": "Using Switch with Default Case",
                                "notes": "Default case executes when no case matches the switch expression.",
                                "code": "let y = 5; switch (y) { case 1: console.log('One'); break; case 2: console.log('Two'); break; default: console.log('Other'); }"
                            }
                        ]
                    }
                }
            },
            {
                "model": "lessons.lesson",
                "pk": 33,
                "fields": {
                    "module_id": 3,
                    "title": "JS User Defines Iterators",
                    "description": "Learn about defining iterators in JavaScript.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Iterator Objects",
                                "notes": "Iterator objects define a sequence and a next() method that returns the next item in the sequence.",
                                "code": "function makeIterator(array) { let nextIndex = 0; return { next: function() { return nextIndex < array.length ? { value: array[nextIndex++], done: false } : { done: true }; } }; } let it = makeIterator(['a', 'b']); console.log(it.next().value); console.log(it.next().value);"
                            },
                            {
                                "topic": "Using Iterators with for...of",
                                "notes": "for...of loop in JavaScript iterates over iterable objects, including array-like objects.",
                                "code": "let iterable = [10, 20, 30]; for (let value of iterable) { console.log(value); }"
                            },
                            {
                                "topic": "Generator Functions",
                                "notes": "Generator functions simplify iterator creation. They use the function* syntax and yield keyword.",
                                "code": "function* generator() { yield 1; yield 2; yield 3; } let gen = generator(); console.log(gen.next().value); console.log(gen.next().value);"
                            },
                            {
                                "topic": "Custom Iterable Objects",
                                "notes": "Custom iterable objects can implement the Symbol.iterator method for defining their iteration behavior.",
                                "code": "let obj = { start: 1, end: 5, [Symbol.iterator]: function*() { for (let i = this.start; i <= this.end; i++) { yield i; } } }; for (let num of obj) { console.log(num); }"
                            }
                        ]
                    }
                }
            }
        
              

               

    
]
