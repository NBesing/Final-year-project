[
   
    
        {
            "model": "lessons.lesson",
            "pk": 24,
            "fields": {
                "module_id": 3,
                "title": "JS If…Else",
                "description": "Learn about JavaScript if...else statements.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic If...Else",
                            "notes": "The if statement is used to execute code based on a condition.",
                            "code": "if (condition) { /* code to run if condition is true */ } else { /* code to run if condition is false */ }"
                        },
                        {
                            "topic": "Else If",
                            "notes": "The else if statement is used to specify a new condition to test, if the first condition is false.",
                            "code": "if (condition1) { /* code */ } else if (condition2) { /* code */ } else { /* code */ }"
                        },
                        {
                            "topic": "Nested If",
                            "notes": "You can have one if statement inside another if statement.",
                            "code": "if (condition1) { if (condition2) { /* code */ } }"
                        },
                        {
                            "topic": "Ternary Operator",
                            "notes": "A shorter syntax for the if...else statement.",
                            "code": "let result = condition ? 'true case' : 'false case';"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 25,
            "fields": {
                "module_id": 3,
                "title": "JS While",
                "description": "Learn about JavaScript while loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic While Loop",
                            "notes": "The while loop loops through a block of code as long as a specified condition is true.",
                            "code": "while (condition) { /* code */ }"
                        },
                        {
                            "topic": "Infinite Loop",
                            "notes": "Be careful not to create a loop that never ends.",
                            "code": "while (true) { /* code */ }"
                        },
                        {
                            "topic": "Breaking the Loop",
                            "notes": "Use the break statement to exit the loop.",
                            "code": "while (condition) { if (breakCondition) { break; } /* code */ }"
                        },
                        {
                            "topic": "Continue Statement",
                            "notes": "Use the continue statement to skip the current iteration and continue with the next iteration.",
                            "code": "while (condition) { if (skipCondition) { continue; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 26,
            "fields": {
                "module_id": 3,
                "title": "JS For",
                "description": "Learn about JavaScript for loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For Loop",
                            "notes": "The for loop is used to run a block of code a number of times.",
                            "code": "for (let i = 0; i < 10; i++) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Arrays",
                            "notes": "Use for loops to iterate over arrays.",
                            "code": "for (let i = 0; i < array.length; i++) { console.log(array[i]); }"
                        },
                        {
                            "topic": "Nested For Loop",
                            "notes": "You can nest one for loop inside another.",
                            "code": "for (let i = 0; i < array1.length; i++) { for (let j = 0; j < array2.length; j++) { /* code */ } }"
                        },
                        {
                            "topic": "Using Break and Continue",
                            "notes": "Use break and continue statements within for loops.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 27,
            "fields": {
                "module_id": 3,
                "title": "JS For…In",
                "description": "Learn about JavaScript for...in loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For...In Loop",
                            "notes": "The for...in loop is used to iterate over the properties of an object.",
                            "code": "for (let key in object) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Objects",
                            "notes": "Use for...in to iterate over all enumerable properties of an object.",
                            "code": "for (let key in object) { console.log(key + ': ' + object[key]); }"
                        },
                        {
                            "topic": "Enumerating Properties",
                            "notes": "Be aware that the order of iteration is not guaranteed.",
                            "code": "for (let key in object) { /* code */ }"
                        },
                        {
                            "topic": "Avoiding Inherited Properties",
                            "notes": "Use hasOwnProperty to filter out properties from the object's prototype.",
                            "code": "for (let key in object) { if (object.hasOwnProperty(key)) { /* code */ } }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 28,
            "fields": {
                "module_id": 3,
                "title": "JS For…Of",
                "description": "Learn about JavaScript for...of loops.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Basic For...Of Loop",
                            "notes": "The for...of loop is used to iterate over iterable objects like arrays.",
                            "code": "for (let value of array) { /* code */ }"
                        },
                        {
                            "topic": "Looping through Arrays",
                            "notes": "Use for...of to iterate over all elements in an array.",
                            "code": "for (let value of array) { console.log(value); }"
                        },
                        {
                            "topic": "Looping through Strings",
                            "notes": "Use for...of to iterate over characters in a string.",
                            "code": "for (let char of 'string') { console.log(char); }"
                        },
                        {
                            "topic": "Iterating over Sets and Maps",
                            "notes": "Use for...of to iterate over Set and Map objects.",
                            "code": "for (let item of set) { console.log(item); }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 29,
            "fields": {
                "module_id": 3,
                "title": "JS Loop Control",
                "description": "Learn about controlling loops in JavaScript.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Break Statement",
                            "notes": "The break statement exits a loop prematurely.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        },
                        {
                            "topic": "Continue Statement",
                            "notes": "The continue statement skips the current iteration and continues with the next.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { continue; } /* code */ }"
                        },
                        {
                            "topic": "Labeled Statements",
                            "notes": "Labels can be used with break and continue statements to control loops.",
                            "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { break outerLoop; } /* code */ } }"
                        },
                        {
                            "topic": "Exiting Loops",
                            "notes": "Use break statements to exit loops early.",
                            "code": "while (condition) { if (exitCondition) { break; } /* code */ }"
                        }
                    ]
                }
            }
        },
        {
            "model": "lessons.lesson",
            "pk": 30,
            "fields": {
                "module_id": 3,
                "title": "JS Break Statements",
                "description": "Learn about break statements in JavaScript.",
                "content": {
                    "subtopics": [
                        {
                            "topic": "Using Break in Loops",
                            "notes": "Break statements exit loops early.",
                            "code": "for (let i = 0; i < 10; i++) { if (i === 5) { break; } /* code */ }"
                        },
                        {
                            "topic": "Breaking out of Nested Loops",
                            "notes": "Break can be used with labels to exit nested loops.",
                            "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { break outerLoop; } /* code */ } }"
                        },
                        {
                            "topic": "Avoiding Infinite Loops",
                            "notes": "Break statements help prevent infinite loops.",
                            "code": "while (true) { /* code */ if (condition) { break; } }"
                        },
                        {
                            "topic": "Breaking Switch Statements",
                            "notes": "Use break to exit switch cases.",
                            "code": "switch (expression) { case value1: /* code */ break; case value2: /* code */ break; }"
                        }
                    ]
                }
            }
        },
        
         {
                "model": "lessons.lesson",
                "pk": 31,
                "fields": {
                    "module_id": 3,
                    "title": "JS Continue Statements",
                    "description": "Learn about continue statements in JavaScript loops.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Continue Statement",
                                "notes": "The continue statement skips the current iteration and continues with the next in a loop.",
                                "code": "for (let i = 0; i < 5; i++) { if (i === 2) { continue; } console.log(i); }"
                            },
                            {
                                "topic": "Skipping Specific Iterations",
                                "notes": "Use continue to skip specific iterations based on conditions.",
                                "code": "for (let i = 0; i < 10; i++) { if (i % 2 === 0) { continue; } console.log(i); }"
                            },
                            {
                                "topic": "Using Continue in Nested Loops",
                                "notes": "Continue statements can be used in nested loops to skip inner or outer loop iterations.",
                                "code": "outerLoop: for (let i = 0; i < 3; i++) { for (let j = 0; j < 3; j++) { if (i === 1 && j === 1) { continue outerLoop; } console.log('i = ' + i + ', j = ' + j); } }"
                            },
                            {
                                "topic": "Skipping Iterations with While Loops",
                                "notes": "While loops can also utilize continue statements to skip certain iterations.",
                                "code": "let i = 0; while (i < 5) { i++; if (i === 3) { continue; } console.log(i); }"
                            }
                        ]
                    }
                }
            },
            {
                "model": "lessons.lesson",
                "pk": 32,
                "fields": {
                    "module_id": 3,
                    "title": "JS Switch Case",
                    "description": "Learn about switch case statements in JavaScript.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Basic Switch Statement",
                                "notes": "The switch statement evaluates an expression and executes code associated with the matching case.",
                                "code": "let day = 2; switch (day) { case 1: console.log('Monday'); break; case 2: console.log('Tuesday'); break; default: console.log('Other day'); }"
                            },
                            {
                                "topic": "Multiple Cases",
                                "notes": "Use multiple cases for a single block of code in a switch statement.",
                                "code": "let grade = 'B'; switch (grade) { case 'A': case 'B': console.log('Good'); break; case 'C': console.log('Average'); break; default: console.log('Unknown'); }"
                            },
                            {
                                "topic": "Switch Case Fall-Through",
                                "notes": "Cases in switch statements fall through unless terminated by a break statement.",
                                "code": "let x = 2; switch (x) { case 1: console.log('One'); case 2: console.log('Two'); break; case 3: console.log('Three'); }"
                            },
                            {
                                "topic": "Using Switch with Default Case",
                                "notes": "Default case executes when no case matches the switch expression.",
                                "code": "let y = 5; switch (y) { case 1: console.log('One'); break; case 2: console.log('Two'); break; default: console.log('Other'); }"
                            }
                        ]
                    }
                }
            },
            {
                "model": "lessons.lesson",
                "pk": 33,
                "fields": {
                    "module_id": 3,
                    "title": "JS User Defines Iterators",
                    "description": "Learn about defining iterators in JavaScript.",
                    "content": {
                        "subtopics": [
                            {
                                "topic": "Iterator Objects",
                                "notes": "Iterator objects define a sequence and a next() method that returns the next item in the sequence.",
                                "code": "function makeIterator(array) { let nextIndex = 0; return { next: function() { return nextIndex < array.length ? { value: array[nextIndex++], done: false } : { done: true }; } }; } let it = makeIterator(['a', 'b']); console.log(it.next().value); console.log(it.next().value);"
                            },
                            {
                                "topic": "Using Iterators with for...of",
                                "notes": "for...of loop in JavaScript iterates over iterable objects, including array-like objects.",
                                "code": "let iterable = [10, 20, 30]; for (let value of iterable) { console.log(value); }"
                            },
                            {
                                "topic": "Generator Functions",
                                "notes": "Generator functions simplify iterator creation. They use the function* syntax and yield keyword.",
                                "code": "function* generator() { yield 1; yield 2; yield 3; } let gen = generator(); console.log(gen.next().value); console.log(gen.next().value);"
                            },
                            {
                                "topic": "Custom Iterable Objects",
                                "notes": "Custom iterable objects can implement the Symbol.iterator method for defining their iteration behavior.",
                                "code": "let obj = { start: 1, end: 5, [Symbol.iterator]: function*() { for (let i = this.start; i <= this.end; i++) { yield i; } } }; for (let num of obj) { console.log(num); }"
                            }
                        ]
                    }
                }
            }
        
              

               

    
]
