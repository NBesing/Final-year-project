[
    {
      "model": "lessons.lesson",
      "pk": 1,
      "fields": {
        "title": "JS Overview",
        "description": "What is JavaScript?\nJavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities. JavaScript is a single-threaded programming language that we can use for client-side or server-side development. It is a dynamically typed programming language, which means that we don't care about variable data types while writing the JavaScript code. Also, it contains the control statements, operators, and objects like Array, Math, Data, etc. JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. The general-purpose core of the language has been embedded in Netscape and other web browsers. The ECMA-262 Specification defined a standard version of the core JavaScript language. JavaScript is a lightweight, interpreted programming language designed for creating network-centric applications. Complementary to and integrated with Java. Complementary to and integrated with HTML. Open and cross-platform.\nHistory of JavaScript:\nJavaScript is developed by Brendan Eich, a computer scientist and programmer at Netscape Communications Corporation. The initial name of JavaScript was 'Mocha'. After that, it changed to 'LiveScript', and then 'JavaScript'. Between 1996 and 1997, the European Computer Manufacturers Association (ECMA) standardized JavaScript. After that, three revisions of JavaScript have been done. In ES5 (2009), Node.js was introduced to use JavaScript as a server-side language. ES6 (2015) was a significant revision of JavaScript, introducing advanced features into JavaScript. Currently, JavaScript has reached version ES14. ES14 (ECMAScript 2023), the 14th version, was released in June 2023.\nClient-Side JavaScript:\nClient-side JavaScript is the most common form of the language. The script should be included in or referenced by an HTML document for the code to be interpreted by the browser. It means that a web page need not be a static HTML but can include programs that interact with the user, control the browser, and dynamically create HTML content. The JavaScript client-side mechanism provides many advantages over traditional CGI server-side scripts. For example, you might use JavaScript to check if the user has entered a valid e-mail address in a form field. The JavaScript code is executed when the user submits the form, and only if all the entries are valid they would be submitted to the Web Server. JavaScript can be used to trap user-initiated events such as button clicks, link navigation, and other actions that the user initiates explicitly or implicitly. The popular client-side libraries for JavaScript development are ReactJS, NextJS, Vue JS, Angular JS, etc.\nServer-Side JavaScript:\nIn the early days, JavaScript was used for front-end development to add behaviors to HTML pages. Since 2009, JavaScript is also used as a server-side programming language to build scalable and dynamic web applications. Node.js is one of the best and most popular JavaScript runtime environments for building the server of applications using JavaScript. Using Node.js, we can execute JavaScript code outside the browser and manage the server task. The server tasks can include interaction with the database, APIs, file handling, or network communication. Due to the event-driven architecture of Node.js, it is faster than other server-side programming languages.\nAdvantages of JavaScript:\nThe merits of using JavaScript are −\nLimitations of JavaScript:\nWe cannot treat JavaScript as a full-fledged programming language. It lacks the following important features. Once again, JavaScript is a lightweight, interpreted programming language that allows you to build interactivity into otherwise static HTML pages.\nImperative vs. Declarative JavaScript:\nThe imperative and declarative is a programming paradigm, and JavaScript follows both.\nJavaScript Development Tools:\nOne of the major strengths of JavaScript is that it does not require expensive development tools. You can start with a simple text editor such as Notepad. Since it is an interpreted language inside the context of a web browser, you don't even need to buy a compiler. Here are various free tools which can be helpful while developing applications with JavaScript.\nClient-side JavaScript does not allow reading or writing of files. This has been kept for security reasons. JavaScript cannot be used for networking applications because no such support is available. JavaScript doesn't have any multithreading capabilities.\nImperative JavaScript − In imperative JavaScript, we write code in the manner that the code describes the steps to get the output. So, we are concerned about the code execution flow and output both. For example, to sum all array elements, if we write code for a loop, it explains each step to get the sum.\nDeclarative JavaScript − In declarative JavaScript, we don't need to worry about execution flow, but we should get the correct output at the end. For example, we use a built-in array.reduce() method to get a sum of array elements. Here, we don’t concern about how reduce() method is implemented in the library.\nVisual Studio Code (VS Code) − The VS Code is a code editor used by most developers to write JavaScript code. It is feature-rich and contains various extensions that can increase the productivity of any developer.\nChrome Dev Tools − Programmers may use Chrome Dev Tools to debug JavaScript code. However, they can use the debugging tool of any browser as most browsers come with it. The above tools increase the productivity of the developer for writing the code. Furthermore, you may use other tools like Git for version controlling, Webpack to build your application, etc.",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 2,
      "fields": {
        "title": "JS Enabling",
        "description": "Enabling JavaScript\nAll modern browsers come with built-in support for JavaScript, and it has enabled JavaScript by default. Frequently, you may need to enable or disable this support manually. This chapter explains how to turn JavaScript support on and off in your browsers: Chrome, Microsoft Edge, Firefox, Safari, and Opera.\n\nAdvertisement\n\nJavaScript in Chrome\nHere are the steps to turn on or turn off JavaScript in Chrome −\n\nClick the Chrome menu at the top right-hand corner of your browser.\n\nSelect the Settings option.\n\nClick on the Privacy and Security tab from the left sidebar.\n\nClick Show advanced settings at the end of the page.\n\nNext, click on the Site Settings tab.\n\nNow, scroll to the bottom of the page, and find the content section. Click on the JavaScript tab in the content section.\n\nHere, you can select a radio button to turn JavaScript on or off.\n\nAlso, you can add the URLs of the custom website to block and unblock JavaScript on particular websites.\n\nJavaScript in Microsoft Edge\nHere are simple steps to turn on or turn off JavaScript in your Microsoft Edge −\n\nClick Edge menu (three dots) at the top right-hand corner of the Edge browser.\n\nFollow More Tools → Internet Options from the menu.\n\nSelect the Security tab from the dialog box.\n\nClick the Custom Level button.\n\nScroll down till you find the Scripting option.\n\nSelect Enable radio button under Active scripting.\n\nFinally, click OK and come out.\n\nTo disable JavaScript support in your Microsoft Edge, you need to select Disable radio button under Active scripting.\n\nJavaScript in Firefox\nHere are the steps to turn on or turn off JavaScript in Firefox −\n\nOpen a new tab → type about:config in the address bar.\n\nThen, you will find the warning dialog. Select I’ll be careful, I promise!\n\nThen, you will find the list of configure options in the browser.\n\nIn the search bar, type javascript.enabled.\n\nThere you will find the option to enable or disable JavaScript by right-clicking on the value of that option → select toggle.\n\nIf javascript.enabled is true, it converts to false upon clicking toggle. If JavaScript is disabled, it gets enabled upon clicking toggle.\n\nJavaScript in Safari\nWhen you install the Safari web browser, JavaScript comes installed by default. If you have disabled it and want to enable it, follow the steps below.\n\nClick on the Safari menu from the top-left corner.\n\nSelect the Preferences in the dropdown menu. It will open a new window.\n\nOpen the Security tab.\n\nCheck the Enable JavaScript checkbox in the ‘web content’ section to enable JavaScript. You can disable JavaScript by unchecking the checkbox.\n\nNow, close the preference window and reload the web page.\n\nJavaScript in Opera\nHere are the steps to turn on or turn off JavaScript in Opera −\n\nFollow Tools → Preferences from the menu.\n\nSelect the Advanced option from the dialog box.\n\nSelect Content from the listed items.\n\nSelect Enable JavaScript checkbox.\n\nFinally, click OK and come out.\n\nTo disable JavaScript support in your Opera, you should not select the enable JavaScript checkbox.\n\nJavaScript in Brave\nBrave is well-known for its security and privacy. So, it doesn’t allow us to disable JavaScript permanently, but we can disable JavaScript for a particular website by following the below steps.\n\nOpen the website URL to disable the browser for it.\n\nNow, click on the ‘Brave Shields’ icon in the address bar.\n\nFind the Scripts option in the Shields panel.\n\nThe default value of the Scripts is “Allow Scripts”. If you want to disable JavaScript, choose the 'Block Scripts' option.\n\nAdvertisement\n\nWarning for Non-JavaScript Browsers\nIf you have to do something important using JavaScript, then you can display a warning message to the user using <noscript> tags.\n\nYou can add a noscript block immediately after the script block as follows −\n\n<html>\n<head>\n   <script>\n      document.write('Hello World!')\n   </script>\n  \n   <noscript>\n      Sorry...JavaScript is needed to go ahead.\n   </noscript>      \n</head>\n<body>\n</body>\n</html>\nNow, if the user's browser does not support JavaScript or JavaScript is not enabled, then the message from </noscript> will be displayed on the screen.",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 3,
      "fields": {
        "title": "JS Placement",
        "description": "JavaScript Placement in HTML File\nThere is flexibility to place JavaScript code anywhere in an HTML document. However, the most preferred ways to include JavaScript in an HTML file are as follows −\n\nScript in <head>...</head> section.\n\nScript in <body>...</body> section.\n\nScript in <body>...</body> and <head>...</head> sections.\n\nScript in an external file and then include in <head>...</head> section.\n\nYou can follow the syntax below to add JavaScript code using the script tag.\n\n<script>\n   // JavaScript code\n</script>\nIn the following section, we will see how we can place JavaScript in an HTML file in different ways.\n\nAdvertisement\n\nJavaScript in <head>...</head> section\nIf you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows −\n\n<html>\n<head>\n   <script type=\"text/javascript\">\n      function sayHello() {\n         alert(\"Hello World\")\n      }\n   </script>\n</head>\n\n<body>\n   <input type=\"button\" onclick=\"sayHello()\" value=\"Say Hello\" />\n</body>\n</html>\nJavaScript in <body>...</body> section\nIf you need a script to run as the page loads so that the script generates content in the page, then the script goes in the <body> portion of the document. In this case, you would not have any function defined using JavaScript. Take a look at the following code.\n\n<html>\n<head>\n</head>\n<body>   \n   <script type=\"text/javascript\">\n      document.write(\"Hello World\")\n   </script>  \n   <p>This is web page body </p>   \n</body>\n</html>\nAdvertisement\n\nJavaScript in <body> and <head> Sections\nYou can put your JavaScript code in <head> and <body> sections altogether as follows −\n\n<html>\n<head>\n   <script type=\"text/javascript\">\n      function sayHello() {\n         alert(\"Hello World\")\n      }\n   </script>\n</head>\n  \n<body>\n   <script type=\"text/javascript\">\n      document.write(\"Hello World\")\n   </script>\n   <input type=\"button\" onclick=\"sayHello()\" value=\"Say Hello\" />\n</body>\n</html>\nJavaScript in External File\nAs you begin to work more extensively with JavaScript, you will likely find cases where you are reusing identical JavaScript code on multiple pages of a site.\n\nYou are not restricted to maintaining identical code in multiple HTML files. The script tag provides a mechanism to allow you to store JavaScript in an external file and then include it in your HTML files.\n\nTo use JavaScript from an external file source, you need to write all your JavaScript source code in a simple text file with the extension \".js\" and then include that file as shown below.\n\nFor example, you can keep the following content in the filename.js file, and then you can use the sayHello function in your HTML file after including the filename.js file.\n\nfilename.js\n\nfunction sayHello() {\n   alert(\"Hello World\")\n}\nExternal JavaScript file doesn’t contain the <script> tag.\nHere is an example to show how you can include an external JavaScript file in your HTML code using the script tag and its src attribute.\n\nYou may include the external script reference within the <head> or <body> tag.\n\n<html>\n<head>\n   <script type=\"text/javascript\" src=\"filename.js\"></script>\n</head>\n<body>\t\n   ...\n</body>\n</html>\nAlso, you can create different modules to maintain code better and import each module in another JavaScript file or import all modules in a single HTML file.\n\nYou can follow the below code to add multiple scripts into a single HTML file.\n\n<head>\n  <script src=\"filename1.js\"></script>\n  <script src=\"filename2.js\"></script>\n  <script src=\"filename3.js\"></script>\n</head>\nExternal References\nYou can add an external JavaScript file in the HTML using the below 3 ways.\n\n1. Using the full file path\nWhen you need to add any hosted JavaScript file or a file that doesn’t exist in the same project into the HTML, you should use the full file path.\n\nFor example,\n\n<head>\n  <script src=\"C://javascript/filename.js\"></script>\n</head>\n2. Using the relative file path\nIf you are working on the project and JavaScript and HTML both files are in different folders, you can use the relative file path.\n\n<head>\n  <script src=\"javascript\\filename.js\"></script>\n</head>\n3. Using the filename only\nIf HTML and JavaScript both files are in the same folder, you can use the file name.\n\n<head>\n  <script src=\"filename.js\"></script>\n</head>\n\n\nAdvantages of using the <script> tag\nHere are the advantages of using the <script> tag to add JavaScript in the HTML.\n\nEase of Integration\nThe <script> tag allows developers to integrate JavaScript into the HTML file easily. Adding JavaScript to the HTML file allows you to add behavior and interactivity to the web page.\n\nImmediate Execution\nWhenever the browser finds a <script> tag on the web page, it immediately executes the JavaScript code defined inside that. It enables website visitors to interact with the web pages and get real-time updates immediately.\n\nInline and External scripts\nYou can use the <script> tag to add the inline or external script into the HTML file. If you want to load JavaScript before the HTML of a web page, you can add the <script> tag in the <head> tag. Otherwise, you can add the <script> tag in the <body> tag.\n\nExternal Libraries and Frameworks integration\nThe <script> tag enables you to add external libraries and frameworks to the HTML web page.\n\nFor example, in the below code, we have added JQuery to the web page using its CDN.\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js\"> </script>\nHere, the \"src\" attribute contains the hosted link to the library.\n\nGlobal Scope Access\nWhatever code you define in the script tag has access to the global scope of the web page. You can access the global variables, functions, etc., anywhere in the code.",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 4,
      "fields": {
        "title": "JS Syntax",
        "description": "JavaScript Syntax\nJavaScript syntax comprises a set of rules that define how to construct JavaScript code. JavaScript can be implemented using JavaScript statements placed within <script>...</script> HTML tags in a web page.\n\nYou can place <script> tags containing your JavaScript anywhere within your web page, but it is recommended to keep them within the <head> tags.\n\nThe <script> tag alerts the browser to start interpreting all text between these tags as a script. A simple syntax of your JavaScript will appear as follows:\n\n<script>\n   JavaScript code\n</script>\nThe <script> tag takes two important attributes:\n\n- Language: This attribute specifies the scripting language you are using. Typically, its value will be 'javascript'. Although recent versions of HTML (and XHTML) have phased out this attribute.\n\n- Type: This attribute is now recommended to indicate the scripting language in use, and its value should be set to 'text/javascript'. JavaScript has become the default language in HTML5 and modern browsers, so adding type is not required.\n\nSo, your JavaScript segment will look like this:\n\n<script language=\"javascript\" type=\"text/javascript\">\n   JavaScript code\n</script>\n\nYour First JavaScript Code\nLet's take a sample example to print out 'Hello World!'. We use the document.write method, which writes a string into our HTML document. This method can be used to write text, HTML, or both. Take a look at the following code:\n\n<html>\n<head>\n   <title>Your first JavaScript program</title>\n</head>\n<body>\n   <script language=\"javascript\" type=\"text/javascript\">\n      document.write(\"Hello World!\")\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\nHello World!\n\nJavaScript Values\nIn JavaScript, you can have two types of values:\n\n- Fixed values (Literals)\n- Variables (Dynamic values)\n\nJavaScript Literals\nIn the following code, 10 is a Number literal and 'Hello' is a string literal:\n\n<html>\n<body>\n   <script>\n      document.write(10); // Number Literal\n      document.write(\"<br />\"); // To add line-break\n      document.write(\"Hello\"); // String Literal\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\n10\nHello\n\nJavaScript Variables\nIn JavaScript, variables are used to store dynamic data.\n\nYou can use the following keywords to define variables in JavaScript:\n\n- var\n- let\n- const\n\nYou can use the assignment operator (=) to assign values to variables. In the following code, variable 'a' contains a numeric value, and variable 'b' contains text (string):\n\n<html>\n<body>\n   <script>\n      let a = 5; // Variable Declaration\n      document.write(a); // Using variable\n      document.write(\"<br>\");\n      let b = \"One\";\n      document.write(b);\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\n5\nOne\n\nWhitespace and Line Breaks\nJavaScript ignores spaces, tabs, and newlines in JavaScript programs. You can use spaces, tabs, and newlines freely to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.\n\nSemicolons are Optional\nSimple statements in JavaScript are generally followed by a semicolon (;), similar to C, C++, and Java. However, JavaScript allows you to omit this semicolon if each statement is on a separate line. For example, the following code can be written without semicolons:\n\n<script>\n   var1 = 10\n   var2 = 20\n</script>\nBut when formatted in a single line, you must use semicolons:\n\n<script>\n   var1 = 10; var2 = 20;\n</script>\nIt is a good practice to use semicolons.\n\nCase Sensitivity\nJavaScript is a case-sensitive language. This means that keywords, variables, function names, and any other identifiers must always be typed with consistent capitalization. 'Time' and 'time' convey different meanings in JavaScript.\n\nIn the code below, comparing 'time' and 'Time' strings returns false:\n\n<html>\n<body>\n   <script>\n      let a = \"time\";\n      let b = \"Time\";\n      document.write(\"a == b? \" + (a == b));\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\na == b? false\n\nCare should be taken while writing variable and function names in JavaScript.\n\nJavaScript and Camel Case\nJavaScript allows developers to use variable names and expression names in different cases:\n\n- Pascal Case: SmartWatch, MobileDevice, WebDriver, etc.\n- Lower Camel Case: smartwatch, mobileDevice, webDriver, etc.\n- Underscore: smart_watch, mobile_device, web_driver, etc.\n\nJavaScript does not allow hyphens in variable or expression names.\n\nJavaScript Keywords\nJavaScript contains multiple keywords used for specific tasks. For example, the 'function' keyword defines functions. The 'let', 'var', and 'const' keywords define variables.\n\nLet's understand keyword usage through the example below:\n\nExample:\nIn this example, we use the 'function' keyword to define a function. Inside the function, we use the 'var' keyword to define the 'sum' variable. Outside the function, we use 'let' and 'const' keywords to define and initialize two variables. Finally, we call the function using its name and pass variables as arguments.\n\n<html>\n<body>\n   <script>\n      function getSum(first, second) {\n         var sum = first * second;\n         document.write(\"The sum of \" + first + \" and \" + second + \" is \" + sum);\n      }\n      let first = 3;\n      const second = 4;\n      getSum(first, second);\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\nThe sum of 3 and 4 is 12\n\nJavaScript does not allow the use of keywords as variable or expression names.\n\nJavaScript Identifiers\nIdentifiers in JavaScript are the names of variables, functions, objects, etc.\n\nFor example, 'p' is an identifier in the following code:\n\n<script>\n   let p = 90;\n</script>\n'test' is an identifier in the following code:\n\n<script>\n   function test() {\n   }\n</script>\nHere are the rules for defining valid identifiers:\n\n- Identifiers should start with alphabetical characters (A-Z, a-z), $(dollar sign), or _(underscore).\n- They should not start with digits or hyphens.\n- Identifiers can contain digits except at the start.\n\nComments in JavaScript\nJavaScript supports both C-style and C++-style comments:\n\n- Any text between // and the end of a line is a comment, ignored by JavaScript.\n- Any text between /* and */ is a comment, spanning multiple lines.\n- JavaScript recognizes the HTML comment opening <!-- as a single-line comment, similar to //.\n- The HTML comment closing sequence --> is not recognized by JavaScript, so it should be written as //-->.\n\nExample:\nThe following example shows how to use comments in JavaScript.\n\n<script>\n   // This is a comment. It is similar to comments in C++\n   /*\n   * This is a multi-line comment in JavaScript\n   * It is similar to comments in C Programming\n   */\n</script>\nOperators in JavaScript\nJavaScript contains various arithmetic, logical, bitwise, etc., operators. You can use any operator in JavaScript, as shown in the example below.\n\nExample:\nIn this example, we define 'var1' and 'var2' and initialize them with number values. Then, we use the '*' operator to multiply 'var1' and 'var2'.\n\n<html>\n<body>\n   <script>\n      var var1 = 10;\n      var var2 = 20;\n      var var3 = var1 * var2;\n      var var4 = 10 + 20;\n      document.write(var3 + \" \" + var4);\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\n200 30\n\nIn this way, programmers can use other operators with operands.\n\nExpressions in JavaScript\nYou can create expressions in JavaScript by combining variables, values, and operators.\n\nExample:\nThe following expression adds two numbers:\n\n10 + 20;\nThe following expression multiplies the values of two variables:\n\na * b;\nThe following expression divides the value of variable 'c' by 2:\n\nc / 2;\nExample:\nIn the following code, we use assignment and arithmetic expressions.\n\n<html>\n<body>\n   <script>\n      let a = 10;\n      let b = 2;\n\n      let c = a; // Assigning a value of 'a' to 'c'. Assignment expression.\n      let d = a + b; // Adding 'a' and 'b'. Arithmetic expression.\n      let e = a - b; // Subtracting 'b' from 'a'.\n\n      document.write(\"c = \" + c + \"<br>\");\n      document.write(\"d = \" + d + \"<br>\");\n      document.write(\"e = \" + e + \"<br>\");\n   </script>\n</body>\n</html>\nThis code will produce the following result:\n\nc = 10\nd = 12\ne = 8\n\nWe will explore more expressions in upcoming chapters.\n\nJavaScript Character Set\nJavaScript contains a set of Unicode characters, including special characters like emojis and symbols in text.\n\nFor example, the Unicode character &larr; will display the left arrow, and Unicode character 8360 will display the Rupees sign (₹).\n\nHowever, this chapter covers only basic JavaScript syntax to get started. Many other syntaxes exist, which we will cover in upcoming chapters.",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 5,
      "fields": {
        "title": "JS Hello World",
        "description": "Write \"Hello World\" Program in JavaScript.\n\n\"Hello, World!\" is often the first program programmers write when learning a new programming language. The JavaScript \"Hello World\" program demonstrates the basic syntax of the language. This program uses different JavaScript methods to print \"Hello World\".\n\nUsing document.write():\nIn JavaScript, the simplest way to print \"Hello World\" is to use the document.write() method. This method writes a string of text directly to the HTML document or web page. Place the document.write() within <script>...</script> tags.\n\nExample:\n```html\n<script>\n  document.write(\"Hello World\");\n</script>\n```\n\nUsing alert() method:\nYou can use the window alert() method to display \"Hello World\" in a dialogue box.\n\nExample:\n```html\n<script>\n  alert(\"Hello World\");\n</script>\n```\n\nUsing console.log():\nThe console.log() method prints messages to the web console. It is useful for debugging JavaScript.\n\nExample:\n```html\n<script>\n  console.log(\"Hello World\");\n</script>\n```\n\nUsing innerHTML:\nThe innerHTML property sets or returns the HTML content of an element. It can be used to display \"Hello World\" by changing the innerHTML property of an element.\n\nExample:\n```html\n<div id=\"output\"></div>\n<script>\n  document.getElementById(\"output\").innerHTML = \"Hello World\";\n</script>\n```\n\nConsole.log() with client-sided JavaScript:\nThe console.log() method is essential for debugging frontend JavaScript. It outputs messages to the browser's console.\n\nExample:\n```html\n<script>\n  console.log(\"Hello World!\");\n  var num1 = 30;\n  var num2 = 20;\n  console.log(\"The sum of \", num1, \" and \", num2, \" is: \", num1 + num2);\n</script>\n```",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 6,
      "fields": {
        "title": "JS Comments",
        "description": "JavaScript Comments\nJavaScript comments are used to explain the purpose of the code. They are not executed as part of the program and are meant solely for human developers to understand the code better.\n\nYou can use comments for various purposes, such as:\n- Explaining the purpose of a particular piece of code.\n- Adding documentation to your code for yourself and others who may read it.\n- Temporarily disabling or 'commenting out' a block of code for testing or debugging without deleting it.\n\nA good developer always writes comments to explain the code.\n\nThere are two common ways to write comments in JavaScript:\n\n1. Single-line comments\n2. Multi-line comments\n\n**Single-line comments in JavaScript**:\nWe can start a single-line comment with double forward slashes (//). Comments extend from // to the end of the line.\n\n**Syntax**:\n```html\n<script>\n// single-line comment message\n</script>\n```\n\n**Example**:\n```html\n<html>\n<head>\n  <title>Single line comments</title>\n</head>\n<body>\n  <script>\n    // Defining the string1\n    var string1 = \"JavaScript\";\n    // Defining the string2\n    var string2 = \"TypeScript\";\n    // Printing the strings\n    document.write(string1, \" \", string2);\n  </script>\n</body>\n</html>\n```\n\n**Example**:\nIn the example below, we have commented out the 'bool1 = false;' line to prevent its execution. As a result, the value of the bool1 variable remains true.\n```html\n<html>\n<head>\n  <title>Single line comments</title>\n</head>\n<body>\n  <script>\n    var bool1 = true;\n    // bool1 = false;\n    document.write(\"The value of bool1 is: \", bool1); // print variable value\n  </script>\n</body>\n</html>\n```\n\n**Multi-line comments in JavaScript**:\nThe multi-line comment is useful when you need to comment out multiple lines of code or explain larger blocks of code. Comments are enclosed between /* and */.\n\n**Syntax**:\n```html\n<script>\n/* First line of comment message\n   The second line of the comment message */\n</script>\n```\n\n**Example**:\nIn the example below, we define variables 'a' and 'b', and then comment out code to swap their values using multi-line comments. The browser ignores the commented code.\n```html\n<html>\n<head>\n  <title>Multi line comments</title>\n</head>\n<body>\n  <script>\n    var a = 100;\n    var b = 200;\n\n    /*\n    a = a + b;\n    b = a - b;\n    a = a - b;\n    */\n\n    document.write(\"a = \" + a + \"<br>\" + \"b = \" + b);\n  </script>\n</body>\n</html>\n```\n\nAlways include comments in your code as they help other collaborators understand your code.",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 7,
      "fields": {
        "title": "JS Variables",
        "description": "JavaScript Variables\nJavaScript variables are used to store data that can be changed later on. These variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.\n\nBefore you use a variable in a JavaScript program, you must declare it. In JavaScript, you can declare variables in 4 ways −\n\n1. Without using any keywords.\n2. Using the 'var' keyword.\n3. Using the 'let' keyword.\n4. Using the 'const' keyword.\n\nThe 'let' and 'const' keywords were introduced to JavaScript in 2015 (ES6). Prior to ES6, only the 'var' keyword was used to declare variables in JavaScript. In this section, we will discuss the 'var' keyword. We will cover the 'let' and 'const' keywords in subsequent chapters.\n\n**Variable Declaration in JavaScript**:\nYou can follow the syntax below to declare variables without using any keywords.\n\n```html\n<script>\nMoney = 10;\nName = \"tutorialspoint\";\n</script>\n```\n\nFurthermore, you can use the 'var' keyword to declare variables as shown below.\n\n```html\n<script>\nvar money;\nvar name;\n</script>\n```\n\nYou can also declare multiple variables with the same 'var' keyword as follows −\n\n```html\n<script>\nvar money, name;\n</script>\n```\n\n**Variable Initialization using the Assignment Operator**:\nStoring a value in a variable is called variable initialization. You can do variable initialization at the time of variable creation or at a later point in time when you need that variable.\n\nFor instance, you might create a variable named 'money' and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows.\n\n```html\n<script>\nvar name = \"Ali\";\nvar money;\nmoney = 2000.50;\n</script>\n```\n\n**Note** − Use the 'var' keyword only for declaration or initialization once for the life of any variable name in a document. You should not re-declare the same variable twice.\n\nJavaScript is an untyped language. This means that a JavaScript variable can hold a value of any data type. Unlike many other languages, you don't have to tell JavaScript during variable declaration what type of value the variable will hold. The value type of a variable can change during the execution of a program, and JavaScript takes care of it automatically.\n\n**JavaScript Data Types**:\nIn JavaScript, a variable can hold values of dynamic data types. For example, you can store values of number, string, boolean, object, etc., data types in JavaScript variables.\n\n```html\n<script>\nvar num = 765; // Number\nvar str = \"Welcome\"; // String\nvar bool = false; // Boolean\n</script>\n```\n\nYou will learn about data types in detail in the JavaScript Data Types chapter.\n\n**JavaScript Variable Names (Identifiers)**:\nIn JavaScript, a unique character sequence is used to name variables, called identifiers.\n\nHere are some rules for naming identifiers in JavaScript −\n\n- **Valid characters** − A variable name in JavaScript can contain digits, alphabetical characters, and special characters like underscore (_) and dollar sign ($). JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, '123test' is an invalid variable name, but '_123test' is valid.\n\n- **Case sensitivity** − Variable names are case sensitive. It means 'Name' and 'name' are different identifiers.\n\n- **Unicode support** − Identifiers can also contain Unicode characters, allowing developers to define variables in any language.\n\n- **Reserved keywords** − You should not use any of the JavaScript reserved keywords as a variable name. For example, 'break' or 'boolean' are not valid variable names. A full list of JavaScript reserved keywords is available.\n\n**JavaScript Dollar Sign ($) and Underscore (_)**:\nYou can use the '$' and '_' to define variables in JavaScript, as the JavaScript engine considers them valid characters.\n\n**Example (Demonstrating identifiers)**:\nIn this example, we have defined variables using the 'var' keyword. The first variable name starts with an underscore, and the second variable name starts with a dollar sign. Programmers can uncomment the third variable declaration to check the error generated by JavaScript when starting any identifier with a digit.\n\n```html\n<html>\n<head>\n    <title>Variables in JavaScript</title>\n</head>\n<body>\n<script>\n    var _abc = \"Hi!\";\n    var $abc = \"Hello!\";\n    // var 9abc = \"Bye!\";  // This is invalid\n    document.write(\"_abc \" + _abc + \"<br>\");\n    document.write(\"$abc = \" + $abc + \"<br>\");\n</script>\n</body>\n</html>\n```\n\nIt produces the following result −\n\n_abc Hi!\n$abc = Hello!\n\n**Undefined Variable Value in JavaScript**:\nWhen you declare a variable without initializing it, it contains the undefined value. However, you can also explicitly assign the undefined value to a variable.\n\n**Example**:\n```html\n<html>\n<body>\n<script>\n    var num;\n    document.write(\"The value of num is: \" + num + \"<br/>\");\n</script>\n</body>\n</html>\n```\n\nThis produces the following result −\n\nThe value of num is: undefined\n\n**JavaScript Variable Scope**:\nThe scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes:\n\n- **Global Variables** − A global variable has global scope, meaning it can be defined anywhere in your JavaScript code.\n\n- **Local Variables** − A local variable is visible only within a function where it is defined. Function parameters are always local to that function.\n\nWithin the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look at the following example.\n\n**Example**:\nIn the example below, we have defined the variable named 'myVar' outside the function and initialized it with the 'global' value. Also, we have defined a variable with the same identifier inside the 'checkscope()' function and initialized it with the 'local' value.\n\nWe print the 'myVar' variable's value inside the function. So, the local variable takes precedence over the global variable and prints 'local' in the output.\n\n```html\n<html>\n<head>\n<title>JavaScript Variable Scope Example</title>\n</head>\n<body onload = checkscope();>\n<script>\n    var myVar = \"global\";      // Declare a global variable\n    function checkscope( ) {\n        var myVar = \"local\";    // Declare a local variable\n        document.write(myVar);\n    }\n</script>\n</body>\n</html>\n```\n\nThis produces the following result −\n\nlocal\n\n**Example**:\nIn the example below, we have defined variables without using the 'var' keyword. The 'name' variable contains a string type value, and the 'number' variable contains a float data type value.\n\nWhen we define variables without using any keyword, JavaScript considers them global variables and can use them anywhere inside the code.\n\n```html\n<html>\n<head>\n<title>Variables without var keyword</title>\n</head>\n<body>\n<script>\n    name = \"tutorialspoint\"; // String type variable\n    number = 10.25; // Number type variable\n    document.write(\"name = \" + name + \", number = \" + number + \"<br>\");\n</script>\n</body>\n</html>\n```\n\nThis produces the following result −\n\nname = tutorialspoint, number = 10.25\n\nAlso, the identifier doesn't lose the previous value if we declare the variable using the 'var' keyword with a value and re-declare the same identifier without initialization. Let’s understand it via the example below.\n\n**Example**:\nIn the example below, we have declared the 'age' variable and initialized it with 10. Again, we have declared the 'age' variable but haven’t initialized it. Still, it prints 10 in the output because it doesn’t lose the previous initialization value. However, if we update the value of the 'age' variable, it successfully updates it.\n\n```html\n<html>\n<head>\n<title>Variables with var keyword</title>\n</head>\n<body>\n<script>\n    var age = 10;\n    var age;\n    document.write(\"age = \" + age + \"<br>\");\n</script>\n</body>\n</html>\n```\n\nThis produces the following result −\n\nage = 10\n",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 8,
      "fields": {
        "title": "JS Let Statement",
        "description": "The JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This means a variable declared with let is only accessible within the block of code in which it is defined.\n\nThe let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.\n\nVariable Declaration with let statement\nFollowing is the syntax to declare a variable with let statement −\n\n```javascript\nlet var_name = value;\n```\n\nLet's have a look at some examples for variable declaration with let:\n\n```javascript\nlet name = \"John\";\nlet age = 35;\nlet x = true;\n```\n\nUsing let statement we can declare a variable of any data types, e.g., numeric, string, boolean, etc.\n\nJavaScript Block Scope vs. Function Scope\nThe scope of the variable declared with the let keyword is a block-scope. It means if you define the variable with the let keyword in a specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.\n\n```javascript\n{\n   let x = \"John\";\n}\n// here x can't be accessed\n```\n\nThe var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.\n\n```javascript\nfunction foo() {\n   if (true) {\n      let x = 5;\n      var y = 10;\n   }\n   // here x can't be accessed while y is accessible\n}\n```\n\nSometimes, we require to define the variable with the same name in different blocks of one function. Conflicts may occur with the variable value if they use the var keyword.\n\nExample:\nIn the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.\n\nWe defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.\n\n```html\n<html>\n<head>\n   <title>Variable declaration with let keyword</title>\n</head>\n<body>\n   <script>\n      let x = 10;\n      var y = 20;\n      function test() {\n         let x = 50;\n         var y = 100;\n         document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nExample:\nIn the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.\n\nWe print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has block scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.\n\n```html\n<html>\n<head>\n   <title>Variable declaration with let keyword</title>\n</head>\n<body>\n   <script>\n      function test() {\n         let bool = true;\n         if (bool) {\n            let x = 30;\n            var y = 40;\n            document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n         }\n         // x can't be accessible here\n         document.write(\"y = \" + y + \"<br/>\");\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nIn this way, the let keyword is used to improve the scoping behaviors of the code.\n\nRedeclaring Variables in JavaScript\nYou can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name into different blocks within the same function.\n\nExample:\nIn the example below, you can observe that variables declared with the let keyword can’t be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.\n\nThe code prints the value of the newly declared variable in the output.\n\n```html\n<html>\n<head>\n   <title>Variable redeclaring</title>\n</head>\n<body>\n   <script>\n      function test() {\n         if (1) {\n            let m = 70;\n            // let m = 80; // redeclaration with let keyword is not possible\n            var n = 80;\n            var n = 90; // redeclaration with var keyword is possible\n            document.write(\"m = \" + m + \", n = \" + n);\n         }\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nVariable Hoisting\nThe hoisting behavior of JavaScript moves the declaration of the variables at the top of the code. The let keyword doesn't support hoisting, but the var keyword supports hoisting.\n\nExample:\nIn the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.\n\n```html\n<html>\n<head>\n   <title>Variable hoisting</title>\n</head>\n<body>\n   <script>\n      function test() {\n         // Hoisting is not supported by let keyword\n         // m = 100;\n         // document.write(\"m = \" + m + \"<br/>\");\n         // let m;\n         n = 50;\n         document.write(\"n = \" + n + \"<br/>\");\n         var n;\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nYou can uncomment the code using the let keyword and check the error in the web console, as it doesn't support hoisting.\n",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 9,
      "fields": {
        "title": "JS Constants",
        "description": "JavaScript Constants\nJavaScript constants are variables whose values remain unchanged throughout the execution of the program. You can declare constants using the const keyword.\n\nThe const keyword is introduced in the ES6 version of JavaScript along with the let keyword. The const keyword is used to define variables with a constant reference. A variable defined with const can't be redeclared or reassigned. Const declarations have block as well as function scope.\n\nDeclaring JavaScript Constants\nYou always need to assign a value at the time of declaration if the variable is declared using the const keyword.\n\n```javascript\nconst x = 10; // Correct Way\n```\n\nIn any case, you can't declare variables with the const keyword without initialization.\n\n```javascript\nconst y; // Incorrect way\ny = 20;\n```\n\nCan't be Reassigned\nYou can't update the value of variables declared with the const keyword.\n\n```javascript\nconst y = 20;\ny = 40; // This is not possible\n```\n\nBlock Scope\nA JavaScript variable declared with the const keyword has block scope. This means the same variable is treated as different outside the block.\n\nIn the example below, the x declared within a block is different from x declared outside the block. So, we can redeclare the same variable outside the block.\n\n```javascript\n{\n  const x = \"john\";\n}\nconst x = \"Doe\";\n```\n\nBut we can't redeclare the const variable within the same block.\n\n```javascript\n{\n  const x = \"john\";\n  const x = \"Doe\"; // incorrect\n}\n```\n\nConstant Arrays and Objects in JavaScript\nWe can declare arrays and objects using the const keyword, but there is a twist in array and object declaration.\n\nThe variable with the const keyword keeps the constant reference but not the constant value. So, you can update the array or object declared with the const keyword, but you can't reassign the reference to a new array or object to the constant variable.\n\nExample (Constant Arrays)\nIn the example below, we define the array named 'arr' using the const keyword. After that, we update the array element at the 0th index and insert the 'fence' string at the end of the array.\n\nWhen you execute the following code, it will produce the output: gate,window,roof,wall,fence.\n\n```html\n<html>\n<head>\n   <title>Constant Arrays</title>\n</head>\n<body>\n   <script>\n      // Defining the constant array\n      const arr = [\"door\", \"window\", \"roof\", \"wall\"];\n      // Updating arr[0]\n      arr[0] = \"gate\";\n      // Inserting an element to the array\n      arr.push(\"fence\");\n      //arr = [\"table\", \"chair\"] // reassigning array will cause an error.\n      // Printing the array\n      document.write(arr);\n   </script>\n</body>\n</html>\n```\n\nExample (Constant Objects)\nIn the example below, we create the 'obj' object with the const keyword. Next, we update the 'animal' property of the object and insert the 'legs' property in the object. The code prints the updated object in the output.\n\n```html\n<html>\n<head>\n   <title>Constant Objects</title>\n</head>\n<body>\n   <script>\n      // Defining the constant object\n      const obj = {\n         animal: \"Lion\",\n         color: \"Yellow\",\n      };\n      // Changing animal name\n      obj.animal = \"Tiger\";\n      // Inserting legs property\n      obj.legs = 4;\n      // Printing the object\n      document.write(JSON.stringify(obj));\n      // obj = { name: \"cow\" } // This is not possible\n   </script>\n</body>\n</html>\n```\n\nNo Const Hoisting\nVariables defined with the const keyword are not hoisted to the top of the code.\n\nIn the example below, the const variable x is accessed before it is defined, causing an error. You can catch the error using a try-catch statement.\n\n```html\n<html>\n<body>\n<script>\ndocument.write(x);\nconst x = 10;\n</script>\n</body>\n</html>\n```\n\nHere are some other properties of variables declared with the const keyword:\n\n- Block scope.\n- It can't be redeclared in the same scope.\n- Variables declared with the const keyword can't be hoisted to the top of the code.\n- Constant variable's value is a primitive value.\n\nDifference between var, let, and const\nWe have given a comparison table between variables declared with the var, let, and const keywords:\n\n| Comparison basis | var  | let  | const |\n|------------------|------|------|-------|\n| Scope            | Function | Block | Block |\n| Hoisted          | Yes  | No   | No    |\n| Reassign         | Yes  | Yes  | No    |\n| Redeclare        | Yes  | No   | No    |\n| Bind This        | Yes  | No   | No    |\n\nWhich should you use among var, let, and const?\n- For block scope, you should use the let keyword.\n- If you need to assign a constant reference to any value, use the const keyword.\n- When you need to define a variable inside a particular block (like a loop or 'if statement') and need to access it outside the block but inside the function, you may use the var keyword.\n- However, you can use any keyword to define global variables.\n- Redeclaring variables is not a good practice, so you should avoid it, but if necessary, you may use the var keyword.\n",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 10,
      "fields": {
        "title": "JS Data Types",
        "description": "JavaScript Data Types\nData types in JavaScript refer to the types of values that we are storing or working with. One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the types of values that can be represented and manipulated in a programming language.\n\nJavaScript data types can be categorized as primitive and non-primitive (object). JavaScript (ES6 and higher) allows you to work with seven primitive data types −\n\n- Strings of text e.g. \"This text string\"\n- Numbers, e.g. 123, 120.50\n- Boolean e.g. true or false\n- null\n- undefined\n- BigInt\n- Symbol\n\nBigInt and Symbol were introduced in ES6. In ES5, there were only five primitive data types.\n\nIn addition to these primitive data types, JavaScript supports a composite data type known as object. We will cover objects in detail in a separate chapter.\n\nWhy are data types important?\nIn any programming language, data types are important for operation manipulation.\n\nFor example, the below code generates the \"1010\" output.\n\n```javascript\nlet sum = \"10\" + 10;\n```\n\nHere, the JavaScript engine converts the second operand to a string and combines it using the '+' operator rather than adding them.\n\nNow, let's learn about each data type with examples.\n\nJavaScript String\nIn JavaScript, a string is a sequence of characters and can be created using 3 different ways:\n\n- Using single quotes\n- Using double quotes\n- Using backticks\n\nExample\nIn the example below, we have created strings using single quotes, double quotes, and backticks. In the output, it prints the same result for all 3 strings.\n\n```html\n<html>\n<head>\n   <title> JavaScript string </title>\n</head>\n<body>\n   <script>\n      let str1 = \"Hello World!\"; // Using double quotes\n      let str2 = 'Hello World!'; // Using single quotes\n      let str3 = `Hello World!`; // Using backticks\n      document.write(str1 + \"<br>\");\n      document.write(str2 + \"<br>\");\n      document.write(str3 + \"<br>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Number\nA JavaScript number is always stored as a floating-point value (decimal number).\n\nJavaScript does not make a distinction between integer values and floating-point values.\n\nJavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard.\n\nExample\nIn the example below, we demonstrate JavaScript numbers with and without decimal points.\n\n```html\n<html>\n<head>\n   <title> JavaScript number </title>\n</head>\n<body>\n   <script>\n      let num1 = 10; // Integer\n      let num2 = 10.22; // Floating point number\n      document.write(\"The value of num1 is \" + num1 + \"<br/>\");\n      document.write(\"The value of num2 is \" + num2);\n   </script>\n</body>\n</html>\n```\n\nExample (Exponential notation of numbers)\nJavaScript also supports exponential notation of numbers. We have explained this in the below example code −\n\n```html\n<html>\n<head>\n   <title> JavaScript number Exponential notation </title>\n</head>\n<body>\n   <script>\n      let num1 = 98e4;    // 980000\n      let num2 = 98e-4;   // 0.0098\n      document.write(\"The value of num1 is: \" + num1 + \"<br/>\");\n      document.write(\"The value of num2 is: \" + num2);\n   </script>\n</body>\n</html>\n```\n\nJavaScript Boolean\nIn JavaScript, the Boolean data type has only two values: true or false.\n\n```html\n<html>\n<head>\n   <title> JavaScript Boolean </title>\n</head>\n<body>\n   <script>\n      let bool1 = true;\n      let bool2 = false;\n      document.write(\"The value of bool1 is \" + bool1 + \"<br/>\");\n      document.write(\"The value of bool2 is \" + bool2 + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Undefined\nWhen you declare a variable but don't initialize it, it contains an undefined value. However, you can manually assign an undefined value to the variable also.\n\n```html\n<html>\n<head>\n   <title> JavaScript Undefined </title>\n</head>\n<body>\n   <script>\n      let houseNo; // Contains undefined value\n      let apartment = \"Ajay\";\n      apartment = undefined; // Assigning the undefined value\n      document.write(\"The value of the house No is: \" + houseNo + \"<br/>\");\n      document.write(\"The value of the apartment is: \" + apartment + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Null\nWhen any variable's value is unknown, you can use null. It is good practice to use null for the empty or unknown value rather than undefined.\n\n```html\n<html>\n<head>\n   <title> JavaScript null </title>\n</head>\n<body>\n   <script>\n      let houseNo = null; // Unknown house number\n      let apartment = \"B-2\";\n      apartment = null; // Updating the value to null\n      document.write(\"The value of houseNo is: \" + houseNo + \"<br/>\");\n      document.write(\"The value of apartment is: \" + apartment + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Bigint\nJavaScript stores only 64-bit long floating-point numbers. If you want to store a very large number, you should use BigInt. You can create BigInt by appending 'n' to the end of the number.\n\n```html\n<html>\n<head>\n   <title> JavaScript Bigint </title>\n</head>\n<body>\n   <script>\n      let largeNum = 1245646564515635412348923448234842842343546576876789n;\n      document.write(\"The value of largeNum is \" + largeNum + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Symbol\nThe Symbol data type is introduced in the ES6 version of JavaScript. It is used to create unique primitive and immutable values.\n\nExample\nIn the example below, we created the sym1 and sym2 symbols for the same string. After that, we compared the value of sym1 and sym2, and it gave a false output. It means both symbols are unique.\n\n```html\n<html>\n<head>\n   <title> JavaScript Symbol </title>\n</head>\n<body>\n   <script>\n      let sym1 = Symbol(\"123\");\n      let sym2 = Symbol(\"123\");\n      let res = sym1 === sym2;\n      document.write(\"Is sym1 and sym2 are same? \" + res + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Object\nIn JavaScript, the object data type allows us to store a collection of data in key-value format. There are multiple ways to define objects, which we will see in the Objects chapter.\n\nExample\nIn the example below, we used '{}' (Object literals) to create an 'obj' object. The object contains the 'animal' property with the string value, the 'legs' property with the number value, and the value of the 'color' variable is assigned to the 'horseColor' property.\n\n```html\n<html>\n<head>\n   <title> JavaScript Object </title>\n</head>\n<body>\n   <script>\n      let color = \"Brown\";\n      const obj = {\n          animal: \"Horse\",\n          legs: 4,\n          horseColor: color\n      };\n      document.write(\"The given object is: \" + JSON.stringify(obj) + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Array\nIn JavaScript, an array is a list of elements of different data types. You can create an array using square brackets '[]' and insert multiple comma-separated values inside the array.\n\n```html\n<html>\n<head>\n   <title> JavaScript Array </title>\n</head>\n<body>\n   <script>\n      const colors = [\"Brown\", \"Red\", \"Pink\", \"Yellow\", \"Blue\"];\n      document.write(\"The given array is: \" + colors + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nJavaScript Date\nYou can use the JavaScript Date object to manipulate dates.\n\nExample\nIn the example below, we used the Date() constructor to create a date. In the output, you can see the current date and time according to your time zone.\n\n```html\n<html>\n<head>\n   <title> JavaScript Date </title>\n</head>\n<body>\n   <script>\n      let date = new Date();\n      document.write(\"Today's date and time is: \" + date + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nDynamic Types\nJavaScript is a dynamically typed language like Python and Ruby. So, it decides the variable's data type at runtime but not at compile time. We can initialize or reassign the value of any data type to JavaScript variables.\n\nExample\nIn the example below, we initialized the 'first' variable with a string value. After that, we updated its values to the number and boolean value.\n\n```html\n<html>\n<head>\n   <title> JavaScript dynamic data type </title>\n</head>\n<body>\n   <script>\n      let first = \"One\"; // it is string\n      first = 1; // now it's Number\n      document.write(\"The value of the first variable is \" + first + \"<br/>\");\n      first = true; // now it's Boolean\n      document.write(\"The value of the first variable is \" + first + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\nChecking Data Types Using the typeof Operator\nThe typeof operator allows you to check the type of a variable.\n\nExample\nIn the example below, we used the typeof operator to check the data type of various variables.\n\n```html\n<html>\n<head>\n   <title> typeof operator </title>\n</head>\n<body>\n   <script>\n      let num = 30;\n      let str = \"Hello\";\n      let bool = true;\n      document.write(\"The data type of num is: \" + typeof num + \"<br/>\");\n      document.write(\"The data type of str is: \" + typeof str + \"<br/>\");\n      document.write(\"The data type of bool is: \" + typeof bool + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 11,
      "fields": {
        "title": "JS Type Conversion",
        "description": "JavaScript Type Conversions\nType Conversions in JavaScript refer to the automatic or explicit process of converting data from one data type to another in JavaScript. These conversions are essential for JavaScript to perform operations and comparisons effectively. JavaScript variables can contain values of any data type as it is a weakly typed language.\n\nThere are two types of type conversion in JavaScript −\n\n1. Implicit type conversion\n2. Explicit type conversion\n\nThe implicit type conversion is also known as coercion.\n\n### Implicit Type Conversion\nWhen type conversion is done by JavaScript automatically, it is called implicit type conversion. For example, when we use the '+' operator with string and number operands, JavaScript converts the number to a string and concatenates it with the string.\n\n#### Converting to String (Implicit conversion)\nIn this example, we used the '+' operator to implicitly convert different values to the string data type.\n\n```javascript\n\"100\" + 24; // Converts 24 to string\n'100' + false; // Converts false boolean value to string\n\"100\" + null; // Converts null keyword to string\n\"100\" + undefined; // Undefined is converted to string\n```\n\n```html\n<html>\n<head>\n   <title>Implicit conversion to string </title>\n</head>\n<body>\n   <script>\n      document.write(\"100\" + 24 + \"<br/>\");\n      document.write('100' + false + \"<br/>\");\n      document.write(\"100\" + null + \"<br/>\");\n      document.write(\"100\" + undefined + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\n#### Converting to Number (Implicit conversion)\nWhen using string values containing digits with arithmetic operators except for the '+' operator, operands are automatically converted to numbers and arithmetic operations are performed.\n\n```javascript\n'100' / 50; // Converts '100' to 100\n'100' - '50'; // Converts '100' and '50' to 100 and 50\n'100' * true; // Converts true to 1\n'100' - false; // Converts false to 0\n'tp' / 50; // Converts 'tp' to NaN\n```\n\n```html\n<html>\n<head>\n   <title> Implicit conversion to Number </title>\n</head>\n<body>\n   <script>\n      document.write(('100' / 50) + \"<br>\");\n      document.write(('100' - '50') + \"<br>\");\n      document.write(('100' * true) + \"<br>\");\n      document.write(('100' - false) + \"<br>\");\n      document.write(('tp' / 50) + \"<br>\");\n   </script>\n</body>\n</html>\n```\n\n#### Converting to Boolean (Implicit conversion)\nUsing the double negation (!!) operator with any variable implicitly converts its value to a boolean.\n\n```javascript\nnum = !!0; // !0 = true, !!0 = false\nnum = !!1; // !1 = false, !!1 = true\nstr = !!\"\"; // !\"\" = true, !!\"\" = false\nstr = !!\"Hello\"; // !\"Hello\" = false, !!\"Hello\" = true\n```\n\n#### Null to Number (Implicit conversion)\nIn JavaScript, null represents empty. So, null is automatically converted to 0 when used as an operand of an arithmetic operator.\n\n```javascript\nlet num = 100 + null; // Converts null to 0\nnum = 100 * null;  // Converts null to 0\n```\n\n#### Undefined with Number and Boolean (Implicit conversion)\nUsing undefined with 'number' or 'boolean' value always results in NaN in the output.\n\n```html\n<html>\n<head>\n   <title> Using undefined with a number and boolean value </title>\n</head>\n<body>\n   <script>\n      let num = 100 + undefined; // Prints NaN\n      document.write(\"The value of num is: \" + num + \"<br>\");\n      num = false * undefined; // Prints NaN\n      document.write(\"The value of num is: \" + num + \"<br>\");\n   </script>\n</body>\n</html>\n```\n\n### Explicit Type Conversion\nIn many cases, programmers need to manually convert the data type of a variable. This is called explicit type conversion.\n\n#### Converting to String (Explicit conversion)\nYou can use the String() constructor to convert numbers, booleans, or other data types into strings.\n\n```javascript\nString(100); // number to string\nString(null); // null to string\nString(true); // boolean to string\n```\n\n```html\n<html>\n<head>\n   <title> Converting to string explicitly </title>\n</head>\n<body>\n   <script>\n      document.write(\"Type of 100: \" + typeof String(100) + \"<br/>\");\n      document.write(\"Type of null: \" + typeof String(null) + \"<br/>\");\n      document.write(\"Type of true: \" + typeof String(true) + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\n#### Converting to Number (Explicit conversion)\nYou can use the Number() constructor to convert a string to a number. You can also use the unary plus (+) operator for this purpose.\n\n```javascript\nNumber('100'); // Converts '100' to 100\nNumber(false); // Converts false to 0\nNumber(null); // Converts null to 0\n+\"200\"; // Using the unary operator\n```\n\n```html\n<html>\n<head>\n   <title> Converting to number explicitly </title>\n</head>\n<body>\n   <script>\n      document.write(Number(\"200\") + \"<br/>\");\n      document.write(Number(\"1000e-2\") + \"<br/>\");\n      document.write(Number(false) + \"<br/>\");\n      document.write(Number(null) + \"<br/>\");\n      document.write(Number(undefined) + \"<br/>\");\n      document.write(+\"200\" + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\n#### Converting to Boolean (Explicit conversion)\nYou can use the Boolean() constructor to convert other data types into booleans.\n\n```javascript\nBoolean(100); // Converts number to boolean (true)\nBoolean(0); // 0 is falsy value (false)\nBoolean(\"\"); // Empty string is falsy value (false)\nBoolean(\"Hi\"); // Converts string to boolean (true)\nBoolean(null); // null is falsy value (false)\n```\n\n```html\n<html>\n<head>\n   <title> Converting to boolean explicitly </title>\n</head>\n<body>\n   <script>\n      document.write(Boolean(100) + \"<br/>\");\n      document.write(Boolean(0) + \"<br/>\");\n      document.write(Boolean(\"\") + \"<br/>\");\n      document.write(Boolean(\"Hi\") + \"<br/>\");\n      document.write(Boolean(null) + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\n#### Converting Date to String/Number\nYou can use the Date object's Number() constructor or getTime() method to convert a date string to a number. The numeric date represents the total number of milliseconds since January 1, 1970.\n\n```html\n<html>\n<head>\n   <title> Converting date to string / number </title>\n</head>\n<body>\n   <script>\n      let date = new Date();\n      let numberDate = date.getTime();\n      document.write(\"The Numeric date is: \" + numberDate + \"<br/>\");\n      let dateString = date.toString();\n      document.write(\"The string date is: \" + dateString + \"<br/>\");\n   </script>\n</body>\n</html>\n```\n\n#### Conversion Table in JavaScript\nHere's a table summarizing the conversions in JavaScript:\n\n| Value       | String conversion | Number conversion | Boolean conversion |\n|-------------|-------------------|-------------------|---------------------|\n| 0           | \"0\"               | 0                 | false               |\n| 1           | \"1\"               | 1                 | true                |\n| \"1\"         | \"1\"               | 1                 | true                |\n| \"0\"         | \"0\"               | 0                 | true                |\n| \"\"          | \"\"                | 0                 | false               |\n| \"Hello\"    | \"Hello\"           | NaN               | true                |\n| true        | \"true\"            | 1                 | true                |\n| false       | \"false\"           | 0                 | false               |\n| null        | \"null\"            | 0                 | false               |\n| undefined   | \"undefined\"       | NaN               | false               |\n| [50]        | \"50\"              | 50                | true                |\n| [50, 100]   | \"[50, 100]\"       | NaN               | true                |\n",
        "module_id": 1,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 12,
      "fields": {
        "title": "JS Strict Mode",
        "description": "Strict Mode in JavaScript\nIn JavaScript, strict mode was introduced in ES5 (ECMAScript 2009) to make JavaScript code more secure.\n\nThe 'use strict' literal expression enables strict mode in JavaScript. It helps in avoiding common programming pitfalls and silent errors.\n\nEnabling Strict Mode\nTo enable strict mode, add the following literal expression at the beginning of your JavaScript code:\n\n```javascript\n'use strict';\n```\n\nWhy Use Strict Mode?\nHere are some reasons to use strict mode:\n\n- Error Prevention: Strict mode prevents common coding mistakes such as using undeclared variables, assigning values to read-only properties, etc.\n- Safer Code: It prevents accidental globals and restricts potentially unsafe features like 'with' statement.\n- Future Compatibility: It helps in preparing code for future versions of JavaScript by reserving keywords and features.\n\nStrict Mode in the Global Scope\nWhen 'use strict' is used at the top of a script or a function, it applies strict mode to the entire script or function.\n\nExample:\n```html\n<html>\n<head>\n   <title> Using strict mode globally </title>\n</head>\n<body>\n   <script>\n      'use strict';\n      let y = 50; // Valid\n      document.write('The value of y is: ' + y);\n      x = 100; // Invalid\n      document.write('The value of x is: ' + x);\n   </script>\n</body>\n</html>\n```\n\nStrict Mode in the Local Scope\nStrict mode can also be applied only within a specific function scope using 'use strict'. This restricts strict mode to that function and its inner functions.\n\nExample:\n```html\n<html>\n<head>\n   <title> Using strict mode locally </title>\n</head>\n<body>\n   <script>\n      x = 100; // Valid\n      document.write('The value of x is: ' + x);\n      function test() {\n         'use strict';\n         y = 50; // Invalid\n         document.write('The value of y is: ' + y);\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nCommon Mistakes in Strict Mode\nHere are some mistakes that are not allowed in strict mode:\n1. Initializing variables without declaration.\n2. Using objects without declaration.\n3. Deleting objects with the delete keyword.\n4. Deleting object prototypes.\n5. Deleting functions.\n6. Duplicate function parameters.\n7. Using octal numbers.\n8. Using escape characters.\n9. Using reserved keywords as identifiers.\n10. Writing to read-only properties.\n11. Assigning values to getter-only properties.\n12. Referencing 'this' without an object.\n13. Using the 'with' statement.\n14. Using eval() to declare variables.\n15. Using future-reserved keywords as identifiers.\n",
        "module_id": 1,
        "content": null
      }
    },
    {
      "model": "lessons.lesson",
      "pk": 13,
      "fields": {
        "title": "JS Reserved Keywords",
        "description": "Reserved Keywords in JavaScript\nThe reserved keywords in JavaScript are predefined keywords used to serve the built-in functionality of the programming language. For example, the var and let keywords are used to define variables, the function keyword is used to define functions, etc. JavaScript contains more than fifty reserved keywords.\n\nIn simple terms, you can't use the reserved keywords as an identifier. If you do, you will get the conflicts, and the code will generate the wrong output or throw an error.\n\nFor example, the below code will throw an error as 'function' is used as an identifier.\n\nvar function = \"Hello\";\n\nReserved Keywords\nHere is the list of reserved keywords; you can’t use them as an identifier −\n\nabstract\tdouble\timplements\treturn\narguments\telse\tin\tswitch\nawait\tenum\tinstanceof\tsynchronized\nboolean\teval\tint\tthis\nbreak\texport\tinterface\tthrow\nbyte\textends\tlet\tthrows\ncase\tfalse\tlong\ttransient\ncatch\tfinal\tnative\ttrue\nchar\tfinally\tnew\ttry\nclass\tfloat\tnull\ttypeof\nconst\tfor\tpackage\tvar\ncontinue\tfunction\tprivate\tvoid\ndebugger\tgoto\tprotected\tvolatile\ndefault\tif\tpublic\tyield\ndelete\timplements\tshort\twhile\ndo\timport\tstatic\twith\ndouble\tin\tsuper\n\nReserved Keywords added in ES5 and ES6\nSome new keywords are added in the ES5 and ES6 versions of JavaScript. However, some are currently in use, and some keywords are reserved for future versions.\n\nRemoved Reserved Keywords\nSome reserved keywords are removed from JavaScript, which you can’t use to achieve a particular functionality. Still, you can’t use the keywords below as an identifier as many browsers don’t support them.\n\nJavaScript Objects, Properties, and Methods\nYou should not use the name of JavaScript built-in objects, properties, and methods names as an identifier.\n\nJavaScript Built-in Objects\nArray\tArrayBuffer\tBoolean\tDataView\nDate\tError\teval\tFloat32Array\nFloat64Array\tFunction\tGenerator\tGeneratorFunction\nInt8Array\tInt16Array\tInt32Array\tIntl\nJSON\tMap\tMath\tNumber\nObject\tPromise\tProxy\tRangeError\nReferenceError\tReflect\tRegExp\tSet\nString\tSymbol\tSyntaxError\tTypeError\nUint8Array\tUint8ClampedArray\tUint16Array\tUint32Array\nURIError\tWeakMap\tWeakSet\nJavaScript Built-in Properties\nlength\tconstructor\tprototype\t__proto__\tcaller\tcallee\nJavaScript Methods\ntoString\tshift\tindexOf\tsplit\ntoLocaleString\tunshift\tlastIndexOf\tsubstr\nvalueOf\tslice\tincludes\tsubstring\ntoLocaleDateString\tsplice\tisArray\ttoLowerCase\ntoLocaleTimeString\tsort\tfrom\ttoLocaleLowerCase\ntoFixed\tmap\tcharAt\ttoLocaleUpperCase\ntoExponential\tfilter\tcharCodeAt\ttrim\ntoPrecision\treduce\tcodePointAt\tstartsWith\nconcat\treduceRight\tnormalize\tendsWith\njoin\tevery\trepeat\tmatch\npop\tsome\treplace\ttest\npush\tfind\tsearch\treverse\nfindIndex\tslice\n\nHowever, you can explore more built-in JavaScript methods and avoid using them as an identifier.\n\nOther Reserved Keywords\nJavaScript can be used with other programming languages like HTML, Java, etc. So, you should also avoid keywords that are reserved in HTML, Java, etc.\n\nHere is the list of other reserved keywords, and most of them are properties of the ‘window’ object.\n\nHTML Event Handlers\nYou shouldn’t use the HTML even handlers as a variable name in JavaScript.\n\nHere, we have listed some of the event handlers.\n\nonclick\tondblclick\tonmouseover\tonmouseout\nonmousemove\tonkeydown\tonkeyup\tonkeypress\nonfocus\tonblur\tonchange\tonsubmit\nonreset\tonload\tonunload\tonresize\nonscroll\n\nIn short, you should avoid using all the above keywords as a variable or function name.",
        "module_id": 1,
        "content": null
      }
    },
    
    
    {
      "model": "lessons.lesson",
      "pk": 14,
      "fields": {
        "title": "JS Operators",
        "description": "What is an Operator?\nIn JavaScript, an operator is a symbol that performs an operation on one or more operands, such as variables or values, and returns a result. Let us take a simple expression 4 + 5 is equal to 9. Here 4 and 5 are called operands, and ‘+’ is called the operator.\n\nJavaScript supports the following types of operators.\n\nArithmetic Operators\nComparison Operators\nLogical (or Relational) Operators\nBitwise Operators\nAssignment Operators\nMiscellaneous Operators\n\nLet's have a look at all operators one by one.\n\nJavaScript Arithmetic Operators\nThe JavaScript arithmetic operators are used to perform mathematical calculations such as addition, multiplication, subtraction, division, etc. on numbers. JavaScript supports the following arithmetic operators −\n\nAssume variable x holds 10 and variable y holds 20, then −\n\nOperator\tDescription\tExample\n+ (Addition)\tAdds two operands.\tx + y will give 30.\n- (Subtraction)\tSubtracts the second operand from the first.\tx - y will give -10.\n* (Multiplication)\tMultiplies both operands.\tx * y will give 200.\n/ (Division)\tDivides the numerator by the denominator.\ty / x will give 2.\n% (Modulus)\tOutputs the remainder of an integer division.\ty % x will give 0.\n++ (Increment)\tIncreases an integer value by one.\tx++ will give 11.\n-- (Decrement)\tDecreases an integer value by one.\tx-- will give 9.\nAddition operator (+) works for Numeric as well as Strings. e.g. \"a\" + 10 will give \"a10\".\n\nJavaScript Comparison Operators\nThe JavaScript comparison operators compare two values and return a boolean result (true or false). JavaScript supports the following comparison operators −\n\nAssume variable x holds 10 and variable y holds 20, then −\n\nOperator\tDescription\tExample\n== (Equal)\tChecks if the value of two operands is equal or not. If yes, then the condition becomes true.\t(x == y) is not true.\n!= (Not Equal)\tChecks if the value of two operands is equal or not. If the values are not equal, then the condition becomes true.\t(x != y) is true.\n=== (Strict equality)\tIt checks whether the value and data type of the variable is equal or not. If yes, then the condition becomes true.\t(x === y) is not true.\n!== (Strict inequality)\tIt checks whether the value and data type of the variable is equal or not. If the values are not equal, then the condition becomes true.\t(x !== y) is true.\n> (Greater than)\tChecks if the value of the left operand is greater than the value of the right operand. If yes, then the condition becomes true.\t(x > y) is not true.\n< (Less than)\tChecks if the value of the left operand is less than the value of the right operand. If yes, then the condition becomes true.\t(x < y) is true.\n>= (Greater than or Equal to)\tChecks if the value of the left operand is greater than or equal to the value of the right operand. If yes, then the condition becomes true.\t(x >= y) is not true.\n<= (Less than or Equal to)\tChecks if the value of the left operand is less than or equal to the value of the right operand. If yes, then the condition becomes true.\t(x <= y) is true.\n\nJavaScript Logical Operators\nThe logical operators are generally used to perform logical operations on boolean values. But logical operators can be applied to values of any types, not only boolean.\n\nJavaScript supports the following logical operators −\n\nAssume that the value of x is 10 and y is 0.\n\nOperator\tDescription\tExample\n&& (Logical AND)\tIf both the operands are non-zero, then the condition becomes true.\t(x && y) is false\n|| (Logical OR)\tIf any of the two operands are non-zero, then the condition becomes true.\t(x || y) is true.\n! (Logical NOT)\tReverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.\t!x is false.\n\nJavaScript Bitwise Operators\nThe JavaScript bitwise operators are used to perform bit-level operations on integers. JavaScript supports the following seven types of bitwise operators −\n\nAssume variable x holds 2 and variable y holds 3, then −\n\nOperator\tDescription\tExample\n& (Bitwise AND)\tIt performs a Boolean AND operation on each bit of its integer arguments.\t(x & y) is 2.\n| (Bitwise OR)\tIt performs a Boolean OR operation on each bit of its integer arguments.\t(x | y) is 3.\n^ (Bitwise XOR)\tIt performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both.\t(x ^ y) is 1.\n~ (Bitwise Not)\tIt is a unary operator and operates by reversing all the bits in the operand.\t(~y) is -4.\n<< (Left Shift)\tIt moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.\t(x << 1) is 4.\n>> (Right Shift)\tBinary Right Shift Operator. The left operand’s value is moved right by the number of bits specified by the right operand.\t(x >> 1) is 1.\n>>> (Right shift with Zero)\tThis operator is just like the >> operator, except that the bits shifted in on the left are always zero.\t(x >>> 1) is 1.\n\nJavaScript Assignment Operators\nIn JavaScript, an assignment operator is used to assign a value to a variable. JavaScript supports the following assignment operators −\n\nOperator\tDescription\tExample\n= (Simple Assignment)\tAssigns values from the right side operand to the left side operand.\tz = x + y will assign the value of x + y into z\n+= (Add and Assignment)\tIt adds the right operand to the left operand and assigns the result to the left operand.\tz += x is equivalent to z = z + x\n−= (Subtract and Assignment)\tIt subtracts the right operand from the left operand and assigns the result to the left operand.\tz -= x is equivalent to z = z - x\n*=(Multiply and Assignment)\tIt multiplies the right operand with the left operand and assigns the result to the left operand.\tz *= x is equivalent to z = z * x\n/=\t(Divide and Assignment)\tIt divides the left operand with the right operand and assigns the result to the left operand.\tz /= x is equivalent to z = z / x\n%=\t(Modules and Assignment)\tIt takes modulus using two operands and assigns the result to the left operand.\tz %= x is equivalent to z = z % x\n\nSame logic applies to Bitwise operators so they will become like <<=, >>=, >>=, &=, |= and ^=.\n\nJavaScript Miscellaneous Operators\nThere are few other operators supported by JavaScript. These operators are conditional operator (? :), typeof operator, delete operator, etc.\n\nIn the below table, we have given the JavaScript miscellaneous operators with its explanation.\n\nOperator\tDescription\n? : (Conditional)\tIf Condition is true? Then value X : Otherwise value Y\ntypeof\tIt returns the data type of the operand.\n?? (Nullish Coalescing Operator)\tIt returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\ndelete\tIt removes a property from an object.\n, (Comma)\tIt evaluates its operands (from left to right) and returns the value of the last operand.\n() (Grouping)\tIt allows to change the operator precedence.\nyield\tIt is used to pause and resume a generator function.\n… (Spread)\tIt is used to expand the iterables such as array or string.\n** (Exponentiation)\tRaises the left operand to the power of the right operand.",
        "module_id": 2,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 15,
      "fields": {
        "title": "JS Arithmetic Operators",
        "description": "JavaScript Arithmetic Operators\nArithmetic operators in JavaScript perform mathematical calculations on numeric values (operands). Most of the arithmetic operators are binary operators as they perform calculations on two operands. Some arithmetic operators are unary operators. The unary operators perform computation on a single operand.\n\nJavaScript supports many arithmetic operators such as addition, subtraction, multiplication, division operators, etc. It uses the common symbols for arithmetic operators such as \"+\" for addition, \"-\" for subtraction, \"*\" for multiplication, \"/\" for division etc.\n\nThe operands can be literals, variables or the expression.\n\nvar z = 3 + 5;  // 3 and 5 are literal values.\nconst x = 3; y = 5;\nvar z = x + y ; // x and y are variables.\nvar z = 3 + 2*x  // expression\nIn general, arithmetic operators are used to perform mathematical operations but they can be used for other operations as well. For example, the addition operator (+) can be used for string concatenation.\n\nHere, we have given a table containing the mathematical operators and explaining the functionality of each operator.\n\nOperator\tName\tDescription\n+ \tAddition\tAdds two operands\n- \tSubtraction\tSubtracts the second operand from the first\n* \tMultiplication\tMultiply both operands\n/ \tDivision\tDivide the numerator by the denominator\n% \tModulus\tOutputs the remainder of an integer division\n++ \tIncrement\tIncreases an integer value by one\n-- \tDecrement\tDecreases an integer value by one\nLet's discuss the different operators with the help of examples.\n\nJavaScript Addition (+) Operator\nThe JavaScript addition (+) operator adds two numeric operands. It is denoted by the plus (+) symbol.\n\nvar x = 5, y = 10;\nvar sum = x + y;\nThis operator can also be used to concatenate strings and/or numbers.\n\nvar z = '10' + 3  // returns 103\nvar z = '10' + '3'  // returns 103\nIf one operand is string, the addition operator converts the other operand to string and concatenate it with first operand.\nIf both the operands are string, it just concatenates the second operand to the first operand.\nIf both operands are numeric values, it will return the numeric value.\nExample\nIn the below example, we demonstrate adding two decimal numbers and concatenating the strings and numbers.\n\n<html>\n<body>\n<script>\nconst x = 3; y = 5;\nvar z = x + y ;\ndocument.write(z +\"</br>\");\nvar z = '10' + 3 \ndocument.write(z +\"</br>\");\nvar z = '10' + '3';\ndocument.write(z +\"</br>\");\n</script>\n</body>\n</html>\nJavaScript Subtraction (-) Operator\nJavaScript subtraction (-) operator subtracts the right operand from the left operand and produces their difference. It is denoted by the minus (-) symbol.\n\n20 - 10; // returns 10\n'20' - 10; // returns 10\n'20' - '10'; // returns 10\n'20ee' - 10; // returns NaN\nNaN - 10 // return NaNs\nInfinity - 10 // returns infinity\nThe subtraction operator uses numeric operands but can also be used for non-numeric operands such as strings.\nIf both operands are numbers, then resultant is number.\nIf any or both operands are strings (containing only numbers), it first converts the strings to number and then performs subtraction operations.\nIf string contains non numeric value, it will return NaN.\nIf any operand is NaN or Infinity, the result will be NaN or Infinity respectively.\nExample\nIn the below example, we demonstrate the subtraction two decimal numbers and of other datatypes.\n\n<html>\n<body>\n<script>\nvar x = 20; y = 10;\nvar z = x - y ;\ndocument.write(z +\"</br>\");\nx = \"20\"; y = \"10\"\nz = x - y ;\ndocument.write(z +\"</br>\");\nx = \"20ee\";\nz = x - y ;\ndocument.write(z +\"</br>\");\n</script>\n<p>Change the values of the variables and test the resultant values</p>\n</body>\n</html>\nJavaScript Multiplication (*) Operator\nThe JavaScript multiplication operator multiplies two numbers (operands). It gives the product of two operands. It is denoted by the asterisk (*) symbol. If two operands are of same sign, the product is positive. If the two operands are of different sign, the product is negative.\n\nIf any or both operands are string, it converts the string to number and then returns their product.\n\nExample\nIn the example below, we demonstrate the use of multiplication operator on different types of operands.\n\n<html>\n<body>\n<script>\nvar x = 20; y = 10;\nvar z = x * y ;\ndocument.write(z +\"</br>\");\nx = \"20\"; y = \"10\"\nz = x * y ;\ndocument.write(z +\"</br>\");\nx = \"20ee\";\nz = x * y ;\ndocument.write(z +\"</br>\");\n</script>\n<p>Change the values of the variables and test the resultant values</p>\n</body>\n</html>\nJavaScript Division (/) Operator\nThe JavaScript division (/) operator divides the left operand (dividend) by the right operand (divisor) and returns the quotient. It is represented by the slash (/) symbol.\n\n20/10  // returns 2\n20/-10 // return -2\n100/0  // returns Infinity\n0/0    // returns NaN\nExample\nLet's demonstrate the use of division operator.\n\n<html>\n<body>\n<script>\nvar x = 20; y = 10;\nvar z = x / y ;\ndocument.write(z +\"</br>\");\nx = \"20\"; y = \"10\"\nz = x / y ;\ndocument.write(z +\"</br>\");\nz = x / 0 ;\ndocument.write(z +\"</br>\");\nz = 0 / 0 ;\ndocument.write(z +\"</br>\");\n</script>\n<p>Change the values of the variables and test the resultant values</p>\n</body>\n</html>\nJavaScript Modulus (%) Operator\nThe JavaScript modulus (%) operator returns the remainder when first operand is divided by the second operand. It is also known as remainder operator. It is denoted by the percent (%) symbol. It takes the sign of dividend. Let’s take an example 5%3 gives 2 because when 5 is divided by 3, it gives remainder as 2.\n\nExample\nLet's understand the modulus operator with the help of an example program.\n\n<html>\n<body>\n<script>\nvar x = 20 % 9;\nvar y = -20 % 9;\nvar z = 20.43 % 9;\nvar a = 20 % -9;\nvar b = 20 % 10;\ndocument.write(x +\"</br>\");\ndocument.write(y +\"</br>\");\ndocument.write(z +\"</br>\");\ndocument.write(a +\"</br>\");\ndocument.write(b +\"</br>\");\n</script>\n</body>\n</html>\nJavaScript Increment (++) Operator\nThe JavaScript increment (++) operator increases the value of operand by one. It is an unary operator. It takes only one operand. It is denoted by double plus (++) sign.\n\nThere are two types of increment operator in JavaScript −\n\nPrefix Increment Operator\nThe prefix increment operator increments the value of the variable before its current value is used. For example,\n\nvar x = 10;\nvar y = ++x; // x is now 11 and y is also 11.\nPostfix Increment Operator\nThe postfix increment operator increments the value of the variable after its current value is used. For example,\n\nvar a = 10;\nvar b = a++; // a is now 11 but b is 10.\nHere, in the second line of the above code, first the current value of a is assigned to b, then it is incremented.\n\nLet’s look at the following example −\n\n<html>\n<body>\n<script>\nvar x = 10;\nvar y = --x;  //prefix decrement\nvar a = 10;\nvar b = a--;  // postfix decrement\ndocument.write(\"x = \" + x);\ndocument.write(\" y = \" + y + \"<br>\");\ndocument.write(\"a = \" + a);\ndocument.write(\" b = \" + b + \"<br>\");\n</script>\n<p>Change the values of the variables and check the results</p>\n</body>\n</html>\nJavaScript Decrement (--) Operator\nThe JavaScript decrement (--) operator decreases the value of operand by one. It is also an unary operator, i.e., it takes only one operand. It is denoted by double minus (--) sign.\n\nThere are two types of decrement operator in JavaScript −\n\nPrefix Decrement Operator\nThe prefix decrement operator decrements the value of the variable before its current value is used. For example,\n\nvar x = 10;\nvar y = --x; // x is now 9 and y is also 9.\nPostfix Decrement Operator\nThe postfix decrement operator decrements the value of the variable after its current value is used. For example,\n\nvar a = 10;\nvar b = a--; // a is now 9 but b is 10.\nHere, in the second line of the above code, first the current value of a is assigned to b, then it is decremented.\n\nLet’s look at the following example −\n\n<html>\n<body>\n<script>\nvar x = 10;\nvar y = --x;  //prefix decrement\nvar a = 10;\nvar b = a--;  // postfix decrement\ndocument.write(\"x = \" + x);\ndocument.write(\" y = \" + y + \"<br>\");\ndocument.write(\"a = \" + a);\ndocument.write(\" b = \" + b + \"<br>\");\n</script>\n<p>Change the values of the variables and check the results</p>\n</body>\n</html>\n",
        "module_id": 2,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 16,
      "fields": {
        "title": "JS Comparison Operators",
        "description": "JavaScript Comparison Operators\nThe comparison operators in JavaScript compare two variables or values and return a boolean value, either true or false based on comparison result. For example, we can use the comparison operators to check whether two operands are equal or not.\n\nThe comparison operators are used in logical expressions. A logical expression is evaluated to either true or false.\n\nThe comparison operators are binary operators as they perform operations on two operands. The operands can be numerical, string, logical, or object values.\n\nThere are eight comparison operators in JavaScript to perform different types of comparison. Here, we have given a table explaining each comparison operator with the example.\n\nOperator\tDescription\tExample\n==\tEqual\tx == y\n!=\tNot Equal\tx != y\n===\tStrict equality (equal value and equal type)\tx === y\n!==\tStrict inequality (not equal value or not equal type)\tx !== y\n>\tGreater than\tx > y\n<\tLess than\tx < y\n>=\tGreater than or Equal to\tx >= y\n<=\tLess than or Equal to\tx <= y\n\nHow comparison is done?\nIf both operands are of same type, the comparison operators compare the values. However, if the operands are of different types, JavaScript perform appropriate type conversion for the comparison. This is known as type coercion.\n\nThe comparison is done by checking the numerical values of the operands if both the operands are numbers. The strings are compared based on lexicographical ordering, using Unicode values. The following type coercion is done when a string is compared with a number.\n\nIf the string contains only numeric value, it is converted to number type.\n\nIf the string contains non-numeric values as well, it will be converted to NaN.\n\nIf string is empty, it is converted to zero.\n\nThe strict equality (===) and strict inequality (!==) operators perform strict comparison. These operators don't perform type conversion before performing comparison operation.\n\nDealing with falsy values\nThere are some falsy values in JavaScript. JavaScript deals with these falsy values differently while performing the comparison. Followings are the falsy values −\n\n0 (zero)\nfalse\n'' or \"\" (Empty String)\nnull\nundefined\nNaN\nAll comparison operators (except === and !==) converts false and empty string to zero before performing comparison.\n\nIn addition to above, the less and, greater than operators (<, <=, >, >=) convert null to zero and undefined to NaN.\n\nJavaScript Equality (==) Operator\nThe \"equality\" operator checks if the value of two operands are equal or not. It returns true if the operands are equal, otherwise it returns false. If the operands are of different types, it performs type conversion and then compare the operands.\n\nLet’s look at some examples of comparison with no type conversion. The both operands are of same type.\n\nconst a = 10;\nconst b = 20;\na == 10; //true\na == b; // false\n\"Hello\" == \"Hello\"; // true\nNow let’s check some example of comparison with type conversion. Here the operands are of different types.\n\n5 == '5'; // true\n0 == false; // true\n0 == ''; // true\nIn the first example above, '5' is converted to 5 (string to number conversion). The false and empty string (' '), are converted to zero (0) before comparison.\n\nExample\nThe following code shows how to use equality operator in JavaScript −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a == b);\n  document.getElementById(\"output\").innerHTML = \"(a == b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\n\nJavaScript Inequality (!=) Operator\nThe \"inequality\" operator checks if the values of two operands are not equal. It returns true if the operands are not equal, otherwise it returns false. Same as the equality operator, type conversion is performed if the operands are not of same type.\n\nIn the example below two values of same type are compared for inequality check. If the values are not equal, the inequality operator will return true.\n\n10 != 10; // false\n10 != 20; // true\n\"Hello\" != \"Hello\"; // false\nLet’s check for inequality when the operands are of different types.\n\n10 != '10'; // false\n0 != false; // false\nHere in first example, '10' is type casted to 10. Here string is converted to number type. In second example, false (Boolean value) is converted to zero (number).\n\nExample\nThe following code shows how to use inequality operator in JavaScript.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a != b);\n  document.getElementById(\"output\").innerHTML = \"(a != b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\nJavaScript Strict Equality (===) Operator\nThe \"strict equality\" operator checks whether the values and data types of the two operands are equal or not. It returns true if both operands are equal and of same type.\n\nIn other words, it checks the equality of the operands without the type conversion. If the operands are of different types, it returns false without further checking the value.\n\n10 === 10; // true\n10 === 20; // false\n'Hello'==='Hello'; // true\n10 === '10'; // false\n0 === false; // false\n\nExample\nThe following code shows how to use strict equality operator in JavaScript.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a === b);\n  document.getElementById(\"output\").innerHTML = \"(a === b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\n\nStrict Inequality (!==) Operator\nThe \"strict inequality\" operator checks whether the two operands are not equal in value or type. It returns true if the operands are of same type but not equal or are of different types.\n\nSame as strict equality operator, it also first checks the inequality of operands without type conversion. If the operands are of different type, it will return true without further checking the value.\n\n10 !== 10; //returns false\n10 !== 20; // returns true\n'Hello'!==\"Hello\"; // returns false\n10 !== '10'; //return true\n0 !== false; //returns true\n\nExample\nThe following code shows how to use strict inequality operator in JavaScript.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a !== b);\n  document.getElementById(\"output\").innerHTML = \"(a !== b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\nJavaScript Greater Than (>) Operator\nThe \"greater than\" operator checks if the value of the left operand is greater than the value of the right operand. If yes, it returns true otherwise it returns false.\n\n20 > 10; // true\n10 > 10; // false\n\"ab\" > \"aa\"; // true\n10 > '5'; // true\n\nExample\nThe following code shows how to use greater than operator in JavaScript −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a > b);\n  document.getElementById(\"output\").innerHTML = \"(a > b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\n\nGreater Than or Equal (>=) Operator\nThe \"greater than or equal\" operator checks if the value of the left operand is greater than or equal to the value of the right operand. If yes, it returns true otherwise false.\n\n10 >= 5; // true\n5 >= 5; // true\n\"ab\" >= \"aa\"; // true\n10 >= '5'; // true\nExample\nThe following code shows how to use greater than or equal to operator in JavaScript.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a >= b);\n  document.getElementById(\"output\").innerHTML = \"(a >= b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\nJavaScript Less Than (<) Operator\nThe \"less than operator\" returns true if the value of the left operand is less than the value of the right operand, otherwise it returns false.\n\n10 < 20; // true\n5 < 5; // false\n\"ab\" < \"aa\"; // true\n10 < '5'; // false\nExample\nThe following code shows how to use less than operator in JavaScript −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a < b);\n  document.getElementById(\"output\").innerHTML = \"(a < b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\nJavaScript Less Than or Equal (<=) Operator\nThe less than or equal operator checks if the value of the left operand is less than or equal to the value of the right operand. If yes, then the condition becomes true.\n\n10 <= 20; // true\n5 <= 5; // true\n\"ab\" <= \"aa\"; // false\n10 <= '5'; // false\nExample\nThe following code shows how to use less than or equal operator in JavaScript −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a <= b);\n  document.getElementById(\"output\").innerHTML = \"(a <= b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>\nComparing null, undefined and NaN\nIn JavaScript, null, undefined and NaN are the falsy values that are not converted to zero (0) for the comparison.\n\n0 == null; // returns false\n0 == undefined; // returns false\n0 == NaN; // returns false\nnull and undefined are weakly equal.\n\nnull == undefined; // returns true\nnull === undefined; // returns false\nThe type of NaN is number but it is not equal to zero. Interestingly NaN is not equal to NaN itself.\n\nNaN == NaN; // returns false",
        "module_id": 2,
        "content": null
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 17,
      "fields": {
        "title": "JS Logical Operators",
        "description": "JavaScript Logical Operators\nThe logical operators in JavaScript are generally used with Boolean operands and return a boolean value. There are mainly three types on logical operators in JavaScript - && (AND), || (OR), and ! (NOT). These operators are used to control the flow the program.\n\nAlthough the logical operators are typically used with Boolean values, they can be used with any type. For each non-boolean value, the operator converts to a boolean. The falsy values are converted to false and truthy values to true.\n\nThere are six falsy values in JavaScript: false, null, undefined, 0 (zero), \"\" (empty string), NaN. The value other than falsy values are treated as truthy values. So non zero numbers, non-empty strings, etc., are truthy values.\n\nThe && and || operators return the value of one of the operands based on condition. So if the operands are non-boolean, they return a non-boolean value. The ! operator always returns a Boolean value.\n\nThe operands may be literals, variables or expressions. These are first evaluated to boolean equivalent before performing the logical operation.\n\nIn the below table, we have given the logical operators with its description and example. Let’s assume: x = true, y = false.\n\nOperator\tDescription\tExample\n&&\tLogical AND\t(x && y) is false.\n||\tLogical OR\t(x || y) is true.\n!\tLogical NOT\t!(x) is false.\n\nJavaScript Logical AND (&&) Operator\nThe logical AND (&&) operator evaluates the operands from left to right. If the first operand can be converted to false, it will return the value of first operand, otherwise it will return the value of the second operand.\n\nx && y\nIn the above expression if x is a falsy value then it will return the value of x otherwise it will return the value of y.\n\nThe above rule is followed for all types of operands, whether they are Boolean values, numbers or strings, etc.\n\nLet's first discuss with Boolean operands. In general, for a set of Boolean operands, it will return true if both operands are true else it returns false.\n\ntrue && true; // returns true\ntrue && false;// returns false\nfalse && true; // returns false\nfalse && false; // returns false\nFor number operands, the && operator will return the first operand if it is flasy values (0, -0, and 0n), otherwise second operand.\n\n0 && 10; // returns 0\n10 && 20; // returns 20 \n20 && 0; // returns 0\nFor string values, empty string is converted to false and non-empty string to true. Look at the below example.\n\nlet str1 = '';\nlet str2 = 'Hello';\nlet str3 = 'World';\nconsole.log(str1 && str2); // returns '' empty string\nconsole.log(str2 && str3); // returns World\nLet's look how && operator works for null and undefined −\n\nnull && true // return null\nundefined && true // returns undefined\nFor all above examples, you have noticed that if the first operand can be converted to false then it returns the value of first operand otherwise the value of second operand.\n\nExample\nNow let's look at an example of a logical expression.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const x = 3;\n  const y = -2;\n  document.getElementById(\"output\").innerHTML = x > 0 && y > 2;\n</script>\n</body>\n</html>\nHere x > 0 is evaluated to true and y > 2 is evaluated to false. And the final expression becomes true && false which is evaluated as false.\n\nMultiple && Operators\nIf we have multiple && operators in an expression, the && operator evaluates the expression from left to right and it converts each operand to a boolean value. If the result is false, then it returns the value of that operand and terminates the execution. If all the operands are truthy then it returns the value of the last operand.\n\n10 && null && false; // returns null\ntrue && 10 && 20; // returns 20\nJavaScript Logical OR (||) Operator\nThe logical OR (||) operator also evaluates the operands from left to right. If the first operand can be converted to true, it will return the value of first operand, otherwise it will return the value of the second operand.\n\nx || y\nIn the above expression if x is a truthy value then it will return the value of x otherwise it will return the value of y.\n\nAs || is a logical operator but it can be applied to any type of operand not only boolean.\n\nLet's first discuss with Boolean operands. In general, for a set of Boolean operands, it will return flase if both operands are false else it returns true.\n\ntrue || true; // returns true\ntrue || false; // returns true\nfalse || true; // returns true\nfalse || false; // returns false\nFor number operands, the || operator will return the first operand if it is truthy values (other than 0, -0, and 0n), otherwise second operand.\n\n0 || 10; // returns 10\n10 || 20; // returns 10\n20 || 0; // returns 20\nFor string values, empty string is converted to false and non-empty string to true. Look at the below example.\n\nExample\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  let str1 = '';\n  let str2 = 'Hello';\n  let str3 = 'World';\n  document.getElementById(\"output\").innerHTML = \n  str1 || str2 + \"<br>\" +\n  str2 || str3;\n</script>\n</body>\n</html>\nLet's look how && operator works for null and undefined −\n\nnull || true; // returns true\nundefined || true; // returns true\nFor all above examples, you have noticed that if the first operand can be converted to true then it returns the value of first operand otherwise the value of second operand.\n\nExample\nNow let's look at an example with expression −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const x = 3;\n  const y = -2;\n  document.getElementById(\"output\").innerHTML = x > 0 || y > 2;\n</script>\n</body>\n</html>\n\nMultiple || Operators\nWe may have multiple || operators in an expression. The || operator evaluates the expression from left to right and it converts each operand to a boolean value. If the result is true, then it returns the value of that operand and terminates the execution. If all the operands are falsy then it returns the value of the last operand.\n\nnull || 10 || false // returns 10\nfalse || null || undefined // returns undefined\n\nJavaScript Logical NOT (!) Operator\nThe logical NOT (!) Operator is a unary operator. It returns false if the operand can be converted to true, otherwise it returns true.\n\n!x\nIf x is truthy, the NOT (!) operator returns false. If the x is falsy then it returns true.\n\nSame as Logical AND, and OR operators, this logical NOT operator can also be used with non-boolean operands. But it will always return a Boolean value.\n\nExample\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  document.getElementById(\"output\").innerHTML = \n  !true   + \"<br>\" +\n  !false  + \"<br>\" +\n  !0      + \"<br>\" +\n  !20     + \"<br>\" +\n  !('Hello World')\n</script>\n</body>\n</html>\n\nLogical Operators Precedence\nAn expression may have more than one logical operators in JavaScript. In such situation, the operators are evaluated on the basis of their precedence. The NOT (!) operator has the highest precedence. Then AND (&&) operator has the higher precedence than OR (||) operator.\n\nLogical NOT (!)\nLogical AND (&&)\nLogical OR (||)\nExample\nLet's check the following example −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  document.getElementById(\"output\").innerHTML = \n  (false || true && !false) // returns true\n</script>\n</body>\n</html>\nThe logical NOT (!) operator has the highest precedence so !false is evaluated to true. Hence the expression now looks like \"false || true && true\". The && has higher precedence than || so next \"true && true\" will be evaluated. Now the expression looks like \"false || true\". Finally \"false || true\" will be evaluated to true.\n\nShort Circuit Evaluation\nLogical expressions are evaluated from left to right. These are tested for short-circuit evaluation. Following is the rule of short circuit evaluation −\n\nfalse && any_value returns false\ntrue || any_value retuns true\nThe any_value part is not evaluated so it doesn't have any effect on final result.\n",
        "module_id": 2,
        "content": null
      }
    },
    
    {
       "model": "lessons.lesson",
       "pk": 18,
       "fields": {
         "title": "JS Bitwise Operators",
         "description": "JavaScript Bitwise Operators\nThe bitwise operators in JavaScript perform operations on the integer values at the binary level. They are used to manipulate each bit of the integer values. Bitwise operators are similar to logical operators but they work on individual bits.\n\nJavaScript bitwise operators works on 32-bits operands. In JavaScript, numbers are stored as 64-bit floating point number. JavaScript converts the numbers to 32-bit signed integer before performing the operation. After bitwise operation, it converts the result to 64-bits number.\n\nThere are seven bitwise operators in JavaScript. Following is the list of bitwise operators with description.\n\nOperator\tName\tDescription\n&\tBitwise AND\tReturns 1 if both bits are 1, otherwise 0.\n|\tBitwise OR\tReturns 1 if either bit is 1, otherwise 0.\n^\tBitwise XOR\tReturns 1 if both bits are different, otherwise 0.\n!\tBitwise NOT\tReturns 1 if bit is 0, otherwise 0.\n<<\tLeft Shift\tShifts the bits left by pushing zeros in from right and discarding leftmost bits.\n>>\tRight Shift\tShifts the bits right by pushing copies of leftmost bit in from left and discarding rightmost bits.\n>>>\tRight Shift with Zero\tShifts the bits right by pushing zeros in from left and discarding rightmost bits.\n\nJavaScript Bitwise AND (&) Operator\nThe bitwise AND (&) operator performs AND operation on each pair of bits of its integer operands. After the operation, it returns a new integer value with the updated bits.\n\nWhen bitwise AND operator is applied on a pair of bits, it returns 1 if both bits are 1, otherwise returns 0.\n\nFollowing is the truth table for bitwise AND operation −\n\nA\tB\tA & B\n0\t0\t0\n0\t1\t0\n1\t0\t0\n1\t1\t1\nLet's understand bitwise AND operation taking an example of 4-bit operands.\n\nA\tB\tA & B\n1111\t0001\t0001\n1111\t0010\t0010\n1111\t0100\t0100\n1111\t1000\t1000\nExample\nLet's perform bitwise AND (&) operation on 5 and 7. These numbers are represented as 32-bits integer.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n7\t00000000000000000000000000000111\n5 & 7\t00000000000000000000000000000101 (= 5)\nThe resultant value of the OR operation of each bit of the 101 and 111 binary numbers is the same as below.\n\n1 & 1 = 1\n1 & 0 = 0\n1 & 1 = 1\nSo, the resultant binary number is 111, which is equal to 7 in the decimal representation.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  const b = 7;\n  document.getElementById(\"output\").innerHTML = \"a & b = \" + (a & b);\n</script>\n</body>\n</html>\nIt will produce the following result −\n\na & b = 5\n\nJavaScript Bitwise OR (|) Operator\nThe bitwise OR (|) operator performs OR operation on each pair of bits of its integer operands. After the operation, it returns an integer value with the updated bits.\n\nWhen bitwise OR operator is applied on a pair of bits, it returns 1 if either of bits is 1, otherwise returns 0.\n\nFollowing is the truth table for bitwise OR operation.\n\nA\tB\tA | B\n0\t0\t0\n0\t1\t1\n1\t0\t1\n1\t1\t1\nLet's understand bitwise OR operation taking an example of 4-bit operands.\n\nA\tB\tA | B\n1111\t0001\t1111\n1111\t0010\t1111\n1111\t0100\t1111\n1111\t1000\t1111\nExample\nLet's perform bitwise OR (|) operation on 5 and 7. These numbers are represented as 32-bits integer.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n7\t00000000000000000000000000000111\n5 | 7\t00000000000000000000000000000111 (= 7)\nThe resultant value of the OR operation of each bit of the 101 and 111 binary numbers is the same as below.\n\n1 | 1 = 1\n1 | 0 = 1\n1 | 1 = 1\nSo, the resultant binary number is 111, which is equal to 7 in the decimal representation.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  const b = 7;\n  document.getElementById(\"output\").innerHTML = \"a | b = \" + (a | b);\n</script>\n</body>\n</html>\nIt will produce the following result −\n\na | b = 7\n\nJavaScript Bitwise XOR (^) Operator\nThe bitwise XOR (^) operator performs exclusive OR operation on each pair of bits of its integer operands. After the operation, it returns an integer value with the updated bits.\n\nWhen bitwise XOR operator is applied on a pair of bits, it returns 1 if both bits are different, otherwise returns 0.\n\nFollowing is the truth table for Bitwise XOR operation −\n\nA\tB\tA ^ B\n0\t0\t0\n0\t1\t1\n1\t0\t1\n1\t1\t0\nExample\nLet's perform bitwise XOR (^) operation on 5 and 7.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n7\t00000000000000000000000000000111\n5 ^ 7\t00000000000000000000000000000010 (= 2)\nAfter performing the bitwise XOR operation of 101 and 111, the resultant binary number is given below.\n\n1 ^ 1 = 0\n1 ^ 0 = 1\n1 ^ 1 = 0\nSo, the resultant binary number is 010, which is equal to 2.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  const b = 7;\n  document.getElementById(\"output\").innerHTML = \"a ^ b = \" + (a ^ b);\n</script>\n</body>\n</html>\nIt will produce the following output −\n\na ^ b = 2\n\nJavaScript Bitwise NOT (~) Operator\nThe bitwise NOT (~) operator performs the NOT operation on each bit of the binary number. It is a unary operator that inverts each bit of the binary number and returns the 2’s complement to the binary number.\n\nFollowing is the truth table for the Bitwise XOR operation.\n\nInput (A)\tOutput (~A)\n0\t1\n1\t0\nExample\nLet's perform bitwise NOT (~) operation.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n7\t00000000000000000000000000000111\n~5\t11111111111111111111111111111010 (= -6)\n~7\t11111111111111111111111111111000 (= -8)\nTry to execute the below code −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  const b = 7;\n  document.getElementById(\"output\").innerHTML = \n  \"~a = \" + (~a) + \"<br>\" +\n  \"~b = \" + (~b)\n</script>\n</body>\n</html>\nIt will produce the following output −\n\n~a = -6\n~b = -8\n\nBitwise Left Shift (<<) Operator\nThe JavaScript bitwise left shift (<<) operator moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros from the right and left most bits are discarded.\n\nShifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.\n\nExample\nWhen you left shift 5 (101) by 1, a value becomes 10 (1010). When you perform the left shift operation by 2 places, the resultant value is 20 (10100).\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n5 << 1\t00000000000000000000000000001010 (= 10)\n5 << 2\t00000000000000000000000000010100 (= 20)\nThe following JavaScript program demonstrates the bitwise left shift operation −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  document.getElementById(\"output\").innerHTML = \n  \"a << 1 = \" + (a << 1) + \"<br>\" +\n  \"a << 2 = \" + (a << 2);\n</script>\n</body>\n</html>\nIt will produce the following output −\n\na << 1 = 10\na << 2 = 20\n\nBitwise Right Shift (>>) Operator\nThe bitwise right shift (>>) operator moves all the bits in its first operand to the right by the number of places specified in the second operand. It inserts copies of leftmost bit in from left and discard rightmost bits. In this way it preserves the sign of the number.\n\nIn short, it removes the N last bits from the number. Here, N is a second operand. Right-shifting the binary number is equivalent to dividing the decimal number by 2.\n\nExample\nIn the below example, when we perform the right shift operation on 101 for the first time, the value of a becomes equal to 010. After performing the right-shift operation for the second time, the resultant value is 001, equal to 1 in the decimal representation.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n5 >> 1\t00000000000000000000000000000010 (= 2)\n~5\t11111111111111111111111111111010 (= -6)\n~5 >>1\t11111111111111111111111111111101 (= -3)\nTry to execute the following program −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  document.getElementById(\"output\").innerHTML = \n  \"a >> 1 = \" + (a >> 1) + \"<br>\" +\n  \"~a >> 1 = \" + (~a >> 1);\n</script>\n</body>\n</html>\nIt will produce the following output −\n\na >> 1 = 2\n~a >> 1 = -3\n\nBitwise Right Shift with Zero (>>>) Operator\nThe Right Shift with Zero (>>>) operator is very similar to the right shift operator. It always fills the left bits with zero without worrying about the sign of the bit.\n\nExample\nHere, the binary representation of 10 is 1010. When we perform the right shift with zero operation, it moves all bits 2 times in the right direction and inserts two 0 at the start. So, the resultant value will be 0010, equal to 1.\n\nDecimal Number\tBinary Equivalent (32-bits)\n5\t00000000000000000000000000000101\n5 >>> 1\t00000000000000000000000000000010 (= 2)\nThe following JavaScript program demonstrate the use of >>> operator.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 5;\n  document.getElementById(\"output\").innerHTML = \"a >>> 1 = \" + (a >>> 1);\n</script>\n</body>\n</html>\nIt will produce the following result −\n\na >>> 1 = 2\nYou may try to use the different inputs with each operator and observe the output for more practices.",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 19,
       "fields": {
         "title": "JS Assignment Operators",
         "description": "JavaScript Assignment Operators\nThe assignment operators in JavaScript are used to assign values to the variables. These are binary operators. An assignment operator takes two operands, assigns a value to the left operand based on the value of the right operand. The left operand is always a variable and the right operand may be literal, variable, or expression.\n\nlet x = 10; // right operand is a literal\nlet y = x; // right operand is a variable\nlet z = x + 10; // right operand is an expression\nAn assignment operator first evaluates the expression and then assigns the value to the variable (left operand).\n\nA simple assignment operator is equal (=) operator. In the JavaScript statement 'let x = 10;', the = operator assigns 10 to the variable x.\n\nWe can combine a simple assignment operator with other types of operators such as arithmetic, logical, etc., to get compound assignment operators. Some arithmetic assignment operators are +=, -=, *=, /=, etc. The += operator performs addition operation on the operands and assigns the result to the left-hand operand.\n\nArithmetic Assignment Operators\nIn this section, we will cover simple assignment and arithmetic assignment operators. An arithmetic assignment operator performs an arithmetic operation and assigns the result to a variable. The following is the list of operators with examples:\n\nAssignment Operator\tExample\tEquivalent To\n= (Assignment)\ta = b\ta = b\n+= (Addition Assignment)\ta += b\ta = a + b\n-= (Subtraction Assignment)\ta -= b\ta = a – b\n*= (Multiplication Assignment)\ta *= b\ta = a * b\n/= (Division Assignment)\ta /= b\ta = a / b\n%= (Remainder Assignment)\ta %= b\ta = a % b\n**= (Exponentiation Assignment)\ta **= b\ta = a ** b\n\nSimple Assignment (=) Operator\nA simple assignment (=) operator assigns a value to a variable. We can assign a single value to multiple variables. This is known as assignment chaining.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 5;\nlet y = x + 10;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x + '<br>' + 'Value of y : ' + y;\n</script>\n</body>\n</html>\nBelow is an example of assignment chaining:\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = y = 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x + '<br>' + 'Value of y : ' + y;\n</script>\n</body>\n</html>\n\nAddition Assignment (+=) Operator\nThe JavaScript addition assignment operator performs addition on the two operands and assigns the result to the left operand. Here, addition may be numeric addition or string concatenation.\n\nx += b;\nIn the above statement, it adds the values of b and x and assigns the result to x.\n\nExample: Numeric Addition Assignment\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 5;\nx += 7;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nExample: String Concatenation Assignment\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 'Hello';\nx += ' World';\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nSubtraction Assignment (-=) Operator\nThe subtraction assignment operator in JavaScript subtracts the value of the right operand from the left operand and assigns the result to the left operand (variable).\n\nlet x -= b;\nIn the above statement, it subtracts b from x and assigns the result to x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 15;\nx -= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nMultiplication Assignment (*=) Operator\nThe multiplication assignment operator in JavaScript multiplies both operands and assigns the result to the left operand.\n\nlet x *= b;\nIn the above statement, it multiplies x and b and assigns the result to x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 10;\nx *= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nDivision Assignment (/=) Operator\nThis operator divides the left operand by the right operand and assigns the result to the left operand.\n\nlet x /= b;\nIn the above statement, it divides x by b and assigns the result (quotient) to x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 10;\nx /= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nRemainder Assignment (%=) Operator\nThe JavaScript remainder assignment operator performs the remainder operation on the operands and assigns the result to the left operand.\n\nlet x %= b;\nIn the above statement, it divides x by b and assigns the result (remainder) to x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 12;\nx %= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nExponentiation Assignment (**=) Operator\nThis operator performs exponentiation operation on the operands and assigns the result to the left operand.\n\nlet x **= b;\nIn the above statement, it computes x ** b and assigns the result to x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 5;\nx **= 3;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nJavaScript Bitwise Assignment operators\nA bitwise assignment operator performs a bitwise operation on the operands and assigns the result to a variable. These operations perform two operations: first, a bitwise operation and second, a simple assignment operation. Bitwise operation is done on the bit-level. A bitwise operator treats both operands as 32-bit signed integers and performs the operation on corresponding bits of the operands. The simple assignment operator assigns the result to the variable (left operand).\n\nFollowing is the list of operators with examples:\n\nAssignment Operator\tExample\tEquivalent To\n&= (Bitwise AND Assignment)\ta &= b\ta = a & b\n|= (Bitwise OR Assignment)\ta |= b\ta = a | b\n^= (Bitwise XOR Assignment)\ta ^= b\ta = a ^ b\n\nBitwise AND Assignment Operator\nThe JavaScript bitwise AND assignment (&=) operator performs a bitwise AND operation on the operands and assigns the result to the left operand (variable).\n\nlet x &= b;\nIn the above statement, it performs bitwise AND on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx &= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nBitwise OR Assignment Operator\nThe JavaScript bitwise OR assignment (|=) operator performs a bitwise OR operation on the operands and assigns the result to the left operand (variable).\n\nlet x |= b;\nIn the above statement, it performs bitwise OR on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx |= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nBitwise XOR Assignment Operator\nThe JavaScript bitwise XOR assignment (^=) operator performs a bitwise XOR operation on the operands and assigns the result to the left operand (variable).\n\nlet x ^= b;\nIn the above statement, it performs bitwise XOR on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx ^= 5;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nJavaScript Shift Assignment Operators\nA shift assignment operator performs a bitwise shift operation on the operands and assigns the result to a variable (left operand). These are a combination of two operators, the first bitwise shift operator and second the simple assignment operator.\n\nFollowing is the list of the shift assignment operators with examples:\n\nAssignment Operator\tExample\tEquivalent To\n<<= (Left Shift Assignment)\ta <<= b\ta = a << b\n>>= (Right Shift Assignment)\ta >>= b\ta = a >> b\n>>>= (Unsigned Right Shift Assignment)\ta >>>= b\ta = a >>> b\n\nLeft Shift Assignment Operator\nThe JavaScript left shift assignment (<<=) operator performs a left shift operation on the operands and assigns the result to the left operand (variable).\n\nlet x <<= b;\nIn the above statement, it performs a left shift on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx <<= 2;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nRight Shift Assignment Operator\nThe JavaScript right shift assignment (>>=) operator performs a right shift operation on the operands and assigns the result to the left operand (variable).\n\nlet x >>= b;\nIn the above statement, it performs a right shift on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx >>= 1;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nUnsigned Right Shift Assignment Operator\nThe JavaScript unsigned right shift assignment (>>>=) operator performs an unsigned right shift operation on the operands and assigns the result to the left operand (variable).\n\nlet x >>>= b;\nIn the above statement, it performs an unsigned right shift on x and b and assigns the result to the variable x.\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nlet x = 7;\nx >>>= 2;\ndocument.getElementById('output').innerHTML = 'Value of x : ' + x;\n</script>\n</body>\n</html>\n\nJavaScript Logical Assignment operators\nIn JavaScript, a logical assignment operator performs a logical operation on the operands and assigns the result to a variable (left operand). Each logical assignment operator is a combination of two operators, the first logical operator and the second the simple assignment operator.\n\nFollowing is the list of the logical assignment operators with examples:\n\nAssignment Operator\tExample\tEquivalent To\n&&= (Logical AND Assignment)\ta &&= b\ta = a && b\n||= (Logical OR Assignment)\ta ||= b\ta = a || b\n??= (Nullish Coalescing Assignment)\ta ??= b\ta = a ?? b\n\nExample\n\n<html>\n<body>\n<div id='output'></div>\n<script>\nvar a = 5;\nvar b = 10;\nvar result = (a &&= b);\ndocument.getElementById('output').innerHTML = 'Value of (a &&= b) => ' + result + '<br/>';\nresult = (a ||= b);\ndocument.getElementById('output').innerHTML += 'Value of (a ||= b) => ' + result;\n</script>\n</body>\n</html>",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 20,
       "fields": {
         "title": "JS Conditional Operators",
         "description": "JavaScript Conditional Operators\nThe conditional operator in JavaScript first evaluates an expression for a true or false value and then executes one of the two given statements depending upon the result of the evaluation. The conditional operator is also known as the ternary operator.\n\nThe JavaScript conditional (ternary) operator is only operator that takes three operands – a condition followed by a question mark (?), then the first expression to be executed if the condition is truthy followed by a colon (:), and finally the second expression to be executed if the condition is falsy.\n\nThere are six falsy values in JavaScript. These are − 0 (zero), false, empty string ('' or \"\"), null, undefined, and NaN. All other values are treated as truthy in JavaScript.\n\nSyntax\nFollowing is the syntax of conditional (ternary) operator in JavaScript −\n\nvar variable = condition ? exp1 : exp2;\nParameters\nHere, we have explained the parameters in the above statement.\n\ncondition − It is a conditional statement.\nexp1 − If the conditional statement evaluates truthy, control flow executes the exp1 expression.\nexp2 − If the conditional statement evaluates falsy, control flow executes the exp2 expression.\nIf the value of the condition is any falsy value, the result of the expression will be the value of exp2; otherwise, it will be the value of exp1.\n\nExample\nIn the example below, we compare the value of the num1 and num2 variables in the conditional statement. Here, the conditional statement evaluates true, so the result variable contains the value of the first expression.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\nvar num1 = 90;\nvar num2 = 67;\nvar res = num1 > num2 ? \"num1 is greater than num2\" : \"num2 is greater than num1\";\ndocument.getElementById(\"output\").innerHTML = res;\n</script>\n</body>\n</html>\nIt will produce the following result −\n\nnum1 is greater than num2\n\nExample\nIn the example below, we assign the value to the object property according to the conditional statement’s result.\n\nNow, imagine what if you need to write the if-else statement to assign value to each property conditionally. The code will become complex, but with the ternary operator, you can easily do it with a single line of code.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\nconst year = 2004;\nconst obj = {\nname: \"John\",\nage: year < 2005 ? \"adult\" : \"minor\",\ncity: \"New York\"\n};\n\ndocument.getElementById(\"output\").innerHTML = \nobj.name + \" is \" + obj.age + \" and lives in \" + obj.city;\n</script>\n</body>\n</html>\nIt will produce the following result −\n\nJohn is adult and lives in New York\n\nExample\nThis example demonstrates that you can also use the expression instead of values. According to the conditional statement, control flow evaluates the first or second expression and assigns the resultant value to the 'result' variable.\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\nlet operator = '-';\nlet res = operator == '+' ? 10 + 20 : 10 - 20;\ndocument.getElementById(\"output\").innerHTML = \"The result is: \" + res;\n</script>\n</body>\n</html>\nIt will produce the following result −\n\nThe result is: -10\nIn short, you can use the ternary or conditional operator to shorten the code, which uses the if-else statement.\n\nHandling null values\nWe can use the JavaScript conditional operator to handle null value to set a default value if the user passes a null value.\n\nExample\nTry the following example −\n\n<html>\n<body>\n<div id=\"output\"></div>\n<script>\nconst greet = (user) => {\nconst name = user ? user.name : \"stranger\";\nreturn `Hello, ${name}`;\n};\ndocument.getElementById(\"output\").innerHTML =\ngreet({ name: \"John\" }) + \"<br>\" +\ngreet(null);\n</script>\n</body>\n</html>\nIt will produce the following result −\n\nHello, John\nHello, stranger",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 21,
       "fields": {
         "title": "JS Typeof Operator",
         "description": "The typeof Operator\nThe typeof operator in JavaScript is a unary operator used to get the data type of a particular variable. It is placed before its single operand, which can be of any type. Its returns a string value indicating the data type of its operand. JavaScript contains primitive and non-primitive data types.\n\nThere are seven primitive or basic in JavaScript data types – number, string, boolean, undefined, null, symbol, and bigint. There is also a composite data type called object. The object data type contains three sub data type – Object, Array and Date.\n\nAdvertisement\n\nSyntax\nFollowing is the syntax of the typeof operator −\n\ntypeof (operand);\nWe can write the operand without parenthesis as follows −\n\ntypeof operand;\nParameter\noperand − It can be a value, variable or expression representing the object or primitive. In JavaScript, primitives are data that are not object and have no methods or properties.\n\nReturn Value\nIt returns the string value representing the data type of the operand.\n\nDatatypes Returned by typeof Operator\nHere is a list of the return values for the typeof Operator.\n\nType\tString Returned by typeof\nNumber\t\"number\"\nString\t\"string\"\nBoolean\t\"boolean\"\nObject\t\"object\"\nFunction\t\"function\"\nUndefined\t\"undefined\"\nNull\t\"object\"\nSymbol\t\"symbol\"\nBigint\t\"bigint\"\nThere are seven primitive datatypes in JavaScript – number, string, boolean, bigint, undefined, null, and symbol. The typeof operator is useful to identify these primitive or basic datatypes.\n\nThe typeof operator returns same datatype of the all primitive values except the null. It returns \"object\" for the null values.\n\nFor object, date and array it returns \"object\" as datatype.\n\nFor functions and classes, it returns \"function\" as datatype.\n\nLet's use the typeof operator to identify these datatypes one by one.\n\ntypeof 10; // returns 'number'\ntypeof 'Hello World'; // returns 'string'\ntypeof true; // returns 'boolean'\ntypeof {name:\"Tutorialspoint\"}; // returns 'object'\ntypeof function foo(){};// returns 'function'\ntypeof undefined; // returns 'undefined'\ntypeof null; // returns 'object'\ntypeof Symbol(); // returns 'symbol'\ntypeof 10n; // returns 'bigint'\nAdvertisement\n\nJavaScript typeof Operator to Check Number Type\nIn JavaScript, number type represents numeric values. JavaScript uses a floating-point representation for all numbers. The JavaScript typeof operator returns 'number' for all types of numbers such as integers, floating points, zero, Infinity, NaN etc.\n\ntypeof 10; //returns \"number\";\ntypeof -10; //returns \"number\";\ntypeof 0; //returns \"number\";\ntypeof 10.20; //returns \"number\";\ntypeof Math.LN10; //returns \"number\";\ntypeof Infinity; //returns \"number\";\ntypeof NaN; //returns \"number\";\ntypeof Number('1'); //returns \"number\";\ntypeof Number('hello'); //returns \"number\";\nExample\nThe example below demonstrates how to use the typeof operator to check number data types.\n\n<html>\n   <body>\n      <p> Using typeof operator to check number data type </p>\n      <div id=\"output\"></div>\n      <script>\n         let num = 42;\n         document.getElementById(\"output\").innerHTML = typeof num;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nUsing typeof operator to check number data type\nnumber\nSet the variable to different value and then try...\nJavaScript typeof Operator to Check String Type\nStrings represent sequences of characters. The typeof operator helps identify string variables. The JavaScript typeof operator returns \"string\" for all type of strings, such as empty string, string of characters, string words, multiline string etc.\n\ntypeof \"10\"; //returns \"string\";\ntypeof \"\"; //returns \"string\";\ntypeof \"Hello World\"; //returns \"string\";\ntypeof String(10); //returns \"string\";\ntypeof typeof 2; //returns \"string\";\nExample\nIn the example below we use typeof operator to check string datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         let str = \"Hello World\";\n         document.getElementById(\"output\").innerHTML = typeof str;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nstring\nSet the variable to different value and then try...\nAdvertisement\n\nJavaScript typeof Operator to Check Boolean Type\nThe boolean values represent true or false. The tyepof operand returns boolean for boolean variables.\n\ntypeof true; //returns \"boolean\";\ntypeof false; //returns \"boolean\";\ntypeof Boolean(10); //returns \"boolean\";\nExample\nIn the example below, we use typeof operator to check boolean datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         let bool = true;\n         document.getElementById(\"output\").innerHTML = typeof bool;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nboolean\nSet the variable to different value and then try...\nJavaScript typeof Operator to Check Symbol Type\nSymbols were introduced in ES6 and provide a way to create unique identifiers. Using typeof operator with symbols returns \"symbol\".\n\ntypeof Symbol(); //returns \"symbol\";\ntypeof Symbol(\"unique values\"); //returns \"symbol\";\nExample\nIn the example below, we use typeof operator to check Symbol datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         let sym = Symbol(\"Hello\");\n         document.getElementById(\"output\").innerHTML = typeof sym;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nsymbol\nSet the variable to different value and then try...\nAdvertisement\n\nJavaScript typeof Operator to Check Undefined and Null\nThe \"undefined\" type represents a lack of a value. The \"null\" type represents the absence of any object value. When using typeof operator with an undefined variable, it returns 'undefined'. Surprisingly, using typeof operator with null also returns \"object\", which is a known quirk in JavaScript.\n\ntypeof undefined; //returns \"undefined\";\ntypeof null; //returns \"object\";\nPlease note typeof operator will return \"undefined\" for both undeclared variable and declared but unassigned variables.\n\nExample\nIn the example below, we use typeof operator to check undefined datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         let x;\n         document.getElementById(\"output\").innerHTML = typeof x;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nundefined\nSet the variable to different value and then try...\nJavaScript typeof Operator to Check Object Type\nThe JavaScript typeof operator returns \"object\" for all types of object such as JavaScript objects, arrays, dates, regex, etc.\n\nconst obj = {age: 23};\ntypeof obj; //returns \"object\";\nconst arr = [1,2,3,4];\ntypeof arr; //returns \"object\";\ntypeof new Date(); //returns \"object\";\ntypeof new String(\"Hello World\"); //returns \"object\";\nExample\nIn the example below, we use typeof operator to check object datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         const person = {name: \"John\", age: 34};\n         document.getElementById(\"output\").innerHTML = typeof person;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nobject\nSet the variable to different value and then try...\nJavaScript typeof Operator to Check Function Type\nFunctions are first class citizens in JavaScript. The JavaScript typeof operator returns \"function\" for all types of functions. Interestingly it returns \"function\" for classes also.\n\nconst myFunc = function(){return \"Hello world\"};\ntypeof myFunc; //returns \"function\";\nconst func = new Function();\ntypeof func; //returns \"function\";\nclass myClass {constructor() { }}\ntypeof myClass; // returns \"function\";\nExample\nIn the example below, we use typeof operator to check function datatype.\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         const myFunc = function(){return \"Hello world\"};\n         document.getElementById(\"output\").innerHTML = typeof myFunc;\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\nfunction\nSet the variable to different value and then try...\nJavaScript typeof Operator to Check BigInt Type\nThe typeof operator returns \"bigint\" for BigInt numbers. BigInt values are the numeric values that are too big to be represented by the number primitive.\n\ntypeof 100n; // returns \"bigint\"\nJavaScript typeof Operator in Real-Time Development\nFor example, the developer gets the data from API. If there is only a single string, API returns the string response, and for multiple strings, API returns the array of strings. In this scenario, developers require to check whether the type of the response is string or array, and if it is an array, they need to traverse each string of the array.\n\nExample\nIn the example below, we check the type of the ‘response’ variable and print its value accordingly.\n\n<html>\n   <body>\n      <script>\n         const response = [\"Hello\", \"World!\", \"How\", \"are\", \"you?\"];\n\n         if (typeof response == \"string\") {\n            document.write(\"The response is - \", response);\n         } else {\n            document.write(\"The response values are : \");\n            \n            // Traversing the array\n            for (let val of response) {\n               document.write(val, \" \");\n            }\n         }\n      </script>\n   </body>\n</html>\nOutput\nThe response values are : Hello World! How are you?\nJavaScript Arrays and typeof Operator\nArrays, despite being a type of object in JavaScript, have a distinct behavior with the typeof operator.\n\nlet numbers = [1, 2, 3];\ntypeof numbers; // Output: 'object'\nArrays return \"object\" when using typeof operator, so for precise array detection, it's often better to use Array.isArray().\n\nExample\n\n<html>\n   <body>\n      <div id=\"output\"></div>\n      <script>\n         let numbers = [1, 2, 3];\n         document.getElementById(\"output\").innerHTML = Array.isArray(numbers);\n      </script>\n      <p>Set the variable to different value and then try...</p>\n   </body>\n</html>\nOutput\ntrue\nSet the variable to different value and then try..",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 22,
       "fields": {
         "title": "JS Nullish Coalescing Operator",
         "description": "The Nullish Coalescing Operator\n\nThe Nullish Coalescing operator in JavaScript is represented by two question marks (??). It takes two operands and returns the first operand if it is not null or undefined. Otherwise, it returns the second operand. It is a logical operator introduced in ES2020.\n\nIn many cases, we can have null or empty values stored in variables, which can change the behavior of the code or generate errors. So, we can use the Nullish Coalescing operator to use default values when a variable contains falsy values.\n\nSyntax\nWe can follow the syntax below to use the Nullish Coalescing operator:\n\n```js\nop1 ?? op2\n```\n\nThe nullish coalescing operator (??) returns the second operand (op2) if the first operand (op1) is null or undefined. Otherwise, the 'res' variable will contain 'op1'.\n\nThe above syntax is similar to the below code:\n\n```js\nlet res;\nif (op1 != null || op1 != undefined) {\n  res = op1;\n} else {\n  res = op2;\n}\n```\n\nExamples\nLet's understand the nullish coalescing operator in detail with the help of some examples.\n\nExample: Handling null or undefined\nIn the example below, the value of x is null. We use x as the first operand and 5 as the second. You can see in the output that the value of y is 5, as x is null.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = null;\n    let y = x ?? 5;\n    document.getElementById(\"output\").innerHTML = \"The value of y is: \" + y;\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result −\n\n```\nThe value of y is: 5\n```\n\nExample: Handling null or undefined in Arrays\nIn the example below, we have defined an array containing numbers. We use an empty array ([]) as the second operand. So, if arr is null or undefined, we assign an empty array to the arr1 variable.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    const arr = [65, 2, 56, 2, 3, 12];\n    const arr1 = arr ?? [];\n    document.getElementById(\"output\").innerHTML = \"The value of arr1 is: \" + arr1;\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result –\n\n```\nThe value of arr1 is: 65,2,56,2,3,12\n```\n\nExample: Accessing Object Properties\nIn the example below, we create an object containing mobile-related properties. After that, we access the properties of the object and initialize the variables with values. The object doesn't contain the 'brand' property, so the code initializes the 'brand' variable with 'Apple', which you can see in the output.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    const obj = {\n      product: \"Mobile\",\n      price: 20000,\n      color: \"Blue\"\n    };\n\n    let product = obj.product ?? \"Watch\";\n    let brand = obj.brand ?? \"Apple\";\n    document.getElementById(\"output\").innerHTML = \"The product is \" + product + \" of the brand \" + brand;\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result –\n\n```\nThe product is Mobile of the brand Apple\n```\n\nShort-Circuiting\nLike Logical AND and OR operators, the Nullish Coalescing operator doesn't evaluate the right-hand operand if the left-hand operand is neither null nor undefined.\n\nUsing ?? with && or ||\nWhen we use the ?? operator with logical AND or OR operators, we should use parentheses to explicitly specify the precedence.\n\n```js\nlet x = 5 || 7 ?? 9; // Syntax Error\nlet x = (5 || 7) ?? 9; // works\n```\n\nExample\nIn the example below, we use the nullish coalescing operator with OR operator (||) and AND operator (&&).\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = (5 || 7) ?? 9;\n    let y = (5 && 7) ?? 9;\n    document.getElementById(\"output\").innerHTML = \"The value of x is : \" + x + \"<br>\" + \"The value of y is : \" + y;\n  </script>\n</body>\n</html>\n```\n\nThe above program will produce the following result −\n\n```\nThe value of x is : 5\nThe value of y is : 7\n```\n",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 23,
       "fields": {
         "title": "JS Delete Operator",
         "description": "JavaScript Delete Operator\n\nThe JavaScript delete operator deletes or removes a property from an object. It removes the property as well as the value of the property from the object. It works only with objects, not with variables or functions.\n\nIn JavaScript, an array is an object, so you can use the 'delete' operator to delete an element from a specific index. However, there are methods like pop(), slice(), or shift() available to remove elements from arrays.\n\nSyntax\nFollow the syntax below to delete an object property using the 'delete' operator:\n\n```js\ndelete obj.property;\n// OR\ndelete obj[\"property\"];\n```\n\nReturn value − The 'delete' operator returns true if the operand (specified property) is deleted successfully, otherwise, it returns false if the property is not deleted.\n\nIf you try to delete a property that doesn't exist, it will return true but will not affect the object.\n\nFollow the syntax below to delete an array element using the 'delete' operator:\n\n```js\ndelete arr[index];\n```\n\nDeleting Object Properties\nThe JavaScript delete operator can be used to delete a property of an object. To delete a property, use the delete operator followed by the property of the object:\n\n```js\ndelete obj.propertyName;\n// OR\ndelete obj[\"propertyName\"];\n```\n\nExample: Deleting an Object Property\nThe 'obj' object in the example below contains the product, price, and color properties. We use the ‘delete' operator to delete the price property from the object.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    const obj = {\n      product: \"Mobile\",\n      price: 20000,\n      color: \"Blue\"\n    };\n    delete obj.price; // deleting price \n    document.getElementById(\"output\").innerHTML =\n      \"The Mobile price is \" + obj.price + \" and color is \" + obj.color;\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result −\n\n```\nThe Mobile price is undefined and color is Blue\n```\n\nNotice that when we access the deleted property, it returns undefined.\n\nExample: Deleting a Nonexistent Object Property\nTry to delete a property that doesn't exist. It will return true but won't affect the original object.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    const obj = {\n      product: \"Mobile\",\n      price: 20000\n    };\n    document.getElementById(\"output\").innerHTML = delete obj.color;\n  </script>\n</body>\n</html>\n```\n\nThe above program will produce the following result −\n\n```\ntrue\n```\n\nDeleting Array Elements\nWe can use the delete operator to remove or delete an element from an array. To delete an element, use the delete keyword followed by the array element. Use square brackets ([]) to access elements from the array.\n\nExample\nThe below code contains an array of numbers. We use the 'delete' operator to delete the element at index 1 of the array. In the output, you can observe that the element from the array is deleted, but the positions of the other elements remain the same. The array length also remains the same.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    const arr = [10, 20, 30, 40, 50, 60];\n    delete arr[1]; // deleting 2nd element from array\n    document.getElementById(\"output\").innerHTML =\n      arr + \"<br>\" +\n      arr[1];\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result −\n\n```\n10,,30,40,50,60\nundefined\n```\n\nDeleting Predefined Objects\nThe JavaScript 'delete' operator can delete predefined objects such as Math, Date, etc. It is not advisable to delete predefined objects. Once deleted, you can't access the properties of these objects.\n\nExample: Deleting Built-in Math Object\nIn the example below, we try to delete the Math object, so we get the above error.\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    var x = 10;\n    var fun = function() { return 20; };\n    document.getElementById(\"output\").innerHTML =\n      \"delete Math.PI :\" + delete Math.PI + \"<br>\" +\n      \"delete Math :\" + delete Math + \"<br>\";\n\n    try {\n      document.getElementById(\"output\").innerHTML += Math.PI;\n    } catch (e) {\n      document.getElementById(\"output\").innerHTML += e;\n    }\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following output −\n\n```\ndelete Math.PI :false\ndelete Math :true\nReferenceError: Math is not defined\n```\n\nCan't Delete Variables and Functions\nThe delete operator can't delete variables or functions.\n\n```html\n<html>\n<body>\n  <div id=\"output1\"></div>\n  <div id=\"output2\"></div>\n  <script>\n    var x = 10;\n    var fun = function() { return 20; };\n    document.getElementById(\"output1\").innerHTML = delete x;\n    document.getElementById(\"output2\").innerHTML = delete fun;\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result −\n\n```\nfalse\nfalse\n```\n\nVariables defined without var, let, or const can be deleted. Such variables are treated as properties of the window object.\n\n```html\n<html>\n<body>\n  <div id=\"output1\"></div>\n  <div id=\"output2\"></div>\n  <script>\n    try {\n      x = 10;\n      document.getElementById(\"output1\").innerHTML = delete x;\n      document.getElementById(\"output2\").innerHTML = x;\n    } catch (e) {\n      document.getElementById(\"output2\").innerHTML = e;\n    }\n  </script>\n</body>\n</html>\n```\n\nIt will produce the following result −\n\n```\ntrue\nReferenceError: x is not defined\n```\n",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 24,
       "fields": {
         "title": "JS Comma Operator",
         "description": "JavaScript Comma Operator\n\nThe comma operator (,) in JavaScript evaluates multiple expressions from left to right. You can use the resultant value of the left expression as an input for the right expression. After evaluating all expressions, it returns the resultant value of the rightmost expression.\n\nHowever, the comma operator is also used in 'for' loops, arrays, objects, etc. In this chapter, you will learn all the use cases of the comma operator.\n\nSyntax\nYou should follow the below syntax to use the comma expression to evaluate multiple expressions:\n\n```js\nvar answer = (exp1, exp2, exp3, ex4, ...);\n```\n\nReturn value\nIt returns the resultant value of the last expression only.\n\nExamples\nLet's understand the JavaScript comma operator in detail with the help of some examples.\n\nExample: The Comma Operator with Strings\nIn the example below, we have added 4 comma-separated strings in parentheses. Here, each string works as an expression. The code will evaluate the strings and return the last string. In the output, you can see that it prints 'CSS' as it is the rightmost string.\n\n```html\n<html>\n<body>\n  <p id=\"output\"> </p>\n  <script>\n    let output = document.getElementById(\"output\");\n    let ans = (\"JavaScript\", \"Python\", \"HTML\", \"CSS\");\n    output.innerHTML = \"The value of the ans variable is: \" + ans;\n  </script>\n</body>\n</html>\n```\n\nExample: The Comma Operator with Expressions\nIn the example below, we have defined the variable 'a' and initialized it with 5. In the 'ans' variable, we store the resultant value the comma operator returns. The first expression updates the value of 'a' to 8, the second expression increments the value of 'a' by 1, and the third expression adds 2 to the updated value of the variable 'a'.\n\nThe value of 'ans' is 11, which is returned by the rightmost expression of the comma operator.\n\n```html\n<html>\n<body>\n  <p id=\"output\"> </p>\n  <script>\n    let output = document.getElementById(\"output\");\n    let a = 5;\n    let ans = (a = 8, a++, a += 2);\n    output.innerHTML = \"The value of the ans variable is: \" + ans;\n  </script>\n</body>\n</html>\n```\n\nExample: The Comma Operator with Functions\nIn the example below, we have defined the functions 'first()' and 'second()'. It prints the message and returns the value from the function according to the function name.\n\nWe use the comma operator to execute multiple functions. In the output, you can see that it invokes both functions but prints the returned value from the 'second()' function only.\n\n```html\n<html>\n<body>\n  <p id=\"output\"> </p>\n  <script>\n    let output = document.getElementById(\"output\");\n    function first() {\n      output.innerHTML += \"The first function is called! <br/>\";\n      return 1;\n    }\n\n    function second() {\n      output.innerHTML += \"The second function is called! <br/>\";\n      return 2;\n    }\n\n    let ans = (first(), second());\n    output.innerHTML += \"The value of the ans variable is: \" + ans;\n  </script>\n</body>\n</html>\n```\n\nOther Use Cases of The Comma Operator\nFor defining multiple variables in a single row.\n\n```js\nlet m = 1, n = 2, x = 3;\n```\n\nTo initialize an array with multiple elements.\n\n```js\nconst arr = [10, 20, 30, 40, 50, 60];\n```\n\nFor defining an object with multiple properties.\n\n```js\nconst obj = {\n  name: \"tutorialspoint\",\n  age: 10,\n  // ... other properties\n};\n```\n\nYou can use the comma operator in 'for' loops to initialize or update multiple variables in each iteration.\n\n```js\nfor(let p = 0, q = 1; p < n; p++, q++) {\n  // Code for the loop\n}\n```\n\nTo pass multiple parameters or arguments into functions.\n\n```js\nfunction func(param1, param2, ...) {\n  // function code\n}\n\n// OR\nfunc(10, 20, 30, ...);\n```\n\nTo import or export.\n\n```js\n// import\nimport { func2, variable } from './module2.js';\n\n// OR export\nexport {func1, variable, num};\n```\n\nTo destructure arrays or objects.\n\n```js\nlet [a, b, c] = [34, 72, 23];\n```\n\nTo print multiple variables in the console.\n\n```js\nconsole.log(a, b, c); // a, b, and c are variables.\n```\n",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 25,
       "fields": {
         "title": "JS Grouping Operator",
         "description": "JavaScript Grouping Operator\n\nThe grouping operator in JavaScript controls the precedence of evaluation in expressions. It is denoted by parentheses (), and you can put the expression inside that to change the evaluation order. It helps evaluate an expression with lower precedence before an expression with higher precedence.\n\nSyntax\nYou can follow the syntax below to use the grouping operator –\n\n```js\n( exp )\n```\n\nIn the above syntax, 'exp' is an expression to change the precedence of evaluation.\n\nExamples\nLet's look at examples of the JavaScript grouping operator:\n\nExample:\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let res1 = 4 + 5 * 6;\n    let res2 = (4 + 5) * 6;\n    document.getElementById(\"output\").innerHTML =\n      \"Result 1: \" + res1 + \"<br>\" +\n      \"Result 2: \" + res2;\n  </script>\n</body>\n</html>\n```\n\nThis will produce the following result –\n\n```\nResult 1: 34\nResult 2: 54\n```\n\nImmediately Invoked Function Expressions (IIFEs)\nTo define an immediately invoked function in JavaScript, we use the grouping operator. The anonymous function definition is put inside the grouping operator. These functions are also called self-executing functions.\n\n```js\n(function () { return 5; })();\n```\n\nExample:\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let ans1 = 5 + 10 / (function () { return 5; })();\n    let ans2 = (5 + 10) / (function () { return 5; })();\n    document.getElementById(\"output\").innerHTML =\n      \"Result 1: \" + ans1 + \"<br>\" +\n      \"Result 2: \" + ans2;\n  </script>\n</body>\n</html>\n```\n\nThis will produce the following result –\n\n```\nResult 1: 7\nResult 2: 3\n```\n\nIn simple terms, the grouping operator is used to group sub-expressions to change their evaluation precedence over normal precedence.\n\nGrouping Operator with Logical Operators\nThe grouping operator in JavaScript can also be used to group expressions with logical operators. For example, in the following expression, the && operator has higher precedence than the || operator. So, the expression will be evaluated as follows:\n\n```js\nfalse && false || true; // true\n```\n\nHowever, if we add parentheses around the || operator, the expression will be evaluated as follows:\n\n```js\nfalse && (false || true); // false\n```\n\nThis is because the grouping operator overrides the normal operator precedence, so the || operator is evaluated first.\n\nExample:\n\n```html\n<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let res1 = false && false || true; // true\n    let res2 = false && (false || true); // false\n    document.getElementById(\"output\").innerHTML =\n      \"Result without grouping operator: \" + res1 + \"<br>\" +\n      \"Result with grouping operator: \" + res2;\n  </script>\n</body>\n</html>\n```\n\nThis will produce the following result –\n\n```\nResult without grouping operator: true\nResult with grouping operator: false\n```\n",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 26,
       "fields": {
         "title": "JS Yield Operator",
         "description": "JavaScript Yield Operator\n\nThe yield operator in JavaScript is used to pause and resume the generator function asynchronously. In JavaScript, generator functions are special functions that you can pause or resume while executing. Generator functions are defined with the 'function*' syntax. The yield keyword can only be used within the generator function that contains it.\n\nThe yield operator pauses the execution of the generator function and returns its operand (expression) to the generator's caller.\n\nSyntax\nThe syntax of the yield operator in JavaScript is as follows −\n\n```js\nyield expression;\n```\n\nParameter\nexpression − The value to yield from the generator function via the iterator protocol. 'undefined' is yielded if the expression is omitted.\n\nReturn value\nIt returns the optional value passed to the generator's next() method to resume its execution.\n\nYield Operator in Generator Function\nTo understand the yield operator, let's first understand the workings of a generator function.\n\nWhen a generator function is called, it returns a generator object. When the next() method of this generator object is called, it resumes the execution of the generator function. When a yield expression is encountered, it pauses the execution and returns the expression after the yield keyword to the object's caller (the next() method).\n\nThe next() method of the generator object returns an iterator object with two properties – value and done. The value is the actual value of the expression, and done is a boolean value. The done property is true if the execution of the generator function is completely executed; otherwise, it is false.\n\nBelow is a complete example code of a generator function with the yield keyword (operator).\n\n```js\nfunction* test() {\n  console.log(\"I'm before yield expression\");\n  yield 20;\n}\nconst genObj = test();\nconsole.log(genObj.next());\n```\n\nNotice that when we call the next() method, it displays the message in the console first and then displays the iterator object:\n\n```\nI'm before yield expression\n{ value: 20, done: false }\n```\n\nExample: Returning a value\nIn the example below, we have defined the test() generator function. We used the yield operator 3 times in the function to return a number, an array, and a string, respectively.\n\nAfter that, we used the next() method four times to resume the execution of the function. Whenever the control flow finds the yield operator, it will stop execution and return the value.\n\n```js\nfunction* test() {\n  yield 20;\n  yield [1, 2, 3];\n  yield \"Hello World\";\n}\nlet res = test();\nconsole.log(res.next());\nconsole.log(res.next());\nconsole.log(res.next());\nconsole.log(res.next());\n```\n\nOutput:\n```js\n{ value: 20, done: false }\n{ value: [ 1, 2, 3 ], done: false }\n{ value: 'Hello World', done: false }\n{ value: undefined, done: true }\n```\n\nExample: Returning undefined\nWhen we omit the expression following the yield keyword, it will return undefined.\n\n```js\nfunction* test() {\n  yield;\n}\n\nlet res = test();\nconsole.log(res.next());\nconsole.log(res.next());\n```\n\nOutput:\n```js\n{ value: undefined, done: false }\n{ value: undefined, done: true }\n```\n\nExample: Passing a value to the next() method\nWe can also pass a value to the next() method. In the example below, we have passed 30 to the second next() method. It evaluates yield to 30. The variable result is assigned the value of yield, which is evaluated as 30.\n\n```js\nfunction* test() {\n  let result = yield 20;\n  console.log(\"default value passed to next() method \" + result);\n}\n\nlet res = test();\nconsole.log(res.next());\nconsole.log(res.next(30));\n```\n\nOutput:\n```js\n{ value: 20, done: false }\ndefault value passed to next() method 30\n{ value: undefined, done: true }\n```\n\nExample\nIn the code below, we use a loop, and in each operation, we stop the execution of the function using the yield operator. Afterward, we use the next() method to start the execution of the generator function.\n\n```js\n// Generator function\nfunction* test() {\n  for (let p = 0; p < 6; p += 2) {\n    yield p;\n  }\n}\nlet res = test();\nconsole.log(res.next());\nconsole.log(res.next());\nconsole.log(res.next());\nconsole.log(res.next());\n```\n\nOutput:\n```js\n{ value: 0, done: false }\n{ value: 2, done: false }\n{ value: 4, done: false }\n{ value: undefined, done: true }\n```\n\nIn real-time development, programmers use the 'yield' operator for asynchronous operations, lazy evaluations, task scheduling, iterating through large datasets, creating custom iterators, etc.",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 27,
       "fields": {
         "title": "JS Exponential Operator",
         "description": "Exponentiation Operator\n\nThe exponentiation operator in JavaScript is represented as **. It takes two operands and returns the power of the first operand raised to the second.\n\nThe exponentiation operator can also accept variables of the BigInt data type as operands. It follows the associativity property, meaning expressions like a**b**c and a**(b**c) yield the same result.\n\nThe exponentiation operator evaluates the expression from right to left.\n\nSyntax\nWe should follow the syntax below to use the exponentiation operator.\n\n```js\nlet pow = x ** y;\n```\n\nReturn value\nIt returns the result of raising the first operand (x) to the power of the second operand (y).\n\nExamples\nLet's understand the exponentiation operator in detail with some examples.\n\nExample: Basic Usage\n```html\n<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      let p = 2;\n      let q = 3;\n      let pow = p ** q;\n      document.getElementById(\"output\").innerHTML = \n      \"The value of p ** q: \" + pow;\n   </script>\n</body>\n</html>\n```\nOutput:\n```txt\nThe value of p ** q: 8\n```\n\nExample: Associativity\nThis example demonstrates the associativity property of the exponentiation operator.\n```html\n<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      let p = 3;\n      let q = 2;\n      let r = 3;\n      let pow1 = p ** q ** r;\n      let pow2 = p ** (q ** r);\n      document.getElementById(\"output\").innerHTML = \n      \"pow1 = \" + pow1 + \"<br>\" +\n      \"pow2 = \" + pow2;\n   </script>\n</body>\n</html>\n```\nOutput:\n```txt\npow1 = 6561\npow2 = 6561\n```\n\nExample: Exponentiation with BigInt\n```html\n<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n   let p = 10000000000000000000000000000n;\n   let q = 2n;\n   let pow = p ** q;\n      document.getElementById(\"output\").innerHTML = \"pow = \" + pow;\n   </script>\n</body>\n</html>\n```\nOutput:\n```txt\npow = 100000000000000000000000000000000000000000000000000000000\n```\n\nExample: Exponentiation with Non-numeric Values\nWhen using non-numeric values with the exponentiation operator, it converts values to numeric and returns the result. If conversion fails, it returns NaN.\n```html\n<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      const output = document.getElementById(\"output\");\n      let pow = 2 ** []; // Number([]) = 0\n      output.innerHTML = \"10 ** [] = \" + pow + \"<br>\";\n      pow = [] ** 2; // Number([]) = 0\n      output.innerHTML += \"[] ** 2 = \" + pow + \"<br>\";\n      pow = 2 ** [2]; // Number([2]) = 2    \n      output.innerHTML += \"10 ** [2] = \" + pow + \"<br>\";\n      pow = \"2\" ** 2; // Number(\"2\") = 2\n      output.innerHTML += \"2 ** 2 = \" + pow + \"<br>\";\n      pow = \"2a\" ** 2; // Number(\"2a\") = NaN\n      output.innerHTML += \"2a ** 2 = \" + pow + \"<br>\";\n      pow = [2, 3] ** 2; // Number([2, 3]) = NaN\n      output.innerHTML += \"[2, 3] ** 2 = \" + pow + \"<br>\";    \n   </script>\n</body>\n</html>\n```\nOutput:\n```txt\n10 ** [] = 1\n[] ** 2 = 0\n10 ** [2] = 4\n2 ** 2 = 4\n2a ** 2 = NaN\n[2, 3] ** 2 = NaN\n```\n\nThe exponentiation operator is an alternative to the pow() method of the Math object.",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 28,
       "fields": {
         "title": "JS Operator Precedence",
         "description": "In JavaScript, operator precedence ensures the priority of the operators to be executed when a single expression contains multiple operators. So, whatever expressions have higher priority, the compiler executes it first over other operators and then executes the operators with the lower precedence.\n\nWhenever you write any JavaScript expression with only 1 or 2 operators, you can easily understand the output of the expression. But when the expression contains multiple operators, you should know the concept of operator precedence to evaluate the expression correctly.\n\nThe best example of operator precedence is that in traditional mathematics, the multiplication operator has higher precedence over the addition or subtraction operator. So, if any mathematical expression contains the multiplication and addition of both operators, you need to perform the multiplication first.\n\nAssociativity\nThe term associativity refers to the direction compiler should follow while evaluating the expression. In many situations, operators have the same precedence. In such cases, ambiguity occurs that which operation the compiler should perform first. So, the compiler takes the help of associativity. It can be from left to right or right to left.\n\nFor example, we need to execute the below expression.\n\nlet res = 50/5*2;\nConsidering the above expression as (50/5) * 2 gives 20 as an output.\n\nEvaluating the expression like 50/ (5*2) gives the 5 as a resultant value.\n\nTo resolve the above ambiguity, the compiler uses the associativity rule. The associativity for the division and multiplication operator is from left to right. So, it evaluates the expression as (50 / 5) * 2.\n\nThe assignment operator has right-to-left associativity. Consider the below assignment expression.\n\nP = q = 90;\nIn the above expression, 90 is assigned to the q, and the value of the q variable is assigned to the p.\n\nIn short, the JavaScript compiler evaluates the expression based on the operator precedence, and when multiple operators have the same precedence, it uses the associativity rule.\n\nOperator Precedence Table\nThe below table contains the operator, its description, associativity direction, and a short example.\n\nOperator Precedence Operator Description Associativity Example\n1 () Grouping L -> R (expression)\n2 . Member of object L -> R Object_name.property\n2 () Function call L -> R Demo()\n2 new To create objects R -> L New test()\n2 [] Member of object L -> R Object[\"property\"]\n3 -- Postfix decrement - p--;\n3 ++ Postfix increment - p++\n4 -- Prefix decrement R -> L --p;\n4 ++ Prefix increment R -> L ++p;\n4 typeof To get the variable type R -> L typeof a;\n4 ! Logical not R -> L !a;\n4 ~ Bitwise not R -> L ~p\n4 - Unary minus R -> L -p\n4 + Unary plus R -> L +p\n4 delete To delete object property R -> L Delete arr[0]\n4 void Evaluates void R -> L Void(1)\n5 ** Exponentiation operator R -> L p ** q\n6 * Multiplication L -> R p * q\n6 / Division L -> R p / q\n6 % modulo L -> R p % q\n7 + Addition or plus operator L -> R p + q\n7 - Subtraction operator L -> R p - q\n8 << Left shift L -> R p << 2\n8 >> Signed right shift L -> R p >> 2\n8 >>> Unsigned right shift L -> R p >>> 2\n9 in Property in object L -> R x in y\n9 instanceof Instance of object L -> R p instanceof Object\n9 < Less than L -> R p < q\n9 <= Less than or equal to L -> R p <= q\n9 > Greater than L -> R p > q\n9 >= Greater than or equal to L -> R p >= q\n10 == Equality L -> R p == q\n10 != Inequality L -> R p != q\n10 === Strict equality L -> R p === q\n10 !== Strict inequality L -> R p !== q\n11 & Bitwise AND L -> R p & q\n12 ^ Bitwise XOR L -> R p ^ q\n13 | Bitwise OR L -> R p | q\n14 && Logical AND L -> R p && q\n15 || Logical OR L -> R p || q\n16 ?? Nullish Coalescing R -> L p ?? q\n17 = Assignment R -> L p = q\n17 : Colon assignment R -> L p : q\n17 += Addition assignment R -> L p += q\n17 -= Subtraction assignment R -> L p -= q\n17 *= Multiplication assignment R -> L p *= q\n17 /= Division assignment R -> L p /= q\n17 %= Modulo assignment R -> L p %= q\n17 **= Exponentiation assignment R -> L p **= q\n17 <<= Left shift assignement R -> L p <<= q\n17 >>= Right shift assignment R -> L p >>= q\n17 >>>= Unsigned right shift assignment R -> L p >>>= q\n17 &= Bitwise AND assignment R -> L p &= q\n17 ^= Bitwise XOR assignment R -> L p ^= q\n17 |= Bitwise OR assignment R -> L p |= q\n17 &&= Logical AND assignment R -> L p &&= q\n17 ||= Logical OR assignement R -> L p ||= q\n17 => Arrow operator - (a, b )=> { // function code}\n17 … Spread operator - [… arr]\n18 yield Pause / Resume R -> L yield p;\n19 , Comma operator L -> R (10, 20, 30)\nExamples\nLet's understand the operator precedence via simple examples.\nExample\nIn the example below, the first expression contains the division, modulo, and multiplication operators with the same precedence. So, the compiler will use the associativity rule, which is left to right for multiplication, division, and modulo operator.\n\nSo, it divides the 30 by 15, takes modulo of (30/15) with 3, and multiples the ((30/15)%3) with 2.\n\nIn the second expression, the exponentiation operator has right-to-left associativity. So, it evaluates the expression same as (2 *8 (3 ** 2)).\n<html>\n<body>\n<div id = \"output\"></div>\n<script>\nconst first = 30 / 15 % 3 * 2;\nconst second = 2 ** 3 ** 2;\ndocument.getElementById(\"output\").innerHTML =\n\"The value of first expression is : \" + first + \"<br>\" + \n\"The value of second expression is : \" + second;\n</script>\n</body>\n</html>\nOutput\nIt will produce the following result −\n\nThe value of first expression is : 4\nThe value of second expression is : 512\nExample\nThis code demonstrates that you can use the grouping operator () to change the operator precedence. In the below code, we have taken the same expressions which we have taken in the above code, but we change the operator precedence.\n\nIn the first expression, first, we take modulo and multiply the resultant value with 2. So, we get 0 and divide 30 by 0, returning infinity.\n\nIn the second expression, the first expression evaluates the (2 ** 3) and (8 ** 2), which is equal to 64.\n<html>\n<body>\n<div id = \"output\"></div>\n<script>\nconst first = 30 / ((15 % 3) * 2);\nconst second = (2 ** 3) ** 2;\ndocument.getElementById(\"output\").innerHTML =\n\"The value of first expression is : \" + first + \"<br>\" + \n\"The value of second expression is : \" + second;\n</script>\n</body>\n</html>\nOutput\nThe value of first expression is : Infinity\nThe value of second expression is : 64\nThe grouping operator can change operator precedence for any operator as it has the highest operator precedence.",
         "module_id": 2,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 29,
       "fields": {
         "title": "JS If…Else",
         "description": "The JavaScript if...else statement executes a block of code when the specified condition is true. When the condition is false, the else block will be executed. The if-else statements can be used to control the flow of execution of a program based on different conditions.\n\nWhile writing a program, there may be a situation when you need to adopt one out of a given set of paths. In such cases, you need to use conditional statements that allow your program to make correct decisions and perform the right actions.\n\nJavaScript supports conditional statements used to perform different actions based on different conditions. Here we will explain the if...else statement.\n\nFlow Chart of if-else\nThe following flow chart shows how the if-else statement works.\n\nDecision Making\nJavaScript supports the following forms of if...else statement −\n\nif statement\n\nif...else statement\n\nif...else if... statement.\n\nJavaScript if statement\nThe if statement is the fundamental control statement that allows JavaScript to make decisions and execute statements conditionally.\n\nSyntax\nThe syntax for a basic if statement is as follows −\n\nif (expression) {\n   Statement(s) to be executed if expression is true\n}\nHere a JavaScript expression is evaluated. If the resulting value is true, the given statement(s) are executed. If the expression is false, then no statement would be not executed. Most of the times, you will use comparison operators while making decisions.\n\nExample\nTry the following example to understand how the if statement works.\n\n<html>\n<body>     \n   <div id ='output'> </div>\n   <script type = \"text/javascript\">\n      let result;\n      let age = 20;\n      if( age > 18 ) {\n         result = \"Qualifies for driving\";\n      }\n      document.getElementById(\"output\").innerHTML = result;\n   </script>      \n<p> Set the variable to a different value and then try... </p>\n</body>\n</html>\nOutput\nQualifies for driving\nSet the variable to different value and then try...\nJavaScript if...else statement\nThe 'if...else' statement is the next form of control statement that allows JavaScript to execute statements in a more controlled way.\n\nSyntax\nif (expression) {\n   Statement(s) to be executed if expression is true\n} else {\n   Statement(s) to be executed if expression is false\n}\nHere JavaScript expression is evaluated. If the resulting value is true, the given statement(s) in the ‘if’ block, are executed. If the expression is false, then the given statement(s) in the else block are executed.\n\nExample\nTry the following code to learn how to implement an if-else statement in JavaScript.\n\n<html>\n<body>\n   <div id ='output'> </div>\n   <script type = \"text/javascript\">\n      let result;\n      let age = 15;\n      if( age > 18 ) {\n         result = \"Qualifies for driving\";\n      } else {\n         result = \"Does not qualify for driving\";\n      }\n      document.getElementById(\"output\").innerHTML = result;\n   </script>     \n   <p> Set the variable to a different value and then try... </p>\n</body>\n</html>\nOutput\nDoes not qualify for driving\nSet the variable to different value and then try...\n\nJavaScript if...else if... statement\nThe if...else if... statement (also called as if...else ladder) is an advanced form of if…else that allows JavaScript to make a correct decision out of several conditions.\n\nSyntax\nThe syntax of an if-else-if statement is as follows −\n\nif (expression 1) {\n   Statement(s) to be executed if expression 1 is true\n} else if (expression 2) {\n   Statement(s) to be executed if expression 2 is true\n} else if (expression 3) {\n   Statement(s) to be executed if expression 3 is true\n} else {\n   Statement(s) to be executed if no expression is true\n}\nThere is nothing special about this code. It is just a series of if statements, where each if is a part of the else clause of the previous statement. Statement(s) are executed based on the true condition, if none of the conditions is true, then the else block is executed.\n\nExample\nTry the following code to learn how to implement an if-else-if statement in JavaScript.\n\n<html>\n<body>\n   <div id=\"demo\"></div>\n   <script type=\"text/javascript\">\n      const output = document.getElementById(\"demo\");\n      let book = \"maths\";\n      if (book == \"history\") {\n         output.innerHTML = \"<b>History Book</b>\";\n      } else if (book == \"maths\") {\n         output.innerHTML = \"<b>Maths Book</b>\";\n      } else if (book == \"economics\") {\n         output.innerHTML = \"<b>Economics Book</b>\";\n      } else {\n         output.innerHTML = \"<b>Unknown Book</b>\";\n      }\n   </script>\n   <p> Set the variable to a different value and then try... </p>\n</body>\n</html>\nOutput\nMaths Book\nSet the variable to different value and then try...",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 30,
       "fields": {
         "title": "JS While",
         "description": "A while statement in JavaScript creates a loop that executes a block of code repeatedly, as long as the specified condition is true. The condition is evaluated before the execution of the block of code.\n\nWhile writing a program, you may encounter a situation where you need to perform an action over and over again. In such situations, you would need to write loop statements to reduce the number of lines.\n\nJavaScript supports all the necessary loops to ease the pressure of programming. In this chapter, we will discuss the while loop.\n\nThere are 2 kinds of while loops in JavaScript, as given below.\n\nEntry-controlled loops − The loop checks whether the looping condition is valid first and enters into the body of the loop to execute the loop statements.\n\nExit-controlled loops − The loop enters into the body and executes the loop statements without checking the condition. After completing the iteration, it checks the condition.\n\nJavaScript while Loop\nThe most basic loop in JavaScript is the while loop which would be discussed in this chapter. The while loop is an entry-controlled loop.\n\nThe purpose of a while loop is to execute a statement or code block repeatedly as long as an expression is true. Once the expression becomes false, the loop terminates.\n\nFlow Chart\nThe flow chart of while loop looks as follows −\n\nWhile loop\nSyntax\nThe syntax of while loop in JavaScript is as follows −\n\nwhile (expression) {\n   Statement(s) to be executed if expression is true\n}\nExample\nIn the example below, we defined the 'count' variable and initialized it with 0. After that, we make iterations using the while loop until the value of the count is less than 10.\n\n<html>\n<body>\n    <div id = 'output'></div>\n    <script type=\"text/javascript\">\n        let output = document.getElementById(\"output\");\n        var count = 0;\n        output.innerHTML=\"Starting Loop <br>\";\n        while (count < 10) {\n            output.innerHTML+=\"Current Count : \" + count + \"<br>\";\n            count++;\n        }\n        output.innerHTML+=\"Loop stopped!\";\n    </script>\n    <p> Set the variable to a different value and then try... </p>\n</body>\n</html>\n\nOutput\nStarting Loop\nCurrent Count : 0\nCurrent Count : 1\nCurrent Count : 2\nCurrent Count : 3\nCurrent Count : 4\nCurrent Count : 5\nCurrent Count : 6\nCurrent Count : 7\nCurrent Count : 8\nCurrent Count : 9\nLoop stopped!\nSet the variable to different value and then try... \nJavaScript do...while Loop\nThe do...while loop is similar to the while loop except that the condition check happens at the end of the loop. This means that the loop will always be executed at least once, even if the condition is false.\n\nDo While Loop\nSyntax\nThe syntax for do-while loop in JavaScript is as follows −\n\ndo {\n   Statement(s) to be executed;\n} while (expression);\nDon't miss the semicolon used at the end of the do...while loop.\nExample\nIn the example below, we used the do...while loop and printed the results in the output until the value of the count variable is less than 5. In the output, we can observe that it always executes for once, even if the condition is false.\n\n<html>\n<body>\n    <div id=\"output\"></div>\n    <script type=\"text/javascript\">\n        let output = document.getElementById(\"output\");\n        var count = 0;\n        output.innerHTML += \"Starting Loop\" + \"<br />\";\n        do {\n            output.innerHTML += \"Current Count : \" + count + \"<br />\";\n            count++;\n        }\n        while (count < 5);\n        output.innerHTML += \"Loop stopped!\";\n    </script>\n    <p>Set the variable to a different value and then try...</p>\n</body>\n</html>\n\nOutput\nStarting Loop\nCurrent Count : 0 \nCurrent Count : 1 \nCurrent Count : 2 \nCurrent Count : 3 \nCurrent Count : 4\nLoop Stopped!\nSet the variable to different value and then try...\nJavaScript while vs. for Loops\nThe JavaScript while loop is similar to the for loop with the first and third expressions omitted. A for loop is generally used when the number of iteration is fixed and known but we use the while loop when the number of iterations is not known.\n\nExample\nLet's take an example of printing the first five natural numbers using for loop −\n\n<html>\n<body>\n  <p> First five natural numbers:</p>\n  <div id = \"demo\"> </div>\n  <script>  \n    const output = document.getElementById(\"demo\");\n    for(let i = 1; i <= 5; i++){\n      output.innerHTML += i + \"<br>\";\n    }\n  </script>\n</body>\n</html>\n\nIt will produce the following output −\n\nFirst five natural numbers:\n1\n2\n3\n4\n5\n\nExample\nWe can now modify the above for loop as follows −\n\n<html>\n<body>\n  <p> First five natural numbers:</p>\n  <div id = \"demo\"> </div>\n  <script>  \n    const output = document.getElementById(\"demo\");\n    let i = 1;\n    for(; i <= 5; ){\n      output.innerHTML += i + \"<br>\";\n      i++\n    }\n  </script>\n</body>\n</html>\n\nOutput\n\nFirst five natural numbers:\n\n1\n2\n3\n4\n5\n\nExample\nIn the above example, we have omitted the first and third expressions in the for loop statement. This is similar to the while loop statement. Look at the below example −\n\n<html>\n<body>\n  <p> First five natural numbers:</p>\n  <div id = \"demo\"> </div>\n  <script>  \n    const output = document.getElementById(\"demo\");\n    let i = 1;\n    while(i <= 5){\n      output.innerHTML += i + \"<br>\";\n      i++\n    }\n  </script>\n</body>\n</html>\n\nOutput\n\nFirst five natural numbers:\n\n1\n2\n3\n4\n5\n\nYou notice that the for loop without the first expression (initialization) and third expression (iteration) is similar to the while loop.",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 31,
       "fields": {
         "title": "JS For",
         "description": "The JavaScript for loop is used to execute a block of code repeatedly, until a specified condition evaluates to false. It can be used for iteration if the number of iterations is fixed and known.\n\nJavaScript loops are used to execute a particular block of code repeatedly. The 'for' loop is the most compact form of looping. It includes the following three important parts −\n\nInitialization − The loop initialization expression is where we initialize our counter to a starting value. The initialization statement is executed before the loop begins.\n\nCondition − The condition expression tests whether a given condition is true or not. If the condition is true, then the code inside the loop will be executed. Otherwise, the control exits the loop.\n\nIteration − The iteration expression allows you to increase or decrease your counter.\n\nYou can put all three parts on a single line separated by semicolons.\n\nFor Loop\nSyntax\nThe syntax of the for loop in JavaScript is as follows −\n\nfor (initialization; condition; iteration) {\n   Statement(s) to be executed if the condition is true\n}\nAll three statements are optional.\n\nExamples\nTry the following examples to learn how a for loop works in JavaScript.\n\nExample: Executing a code block repeatedly\nIn the example below, we use the for loop to print the updated value of the 'count' variable. In each iteration of the loop, we increment the value of 'count' by 1 and print it in the output.\n\n<html>\n<head>\n    <title> JavaScript - for loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        output.innerHTML = \"Starting Loop <br>\";\n        let count;\n        for (let count = 0; count < 10; count++) {\n            output.innerHTML += \"Current Count : \" + count + \"<br/>\";\n        }\n        output.innerHTML += \"Loop stopped!\";\n    </script>\n</body>\n</html>\n\nOutput\nStarting Loop\nCurrent Count : 0\nCurrent Count : 1\nCurrent Count : 2\nCurrent Count : 3\nCurrent Count : 4\nCurrent Count : 5\nCurrent Count : 6\nCurrent Count : 7\nCurrent Count : 8\nCurrent Count : 9\nLoop stopped!\n\nExample: Initialization is optional\nThe following code demonstrates that the initialization statement is optional in the for loop. You can initialize the variable outside the loop and use it within the loop.\n\n<html>\n<head>\n    <title> Initialization is optional in for loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        var p = 0;\n        for (; p < 5; p++) {\n            output.innerHTML += \"P -> \" + p + \"<br/>\";\n        }\n        output.innerHTML += \"Outside the loop! <br>\";\n        output.innerHTML += \"P -> \" + p + \"<br/>\";\n    </script>\n</body>\n</html>\n\nOutput\nP -> 0\nP -> 1\nP -> 2\nP -> 3\nP -> 4\nOutside the loop! <br>\nP -> 5\n\nExample: Conditional statement is optional\nThe code below demonstrates that the conditional statement in the for loop is optional. However, if you omit the condition, it will result in infinite iterations. To prevent this, you can use the 'break' keyword within the loop to exit the loop, as shown in the example.\n\n<html>\n<head>\n    <title> Conditional statement is optional in for loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        let arr = [10, 3, 76, 23, 890, 123, 54];\n        var p = 0;\n        for (;;) {\n            if (p >= arr.length) {\n                break;\n            }\n            output.innerHTML += \"arr[\" + p + \"] -> \" + arr[p] + \"<br/>\";\n            p++;\n        }\n    </script>\n</body>\n</html>\n\nOutput\narr[0] -> 10\narr[1] -> 3\narr[2] -> 76\narr[3] -> 23\narr[4] -> 890\narr[5] -> 123\narr[6] -> 54\n\nExample: Iteration statement is optional\nIn the for loop, the iteration statement (third part) is also optional. You can update the iteration variable inside the loop body instead.\n\n<html>\n<head>\n    <title> Iteration statement is optional </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        let str = \"Tutorialspoint\";\n        var p = 0;\n        for (;;) {\n            if (p >= str.length) {\n                break;\n            }\n            output.innerHTML += \"str[\" + p + \"]  -> \" + str[p] + \"<br/>\";\n            p++;\n        }\n    </script>\n</body>\n</html>\n\nOutput\nstr[0] -> T\nstr[1] -> u\nstr[2] -> t\nstr[3] -> o\nstr[4] -> r\nstr[5] -> i\nstr[6] -> a\nstr[7] -> l\nstr[8] -> s\nstr[9] -> p\nstr[10] -> o\nstr[11] -> i\nstr[12] -> n\nstr[13] -> t",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 32,
       "fields": {
         "title": "JS For…In",
         "description": "The for...in Loop\n\nThe for...in loop in JavaScript is used to loop through an object's properties. The JavaScript for...in loop is a variant of the for loop specifically designed for iterating over object properties.\n\nAs we have not discussed Objects yet, you may not feel comfortable with this loop. But once you understand how objects behave in JavaScript, you will find this loop very useful.\n\nThe for...in loop in JavaScript can also be used to iterate through the elements of an array. However, it is not recommended to do this as it is less efficient than using a for...of loop.\n\nSyntax\nThe syntax of for...in loop in JavaScript is as follows −\n\n```javascript\nfor (variableName in object) {\n   statement or block to execute\n}\n```\n\nParameters\n- `variableName`: It is a property name (key) of the object.\n- `in`: It is an 'in' operator in JavaScript.\n- `object`: It is the object to traverse.\n\nIn each iteration, one property from the object is assigned to `variableName`, and this loop continues until all the properties of the object are exhausted.\n\nExamples\nTry the following examples to implement the 'for-in' loop.\n\nExample: Iterate through object properties\nIn the example below, the `car` object contains various properties. We use the for…in loop to traverse through each key of the object.\n\nIn the output, it prints the key and its value. We use the '[]' (member of) operator to access the value of the key from the object.\n\n```html\n<html>\n<head>\n   <title> JavaScript - for...in loop </title>\n</head>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      let car = {\n         brand: \"OD\",\n         model: \"Q7\",\n         color: \"Black\",\n      }\n      for (let key in car) {\n         output.innerHTML += key + \" -> \" + car[key] + \"<br>\";\n      }\n   </script>\n</body>\n</html>\n```\n\nOutput\n```\nbrand -> OD\nmodel -> Q7\ncolor -> Black\n```\n\nExample: Iterating over a string\nIn JavaScript, a string is an object. So, we can use the for…in loop to traverse through each character of the string. The index of the character is the key, and the character itself is the value.\n\nThe code prints the index and character in the output.\n\n```html\n<html>\n<head>\n   <title> JavaScript - for...in loop </title>\n</head>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      let str = \"Hello\";\n      for (let key in str) {\n         output.innerHTML += key + \" -> \" + str[key] + \"<br>\";\n      }\n   </script>\n</body>\n</html>\n```\n\nOutput\n```\n0 -> H\n1 -> e\n2 -> l\n3 -> l\n4 -> o\n```\n\nExample: Iterating over an array\nIn JavaScript, an array is also an object. Therefore, the for…in loop can be used to traverse through array elements. Like a string, the index is a key, and the array element is the value.\n\nThe following code prints the array index and its value in the output.\n\n```html\n<html>\n<head>\n   <title> JavaScript - for...in loop </title>\n</head>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      let array = [\"Hi\", \"Hello\", 900, 23, true, \"JavaScript\"];\n      for (let key in array) {\n         output.innerHTML += key + \" -> \" + array[key] + \"<br>\";\n      }\n   </script>\n</body>\n</html>\n```\n\nOutput\n```\n0 -> Hi\n1 -> Hello\n2 -> 900\n3 -> 23\n4 -> true\n5 -> JavaScript\n```\n\nExample: Update value of each property of an object\nIn the example below, we traverse each key of the object and update its value to null. In the output, the code prints the object keys with null values.\n\nSo, the for…in loop can also be used to update all or particular property values of the object.\n\n```html\n<html>\n<head>\n   <title> JavaScript - for...in loop </title>\n</head>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      let car = {\n         brand: \"OD\",\n         model: \"Q7\",\n         color: \"Black\",\n      }\n      for (let key in car) {\n         car[key] = null;\n      }\n      output.innerHTML += \"The updated object is - \" + JSON.stringify(car);\n   </script>\n</body>\n</html>\n```\n\nOutput\n```\nThe updated object is - {\"brand\":null,\"model\":null,\"color\":null}\n```\n\nExample: Iterating the Browser's Navigator Object\nTry the following example to implement 'for-in' loop. It prints the web browser’s Navigator object.\n\n```html\n<html>\n<body>\n   <div id=\"demo\"> </div>\n   <script>\n      const output = document.getElementById(\"demo\");\n      var aProperty;\n      output.innerHTML = \"Navigator Object Properties<br> \";\n      for (aProperty in navigator) {\n         output.innerHTML += aProperty;\n         output.innerHTML += \"<br>\";\n      }\n      output.innerHTML += \"Exiting from the loop!\";\n   </script>\n</body>\n</html>\n```\n\nOutput\n```\nNavigator Object Properties\nvendorSub\nproductSub\nvendor\nmaxTouchPoints\nuserActivation\n... (list continues)\nExiting from the loop!\n```\n",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 33,
       "fields": {
         "title": "JS For…Of",
         "description": "JavaScript for...of Loop\n\nThe for...of loop in JavaScript is used to traverse elements of an iterable object. In each iteration, it gives an element of the iterable object. Iterable objects include arrays, strings, maps, sets, and generators.\n\nThe JavaScript for...of loop is a much more efficient way to iterate over iterables than using a for...in loop. The for...of loop iterates over the property value while the for...in loop is used to iterate through the keys (property name) of an object.\n\nSyntax\nThe syntax of 'for...of' loop in JavaScript is as follows −\n\n```javascript\nfor (ele of iterable) {\n    // loop body\n}\n```\n\nParameters\n- `ele`: It is the current element of the iterable.\n- `of`: It is a JavaScript operator.\n- `iterable`: It is iterable like an object, array, string, etc.\n\nExamples\nExample: For...of Loop with Arrays\nIn the example below, the array contains various strings. After that, we used the for...of loop to traverse each array element. In the output, we can see that it prints each array element.\n\n```html\n<html>\n<head>\n    <title> JavaScript - for...of loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        const arr = [\"JavaScript\", \"Python\", \"C\", \"C++\", \"HTML\", \"CSS\"];\n        for (let ele of arr) {\n            output.innerHTML += ele + \"<br>\";\n        }\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nJavaScript\nPython\nC\nC++\nHTML\nCSS\n```\n\nExample: For...of Loop with Strings\nIn JavaScript, a string is also iterable as we can traverse through each character of the string. In the below code, for...of loop is used to traverse through each character of the string.\n\n```html\n<html>\n<head>\n    <title> JavaScript - for...of loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        let str = \"JavaScript\";\n        for (let char of str) {\n            output.innerHTML += char + \", \";\n        }\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nJ, a, v, a, S, c, r, i, p, t,\n```\n\nExample: For...of Loop with Set\nIn JavaScript, a set contains unique elements. Here, we have passed an array containing numbers as a parameter of the Set() constructor to create a set. After that, we used the for...of loop to traverse the set.\n\n```html\n<html>\n<head>\n    <title> JavaScript - for...of loop </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        const nums = new Set([10, 20, 30, 30, 30, 40, 50, 60]);\n        for (let num of nums) {\n            output.innerHTML += num + \", \";\n        }\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\n10, 20, 30, 40, 50, 60,\n```\n\nExample: For...of Loop with Map\nThe map contains key-value pairs in JavaScript and is similar to an object. Here, we created a map and inserted 3 key-value pairs in the map. When we use the for...of loop to traverse the map elements in each iteration, we can get the key and value shown in the code below.\n\n```html\n<html>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        const map = new Map();\n        map.set(\"one\", 1);\n        map.set(\"second\", 2);\n        map.set(\"third\", 3)\n        for (let [k, v] of map) {\n            output.innerHTML += k + \" -> \" + v + \"<br/>\";\n        }\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\none -> 1\nsecond -> 2\nthird -> 3\n```\n\nHowever, you can also use the for...in loop to traverse iterables like arrays, strings, maps, sets, etc.",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 34,
       "fields": {
         "title": "JS Loop Control",
         "description": "JavaScript Loop Control\n\nJavaScript provides full control to handle loops and switch statements. There may be a situation when you need to come out of a loop without reaching its bottom. There may also be a situation when you want to skip a part of your code block and start the next iteration of the loop.\n\nTo handle all such situations, JavaScript provides break and continue statements. These statements are used to immediately come out of any loop or to start the next iteration of any loop respectively. Also, JavaScript allows developers to use labels to name the loop.\n\nWe have explained the keywords in the below table, which can be used to control the loop.\n\nKeyword Explanation\nbreak The 'break' keyword is used to come out of the loop.\ncontinue The 'continue' keyword is used to skip the current iteration of the loop.\nlabel The 'label' is not a keyword, but you can use any identifier followed by a colon (:) to give a label to the loop. After that, you can use the label to target the particular loop with the break and continue keyword.\n\nIn the upcoming chapters, we will learn in detail about the break, continue and label statements.\n\nThe break Statement\nThe JavaScript break statement, which was briefly introduced with the switch statement, is used to exit a loop early, breaking out of the enclosing curly braces.\n\nFlow Chart\nThe flow chart of a break statement would look as follows −\n\nBreak Statement\n\nExample\nThe following example illustrates the use of a break statement with a while loop. Notice how the loop breaks out early once x reaches 5 and reaches −\n\n```html\n<html>\n<body>\n    <div id=\"output\"> </div>\n    <script>\n        const output = document.getElementById(\"output\");\n        let x = 1;\n        output.innerHTML = \"Entering the loop<br> \";\n        while (x < 20) {\n            if (x == 5) {\n                break;   // breaks out of loop completely\n            }\n            x = x + 1;\n            output.innerHTML +=  x + \"<br>\";\n        }\n        output.innerHTML += \"Exiting the loop!<br> \";\n    </script>\n    <p>Set the variable to different value and then try...</p>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop\n2\n3\n4\n5\nExiting the loop!\nSet the variable to different value and then try...\n```\n\nThe continue Statement\nThe JavaScript continue statement tells the interpreter to immediately start the next iteration of the loop and skip the remaining code block. When a continue statement is encountered, the program flow moves to the loop check expression immediately and if the condition remains true, then it starts the next iteration, otherwise the control comes out of the loop.\n\nExample\nThis example illustrates the use of a continue statement with a while loop. Notice how the continue statement is used to skip printing when the index held in variable x reaches 5 −\n\n```html\n<html>\n<body>\n    <div id=\"output\"> </div>\n    <script>\n        const output = document.getElementById(\"output\");\n        let x = 1;\n        output.innerHTML = \"Entering the loop<br> \";\n        while (x < 10) {\n            x = x + 1;\n            if (x == 5) {\n                continue; // skip rest of the loop body\n            }\n            output.innerHTML +=  x + \"<br>\";\n        }\n        output.innerHTML += \"Exiting the loop!<br> \";\n    </script>\n    <p>Set the variable to different value and then try...</p>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop\n2\n3\n4\n6\n7\n8\n9\n10\nExiting the loop!\nSet the variable to different value and then try...\n```\n\nUsing Labels to Control the Flow\nStarting from JavaScript 1.2, a label can be used with break and continue to control the flow more precisely. A label is simply an identifier followed by a colon (:) that is applied to a statement or a block of code. We will see two different examples to understand how to use labels with break and continue.\n\nLine breaks are not allowed between the 'continue' or 'break' statement and its label name. Also, there should not be any other statement in between a label name and associated loop.\n\nTry the following two examples for a better understanding of Labels.\n\nExample 1\nThe following example shows how to implement Label with a break statement.\n\nIn the example below, we have given the 'outerloop' and 'innerloop' labels to the loop.\n\nWe used the 'break' statement in the nested loop with the label. In the output, you can see that it breaks the outer loop from the inner loop.\n\n```html\n<html>\n<body>\n    <div id=\"output\"> </div>\n    <script>\n        const output = document.getElementById(\"output\");\n        output.innerHTML = \"Entering the loop!<br /> \";\n        outerloop:        // This is the label name         \n        for (let i = 0; i < 5; i++) {\n            output.innerHTML += \"Outerloop: \" + i + \"<br />\";\n            innerloop:\n            for (let j = 0; j < 5; j++) {\n                if (j > 3 ) break ;           // Quit the innermost loop\n                if (i == 2) break innerloop;  // Do the same thing\n                if (i == 4) break outerloop;  // Quit the outer loop\n                output.innerHTML += \"Innerloop: \" + j + \" <br />\";\n            }\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";      \n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop!\nOuterloop: 0\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nOuterloop: 1\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nOuterloop: 2\nOuterloop: 3\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nInnerloop: 3\nOuterloop: 4\nExiting the loop!\n\nExample 2\nIn the below code, we use the continue statement with a label inside the nested loop to skip the current iteration of the outer loop. Whenever the value of q becomes 3, it skips the execution of the remaining code of the current iteration and starts a new iteration.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Label statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        output.innerHTML += \"Entering the loop!<br /> \";\n        outerloop:     // This is the label name\n        for (let p = 0; p < 3; p++) {\n            output.innerHTML += \"Outerloop: \" + p + \"<br />\";\n            for (let q = 0; q < 5; q++) {\n                if (q == 3) {\n                    continue outerloop;\n                }\n                output.innerHTML += \"Innerloop: \" + q + \"<br />\";\n            }\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop!\nOuterloop: 0\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nOuterloop: 1\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nOuterloop: 2\nInnerloop: 0\nInnerloop: 1\nInnerloop: 2\nExiting the loop!\n",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 35,
       "fields": {
         "title": "JS Break Statements",
         "description": "The break statement in JavaScript terminates the loop or switch case statement. When you use the break statement with the loop, the control flow jumps out of the loop and continues to execute the other code.\n\nThe break statement can also be used to jump a labeled statement when used within that labeled statement. It is a useful tool for controlling the flow of execution in your JavaScript code.\n\nSyntax\nThe syntax of break statement in JavaScript is as follows −\n\n```javascript\nbreak;\n// OR\nbreak [label];\n```\nThe label is optional with a break statement.\n\nNote – In the next chapter, we will learn to use the break statement with the label inside the loop.\n\nFlow Chart\nThe flow chart of a break statement would look as follows −\n\n![Break Statement](flow_chart_url)\n\nExample (break statement with for loop)\nIn the example below, we used the for loop to make iterations. We added the conditional expression in the loop using the 'if' statement. When the value of 'x' is 5, it will 'break' the loop using the break statement.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Break statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        output.innerHTML += \"Entering the loop. <br /> \";\n        for (let x = 1; x < 10; x++) {\n            if (x == 5) {\n                break;   // breaks out of loop completely\n            }\n            output.innerHTML += x + \"<br />\";\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n1\n2\n3\n4\nExiting the loop!\n```\n\nExample (break statement with the while loop)\nThe code below demonstrates the while loop with the 'break' statement. In the while loop, whenever the value of x is either 3 or 7, it will terminate the loop using the 'break' statement.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Break statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        var x = 1;\n        output.innerHTML += \"Entering the loop. <br /> \";\n        while (x < 10) {\n            if (x == 3 || x == 7) {\n                break;   // breaks out of loop completely\n            }\n            x = x + 1;\n            output.innerHTML += x + \"<br />\";\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n2\n3\nExiting the loop!\n```\n\nBreak statement with nested loops\nYou can use the 'break' statement to jump out of any loop when you have nested loops. For example, if you use the 'break' statement with the parent loop, the code will also terminate all iterations of the nested loop. Using the 'break' statement with the nested loop will terminate only the nested loop.\n\nExample\nIn the example below, x is a looping variable for the parent loop, and y is a looping variable for a child loop.\n\nIn the nested loop, whenever y becomes 3, it will break the loop; in the outer loop, whenever x becomes 3, it will break the loop. You won't see x > 3 or y > 2 in the output.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Break statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        output.innerHTML += \"Entering the loop. <br /> \";\n        for (let x = 1; x < 10; x++) {\n            for (let y = 1; y < 10; y++) {\n                if (y == 3) {\n                    break; // breaks inner loop\n                }\n                output.innerHTML += x + \" \" + y + \"<br />\";\n            }\n            if (x == 3) {\n                break; // break outer loop\n            }\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n1 1\n1 2\n2 1\n2 2\n3 1\n3 2\nExiting the loop!\n```\n\nBreak statement with switch case statement\nThe switch case statement executes one of the code blocks from multiple based on the conditional expression. The 'break' statement terminates the switch case statement after matching one or more cases with the conditional expression's value.\n\nExample\nIn the below code, we used the 'break' statement with each case. Here, the value of variable p works as a conditional expression for the switch case statement. It matches with 'case 10'. So, the code will execute that particular code block and terminate the switch case statement using the 'break' statement.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Break statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        const output = document.getElementById(\"output\");\n        var p = 10;\n        switch (p) {\n            case 10:\n                output.innerHTML = \"p is 10\";\n                break;\n            case 20:\n                output.innerHTML = \"p is 20\";\n                break;\n            case 30:\n                output.innerHTML = \"p is 30\";\n                break;\n            default:\n                output.innerHTML = \"p is not 10, 20 or 30\";\n        }\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\np is 10\n```\n",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 36,
       "fields": {
         "title": "JS Continue Statements",
         "description": "The continue statement in JavaScript is used to skip the current iteration of a loop and continue with the next iteration. It is often used in conjunction with an if statement to check for a condition and skip the iteration if the condition is met.\n\nThe JavaScript continue statement tells the interpreter to immediately start the next iteration of the loop and skip the remaining code block. When a continue statement is encountered, the program flow moves to the loop check expression immediately and if the condition remains true, then it starts the next iteration, otherwise the control comes out of the loop.\n\nSyntax\nThe syntax of continue statement in JavaScript is as follows −\n\n```javascript\ncontinue;\n// OR\ncontinue label;\n```\nWe can use the continue statement inside the loops like for loop, while loop, do…while loop, etc.\n\nWe will learn to use the ‘continue’ statement with the ‘label’ statement in the upcoming chapter.\n\nContinue statement with for loop\nThe example below uses the continue statement with the for loop. In the loop, when the value of the x is 3, it will execute the continue statement to skip the current iteration and move to the next iteration.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Continue statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        output.innerHTML += \"Entering the loop. <br /> \";\n        for (let x = 1; x < 5; x++) {\n            if (x == 3) {\n                continue;   // skip rest of the loop body\n            }\n            output.innerHTML += x + \"<br />\";\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n1\n2\n4\nExiting the loop!\n```\n\nContinue statement with while loop\nWe used the while loop with the continue statement in the example below. In each iteration of the while loop, we increment the x's value by 1. If the value of the x is equal to 2 or 3, it skips the current iteration and moves to the next iteration.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Continue statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        var x = 1;\n        output.innerHTML += \"Entering the loop. <br /> \";\n        while (x < 5) {\n            x = x + 1;\n            if (x == 2 || x == 3) {\n                continue;   // skip rest of the loop body\n            }\n            output.innerHTML += x + \"<br />\";\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n4\n5\nExiting the loop!\n```\n\nContinue statement with nested loop\nYou can use the continue statement with nested loops and skip the iteration of the parent loop or child loop.\n\nExample\nThe parent loop traverses the 1 to 5 elements in the code below. In the parent loop, we used the continue statement to skip the iteration when the value of x is 2 or 3. Also, we have defined the nested loop. In the nested loop, we skip the loop iteration when the value of y is 3.\n\n```html\n<html>\n<head>\n    <title> JavaScript - Continue statement </title>\n</head>\n<body>\n    <p id=\"output\"> </p>\n    <script>\n        let output = document.getElementById(\"output\");\n        output.innerHTML += \"Entering the loop. <br /> \";\n        for (let x = 1; x < 5; x++) {\n            if (x == 2 || x == 3) {\n                continue;   // skip rest of the loop body\n            }\n            for (let y = 1; y < 5; y++) {\n                if (y == 3) {\n                    continue;\n                }\n                output.innerHTML += x + \" - \" + y + \"<br />\";\n            }\n        }\n        output.innerHTML += \"Exiting the loop!<br /> \";\n    </script>\n</body>\n</html>\n```\n\nOutput\n```\nEntering the loop.\n1 - 1\n1 - 2\n1 - 4\n4 - 1\n4 - 2\n4 - 4\nExiting the loop!\n```\n",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 37,
       "fields": {
         "title": "JS Switch Case",
         "description": "The JavaScript switch case is a conditional statement used to execute different blocks of code depending on the value of an expression. The expression is evaluated, and if it matches the value of one of the case labels, the code block associated with that case is executed. If none of the case labels match the value of the expression, the code block associated with the default label is executed.\n\nYou can use multiple if...else…if statements, as in the previous chapter, to perform a multiway branch. However, this is not always the best solution, especially when all of the branches depend on the value of a single variable.\n\nStarting with JavaScript 1.2, you can use a switch statement which handles exactly this situation, and it does so more efficiently than repeated if...else if statements.\n\nFlow Chart\nThe following flow chart explains how a switch-case statement works.\n\nSwitch case\nAdvertisement\n\nSyntax\nThe objective of a switch statement is to provide an expression to evaluate and several different statements to execute based on the value of the expression. The interpreter checks each case against the value of the expression until a match is found. If nothing matches, a default condition will be used.\n\nswitch (expression) {\n   case condition 1:\n      statement(s)\n      break;\n   \n   case condition 2:\n      statement(s)\n      break;\n   \n   ...\n   \n   case condition n:\n      statement(s)\n      break;\n   \n   default:\n      statement(s)\n}\n\nbreak − The `break` statement indicates the end of a particular case. If the 'break' statement were omitted, the interpreter would continue executing each statement in each of the following cases.\n\ndefault − The `default` keyword is used to define the default expression. When no case matches the expression of the switch-case statement, it executes the default code block.\n\nExamples\nLet's understand the switch case statement in detail with the help of some examples.\n\nExample\nIn the example below, we have a `grade` variable used as an expression of the switch case statement. The switch case statement executes different code blocks according to the value of the `grade` variable.\n\nFor the grade 'A', it prints 'Good job' in the output and terminates the switch case statement due to the `break` statement.\n\n<html>\n<head>\n   <title> JavaScript - Switch case statement </title>\n</head>\n<body>\n   <p id='output'></p>\n   <script>\n      const output = document.getElementById('output');\n      let grade = 'A';\n      output.innerHTML += 'Entering switch block <br />';\n      switch (grade) {\n         case 'A':\n            output.innerHTML += 'Good job <br />';\n            break;\n         case 'B':\n            output.innerHTML += 'Passed <br />';\n            break;\n         case 'C':\n            output.innerHTML += 'Failed <br />';\n            break;\n         default:\n            output.innerHTML += 'Unknown grade <br />';\n      }\n      output.innerHTML += 'Exiting switch block';\n   </script>\n</body>\n</html>\n\nOutput\nEntering switch block\nGood job\nExiting switch block\n\nBreak statements play a major role in switch-case statements. Try the following example that uses switch-case statement without any break statement.\n\nExample: Without break Statement\nWhen we don't use the 'break' statement with any case of the switch case statement, it continues executing the next case without terminating it.\n\nIn the below code, we haven't used the break statement with the cases 'A' and 'B'. So, for the grade 'A', it will execute the statements of cases A, B, and C, and then it will terminate the execution of the switch case statement.\n\n<html>\n<head>\n   <title> JavaScript - Switch case statement </title>\n</head>\n<body>\n   <p id='output'></p>\n   <script>\n      const output = document.getElementById('output');\n      let grade = 'A';\n      output.innerHTML += 'Entering switch block <br />';\n      switch (grade) {\n         case 'A':\n            output.innerHTML += 'Good job <br />';\n         case 'B':\n            output.innerHTML += 'Passed <br />';\n         case 'C':\n            output.innerHTML += 'Failed <br />';\n         default:\n            output.innerHTML += 'Unknown grade <br />';\n      }\n      output.innerHTML += 'Exiting switch block';\n   </script>\n</body>\n</html>\n\nOutput\nEntering switch block\nGood job\nPassed\nFailed\nUnknown grade\nExiting switch block\n\nExample: Common Code Blocks\nSometimes, developers require executing the common code block for multiple values of the expression. It is very similar to the OR condition in the if-else statement.\n\nIn the below code, we execute the same code block for cases 'A' and 'B', and 'C' and 'D'. You may try changing the value of the `grade` variable and observe the output.\n\n<html>\n<head>\n   <title> JavaScript - Switch case statement </title>\n</head>\n<body>\n   <p id='output'></p>\n   <script>\n      let output = document.getElementById('output');\n      var grade = 'C';\n      output.innerHTML += 'Entering switch block <br />';\n      switch (grade) {\n         case 'A':\n         case 'B':\n            output.innerHTML += 'Passed <br />';\n            break;\n         case 'C':\n         case 'D':\n            output.innerHTML += 'Failed! <br />';\n            break;\n         default:\n            output.innerHTML += 'Unknown grade <br />';\n      }\n      output.innerHTML += 'Exiting switch block';\n   </script>\n</body>\n</html>\n\nOutput\nEntering switch block\nFailed!\nExiting switch block\n\nExample: Strict Comparison\nThe switch case statement compares the expression value with the case value using the strict equality operator.\n\nThe `num` variable contains the integer value in the code below. In the switch case statement, all cases are in string format. Therefore, the code executes the default statement.\n\n<html>\n<head>\n   <title> JavaScript - Switch case statement </title>\n</head>\n<body>\n   <p id='output'></p>\n   <script>\n      const output = document.getElementById('output');\n      let num = 10;\n      switch (num) {\n         case '10':\n            output.innerHTML += '10 Marks!';\n            break;\n         case '11':\n            output.innerHTML += '11 Marks!';\n            break;\n         default:\n            output.innerHTML += 'Input is not a string!';\n      }\n   </script>\n</body>\n</html>\n\nOutput\nInput is not a string!\n",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 38,
       "fields": {
         "title": "JS User Defines Iterators",
         "description": "In JavaScript, an iterable is an object which has Symbol.iterator() method in the object prototype. Some examples of iterable are array, set, map, string, etc. The Symbol.iterator() method returns an object containing the next() method is called iterator. Here, the next() method returns the elements of iterable in each call.\n\nThe next() Method\nThe next() method of the iterator object returns an object containing two key-value pairs given below.\n\nvalue − The value key contains the element as a value.\n\ndone − The done key contains the boolean value. It contains true if all iterations of iterable are finished. Otherwise, it contains false.\n\nExample\nIn the example below, we have created the array and stored the array iterator in the 'iter' variable. After that, we use the next() method of the iterator object to get the next value.\n\nThe output shows that the next() method returns the object containing 'value' and 'done' properties. The last iteration returns the object containing the 'done' property only.\n\n<html>\n<head>\n   <title> JavaScript - Iterators </title>\n</head>\n<body>\n   <p id = 'output'> </p>\n   <script>\n      const output = document.getElementById('output');\n      const nums = [10, 72, 45];\n      const iter = nums[Symbol.iterator]();\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n   </script>\n</body>\n</html>\n\nOutput\n{\"value\":10,\"done\":false}\n{\"value\":72,\"done\":false}\n{\"value\":45,\"done\":false}\n{\"done\":true}\nAdvertisement\n\nUser-defined Iterators\nIn the above part, we have looked at how an iterator works in JavaScript. The Symbol.iterator() method returns the object containing the next() method, and whenever we execute the next() method, it returns an object.\n\nSo, in the same way, we can implement the user-defined iterators.\n\nExample\nIn the example below, we have created the custom iterator using the function. The function returns the object containing the next() method. The next() method returns the object containing the array element and the false boolean value from the nth index if n is less than the array length. If the n is greater than or equal to the array's length, it returns the object containing only the 'done' property with a 'true' boolean value.\n\nAfter that, we use the iter.next() syntax to get the next array element.\n\n<html>\n<head>\n   <title> JavaScript - User defined iterators </title>\n</head>\n<body>\n   <p id = 'output'> </p>\n   <script>\n      const output = document.getElementById('output');\n      function customIterator(chars) {\n         let n = 0;\n         return {\n            next() {\n               if (n < chars.length) {\n                  return {\n                     value: chars[n++],\n                     done: false\n                  };\n               }\n               return {\n                  done: true\n               };\n            }\n         };\n      }\n      const chars = ['A', 'C', 'E'];\n      const iter = customIterator(chars);\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n      output.innerHTML += JSON.stringify(iter.next()) + '<br>';\n   </script>\n</body>\n</html>\n\nOutput\n{\"value\":\"A\",\"done\":false}\n{\"value\":\"C\",\"done\":false}\n{\"value\":\"E\",\"done\":false}\n{\"done\":true}\n{\"done\":true}\nThe above code uses the function to define the iterator. So, you can't use the for…of loop with the iterator. Let's learn to define the iterator using the object in the example below.\n\nExample\nIn the example below, we add a function as a value of the 'Symbol.iterator' key. The function returns the next() method. The next() method returns the odd numbers. If the value of the odd number is 9, it finishes the iteration by returning the {done: true} object.\n\nHere, we created the iterator using the object. So, you can use the for…of loop. The loop will automatically execute the next() method of the iterator and returns a value of the 'value' property of the object returned by the next() method.\n\n<html>\n<head>\n   <title> JavaScript - User defined iterators </title>\n</head>\n<body>\n   <p id = 'output'> </p>\n   <script>\n      const output = document.getElementById('output');\n      oddNum = {};\n      oddNum[Symbol.iterator] = function () {\n         let p = -1;\n         done = false;\n         return {\n            next() {\n               p += 2;\n               if (p == 9) return { done: true };\n               return { value: p, done: done };\n            }\n         };\n      };\n      for (const odd of oddNum) {\n         output.innerHTML += odd + '<br>';\n      }\n   </script>\n</body>\n</html>\n\nOutput\n1\n3\n5\n7\nYou should create user-defined iterators when they need customization in the traversal of iterable. For example, to traverse alternative array elements, to get even or odd numbers from an iterator, etc.",
         "module_id": 3,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 39,
       "fields": {
         "title": "JS Functions",
         "description": "A function in JavaScript is a group of reusable code that can be called anywhere in your program. It eliminates the need of writing the same code again and again. It helps programmers in writing modular codes. Functions allow a programmer to divide a big program into a number of small and manageable functions.\n\nLike any other advanced programming language, JavaScript also supports all the features necessary to write modular code using functions. You must have seen functions like alert() and write() in the earlier chapters. We were using these functions again and again, but they had been written in core JavaScript only once.\n\nJavaScript allows us to write our own functions as well. This section explains how to write your own functions in JavaScript.\n\nFunction Definition\nBefore we use a function, we need to define it. The most common way to define a function in JavaScript is by using the function keyword, followed by a unique function name, a list of parameters (that might be empty), and a statement block surrounded by curly braces.\n\nAll statements you need to execute on the function call must be written inside the curly braces.\n\nSyntax\nThe basic syntax to define the function in JavaScript is as follows −\n\nfunction functionName(parameter-list) {\n    statements\n}\nThis type of function definition is called function declaration or function statement. We can also define a function using function expression. We will discuss function expression in details in the next chapter.\n\nThe following example defines a function called sayHello that takes no parameter −\n\nfunction sayHello() {\n    alert(\"Hello there\");\n}\nFunction Expression\nThe Function expression in JavaScript allows you to define a function as an expression. The function expression is similar to the anonymous function declaration. The function expression can be assigned to a variable.\n\nThe syntax of function expression in JavaScript is as follows–\n\nconst varName = function (parameter-list) {\n    statements\n};\nIn the example below, we have defined a JavaScript function using function expression and assigned it to a variable name myFunc.\n\nconst myFunc = function (x, y){ \n   return x + y;\n};\n\nCalling a Function\nTo invoke a function somewhere later in the script, you would simply need to write the name of that function with the parentheses () as shown in the following code.\n\nExample\nThe below code shows the button in the output. When you click the button, it will execute the sayHello() function. The sayHello() function prints the \"Hello there!\" message in the output.\n\nOpen Compiler\n<html>\n<head>\n   <script type=\"text/javascript\">\n      function sayHello() {\n         alert(\"Hello there!\");\n      }\n   </script>\n</head>\n<body>\n   <p>Click the following button to call the function</p>\n   <form>\n      <input type=\"button\" onclick=\"sayHello()\" value=\"Say Hello\">\n   </form>\n   <p> Use different text in the write method and then try... </p>\n</body>\n</html>\nFunction Parameters\nTill now, we have seen functions without parameters. But there is a facility to pass different parameters while calling a function. These passed parameters can be captured inside the function and any manipulation can be done over those parameters. A function can take multiple parameters separated by comma.\n\nExample\nTry the following example. We have modified our sayHello function here. Now it takes two parameters.\n\n<html>\n   <head>   \n      <script type = \"text/javascript\">\n         function sayHello(name, age) {\n            document.write (name + \" is \" + age + \" years old.\");\n         }\n      </script>      \n   </head>   \n   <body>\n      <p>Click the following button to call the function</p>      \n      <form>\n         <input type = \"button\" onclick = \"sayHello('Zara', 7)\" value = \"Say Hello\">\n      </form>      \n      <p>Use different parameters inside the function and then try...</p>\n   </body>\n</html>\nAdvertisement\n\nThe return Statement\nA JavaScript function can have an optional return statement. This is required if you want to return a value from a function. This statement should be the last statement in a function.\n\nFor example, you can pass two numbers in a function, and then you can expect the function to return their multiplication in your calling program.\n\nExample\nThe code below defines a function that concatenates two parameters before returning the resultant in the calling program. Also, you may take a look that how it returns the value using the return statement.\n\n<html>\n<head>\n  <script type=\"text/javascript\">\n      function concatenate(first, last) {\n         var full;\n         full = first + last;\n         return full;\n      }\n      function secondFunction() {\n         var result;\n         result = concatenate('Zara ', 'Ali');\n         alert(result);\n      }\n   </script>\n</head>\n<body>\n   <p>Click the following button to call the function</p>\n   <form>\n      <input type=\"button\" onclick=\"secondFunction()\" value=\"Call Function\">\n   </form>\n   <p>Use different parameters inside the function and then try...</p>\n</body>\n</html>\nFunctions as Variable Values\nIn JavaScript, functions can be used same as other variables. That’s why JavaScript is said to have a first-class functions. The functions can be passed as arguments to the other functions.\n\nExample\nIn the example below, we have declared a function using function expression and use the function to concatenate with other string.\n\n<html>\n<body>\n   <div id = \"output\"> </div>\n   <script>\n      const myFunc = function (){ return \"Hello \";};\n      document.getElementById(\"output\").innerHTML = myFunc() + \"Users.\";\n   </script>      \n</body>\n</html>\nWe have covered two important concepts in separate chapters.\n\nJavaScript Nested Functions\n\nJavaScript Function Literals",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 40,
       "fields": {
         "title": "JS Function Expressions",
         "description": "The function expression allows us to define a JavaScript function in an expression. JavaScript functions are defined using a function declaration or a function expression. The main difference between them is the function name. The function name can be omitted in function expressions. This helps to create anonymous functions in JavaScript. We can store the function expression in the variable and use that variable to invoke the function expression.\n\nSyntax\nThe syntax of function expression in JavaScript is as follows –\n\nfunction (parameter-list) {\n    statements\n};\nWe can use a variable to store a JavaScript function expression –\n\nconst varName = function (parameter-list) {\n    statements\n};\nHere the function expression is stored in the variable, varName. Once the function is assigned to a variable, the variable is used to invoke the function. Let’s look at the example below –\n\nconst sum = function (x, y) {\n     return x + y;\n};\nlet z = sum(2, 3);\nIn the above code the function expression is assigned to the variable sum. The variable sum is used as function to invoke the function.\n\nPlease note there is no name after the function keyword. The function expression allows to define anonymous function.\n\nNamed Function Expression\nWe can define a named function as a function expression –\n\nconst sum = function addNumbers(x, y) {\n    return x + y;\n};\nlet z = sum(2, 3);\nBut we need to invoke the function using the variable only. We can’t use the function name to invoke the function.\n\nImmediately Invoked Function Expression\nA function expression can be used as the IIFE (immediately invoked function expression) which is invoked as soon as defined.\n\n(function greet() {\n    alert(\"Hello World\");\n})();\nExamples\nExample: Function Expression\nIn the example below, we stored the function expression in the ‘sum’ variable. The function expression adds two numbers and prints in the output.\n\nAt last, we used the ‘sum’ variable to invoke the function expression stored in that.  \n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const sum = function () {\n         let a = 10;\n         let b = 20;\n         document.getElementById(\"output\").innerHTML = \n         \"The sum of \" + a + \" and \" + b + \" is \" + (a + b);\n      }\n      sum();\n   </script>\n</body>\n</html>\nOutput\nThe sum of 10 and 20 is 30\nExample: The return statement in function expression\nThe below code demonstrates the using the ‘return’ statement in the function expression. You can use the return statement inside the function expression as you use it in the function definition.\n\nIn the below code, the function returns the multiplication value of two numbers.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const mul = function (a, b) {\n         return a * b;\n      }\n      let result = mul(4, 5);\n      document.getElementById(\"output\").innerHTML = \n      \"The returned value from the function is \" + result;\n    </script>\n</body>\n</html>\nOutput\nThe returned value from the function is 20\nExample: Using the function expression as a value\nThe below example demonstrates using the function expression as a value. Here, we stored the function expression in the ‘num’ variable and multiplied its returned value by 3.\n\nYou may return the random number from the function expression and use the function expression as a value.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const num = function () {\n         return 2;\n      }\n      let result = num() * 3;\n      document.getElementById(\"output\").innerHTML = \n      \"The multiplication value is \" + result;\n    </script>\n</body>\n</html>\nOutput\nThe multiplication value is 6\nExample: Nested function expression\nThe example below demonstrates using the nested function expression. We defined the function expression and stored it in the ‘num’ variable. In the function expression body, we defined another function expression and stored it in the ‘decimal’ variable.\n\nWe call the decimal() function expression in the parent function expression and return its value. When we call the num() function expression, it returns the value returned by the decimal() function expression.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const num = function () {\n         const decimal = function () {\n            return 5;\n         }\n         return decimal();\n      }\n      document.getElementById(\"output\").innerHTML = \n      \"The returned value from the function is \" + num();\n   </script>\n</body>\n</html>\nOutput\nThe returned value from the function is 5",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 41,
       "fields": {
         "title": "JS Function Parameters",
         "description": "Function Parameters and Arguments\nThe function parameters in JavaScript are variables listed inside the parentheses in the function definition. A function can have multiple parameters separated by commas. The function arguments are the values that are passed to function when it is called. We define function listing the parameters and call the function passing the arguments.\n\nThe number of arguments that you pass to the function must match the number of parameters in the function definition. If not, you may get unexpected result.\n\nSyntax\nThe syntax to use function parameters in JavaScript is as follows −\n\nfunction functionName (parameter1, parameter2, parameter3) {\n  //statements\n}\nIn the above syntax, the function parameters are 'parameter1', 'parameter2', and 'parameter3'.\n\nParameter Rules\nJavaScript functions don't check the number of arguments passed while invoking the function.\n\nDon't need to specify the data type of function parameters.\n\nJavaScript compiler doesn't perform the type-checking on the passed function arguments.\n\nThe JavaScript function arguments are the variables or values passed to the function while invoking it.\n\nfunctionName (10, b, 'Hello');\nIn the above syntax, the first argument is of number data type, and the third is of string data type. The second argument is variable, which is defined earlier in the code.\n\nExample: Function Parameters and Arguments\nIn the below code, the mult() function takes 4 parameters. You can observe that the type of parameters is not defined. We multiply the parameter values in the function body and return the resultant value.\n\nWhile calling the function, we passed 4 number values as a function argument. Users can observe the output of the function for the different function arguments.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      function mult(a, b, c) {\n         let res = a * b * c;\n         return res;\n      }\n      let ans = mult(2, 3, 4);\n      document.getElementById(\"output\").innerHTML = \n      \"The multiplication of 2, 3, and 4 is \" + ans;\n   </script>\n</body>\n</html>\nOutput\nThe multiplication of 2, 3, and 4 is 24\nArgument Object\nIn JavaScript, each function can have an 'arguments' object. It contains all passed arguments while invoking the function in the array format. We can traverse through the array and get each argument even if the function's parameters are not specified.\n\nExample\nIn the example below, the function definition doesn't contain any parameters, but we have passed the 4 arguments while calling the function. So, we traverse through the arguments[] array using the loop inside the function body to access all arguments one by one.\n\nIn the function body, we merge all arguments and return the 'final' string.\n \n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      function merge() {\n         let final = \"\";\n         for (let p = 0; p < arguments.length; p++) {\n            final += arguments[p] + \" \";\n         }\n         return final;\n      }\n      let ans = merge(\"Hi\", \"I\", \"am\", \"John!\");\n      document.getElementById(\"output\").innerHTML = \n      \"The merged string is: \" + ans;\n   </script>\n</body>\n</html>\nOutput\nThe merged string is: Hi I am John!\nPassing Arguments by Value\nIn the function, when you pass the argument by value to a function call, it sends the argument value to the parameter of the function definition. So, when you update the function parameters, the function argument doesn't get changed.\n\nExample\nIn the below code, we have defined the 'val1' and 'val2' variables outside the function and passed them as a function argument.\n\nIn the function body, we change the parameter value. In the output, you can see that even after updating the parameter value, the actual value of the 'val1' and 'val2' is not changed.\n\n\n<html>\n<head>\n   <title> JavaScript - Arguments are passed by value </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const output = document.getElementById(\"output\");\n      function update(val1, val2) {\n         val1 = 20;\n         val2 = 30;\n      }\n\n      var val1 = \"Hello\";\n      var val2 = \"World\";\n\n      output.innerHTML += \"Before calling the function! <br>\";\n      output.innerHTML += \"val1 = \" + val1 + \", val2 = \" + val2 + \"<br>\";\n\n      update(val1, val2);\n\n      output.innerHTML += \"After calling the function! <br>\";\n      output.innerHTML += \"val1 = \" + val1 + \", val2 = \" + val2 + \"<br>\";\n   </script>\n</body>\n</html>\nOutput\nBefore calling the function!\nval1 = Hello, val2 = World\nAfter calling the function!\nval1 = Hello, val2 = World\nPassing Arguments by Reference\nWhen you pass the object as an argument, the function sends the address of the object as a parameter to the function definition. So, it is called the arguments are passed by reference.\n\nIn the function body, if you change the property of an object, it will also reflect the outside of the function.\n\nExample\nIn the below code, we pass the 'obj' object as a function argument. In the function body, we change the value of the 'domain' property of the object.\n\nIn the output, you can observe that the value of the 'domain' property is changed even outside the function after invoking the function as objects are passed by reference.\n\n<html>\n<head>\n   <title> JavaScript - Arguments are passed by reference </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const output = document.getElementById(\"output\");\n      function update(obj) {\n         obj.domain = \"www.tutorialspoint.com\";\n      }\n      var obj = {\n         domain: \"www.google.com\",\n      }\n      output.innerHTML += \"Before calling the function! <br>\";\n      output.innerHTML += \"domain = \" + obj.domain + \"<br>\";\n      update(obj);\n      output.innerHTML += \"After calling the function! <br>\";\n      output.innerHTML += \"domain = \" + obj.domain + \"<br>\";\n   </script>\n</body>\n</html>\nOutput\nBefore calling the function!\ndomain = www.google.com<br>After calling the function!\ndomain = www.tutorialspoint.com<br>",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 42,
       "fields": {
         "title": "JS Default Parameters",
         "description": "The default parameters in JavaScript are a feature that allows you to specify a default value for a function parameter. The concept of the default parameters was introduced in the ES6. We can initialize the parameters with the default values. So, if the function is called with missing argument or argument with an undefined value, it uses the default value of the parameter in the function.\n\nThe default value of a function parameter is \"undefined\" in JavaScript. When a function is called with missing arguments the parameters are set to 'undefined'. The undefined parameter values are acceptable but can generate unusual outcomes.\n\nBefore the ES6 version of JavaScript, we needed to check whether the parameter value was \"undefined\" inside the function body. If yes, they need to initialize the parameter with the proper value.\n\nLet's understand it via the example below.\n\nfunction sum(p, q) {\n    return p + q;\n}\nsum(10, 20); // 30\nsum(10); // NaN\nsum(); // NaN\nIn this example, we observe the following −\n\nsum(10, 20) returns the sum of the two arguments, i.e., 30. Here both arguments are passed.\n\nsum(10) returns NaN. Here only one argument is passed. The second parameter q is set to undefined. Mathematical operation on undefined returns NaN.\n\nsum() also returns NaN. Here both arguments are missing. So they are set to undefined.\n\nWhen we call the function with missing argument values, it returns NaN which is unusual.\n\nTo overcome this problem, we can use default parameter values to be used if function is called with missing argument values.\n\nDefault Parameters Syntax\nThe syntax to use the function default parameters in JavaScript is as follows –\n\nfunction functName(param1 = defaultValue1, param2 = DefaultValue2, ..) {\n    // Use parameters here\n}\nIn the above syntax, the default value of the param1 is set to defaultValue1, and the default value of the param2 is set to DefaultValue2.\n\nLet's look at the example below −\n\nExample (Default parameters)\nIn the below code, parameter p and q contains the 30 and 40 default values, respectively.\n\nIn the output, unlike the first example, you can see that it returns the sum of the default parameter values when any argument is missing.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      function sum(p = 30, q = 40) {\n         return p + q;\n      }\n      output.innerHTML += \"sum(10, 20)  ->  \" + sum(10, 20) + \"<br>\"; // 10 + 20 = 30\n      output.innerHTML += \"sum(10)  ->  \" + sum(10) + \"<br>\"; // 10 + 40 = 50\n      output.innerHTML += \"sum()  ->  \" + sum() + \"<br>\"; // 30 + 40 = 70\n   </script>\n</body>\n</html>\nOutput\nsum(10, 20) -> 30\nsum(10) -> 50\nsum() -> 70\nAdvertisement\n\nPassing an expression as a default parameter value\nWe can pass an expression as a default parameter value to a JavaScript function. The expression can also contain the values of the previous parameters.\n\nExample\nWe pass the expression as a default parameter value in the code below. The expression contains the value of the previous parameters.\n\nIn the output of the second function call, you can observe that the value of the r is 100, which is equal to (p = 5) * (q = 10) * 2. We haven't passed any argument in the third function call, so all parameters take the default value.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      function sum(p = 2, q = p * 2, r = p * q * 2) {\n         return p + q + r;\n      }\n      output.innerHTML += \"sum(5, 10, 15)  ->  \" + sum(5, 10, 15) + \"<br>\"; \n      // 5 + 10 + 15 = 30\n      output.innerHTML += \"sum(5, 10)  ->  \" + sum(5, 10) + \"<br>\"; \n      // 5 + 10 + (5 * 10 * 2) = 115\n      output.innerHTML += \"sum()  ->  \" + sum() + \"<br>\"; \n      // 2 + 4 + 16 = 22\n   </script>\n</body>\n</html>\nOutput\nsum(5, 10, 15) -> 30\nsum(5, 10) -> 115\nsum() -> 22\nYou can't use the uninitialized parameter in the expression. Otherwise, the code will raise a reference error.\nPassing Undefined Argument\nWhen you pass the undefined argument to the function call, the JavaScript function definition uses the default parameter values to avoid unnecessary errors.\n\n<html>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      function sum(p = 24, q = 26) {\n         return p + q;\n      }\n\n      output.innerHTML += \"sum(5, undefined)  ->  \" +sum(5, undefined)+\"<br>\"; \n      // 5 + 26 = 31 \n      output.innerHTML += \"sum(undefined)  ->  \" + sum(undefined) + \"<br>\"; \n      // 24 + 26 = 50\n    </script>\n</body>\n</html>\nOutput\nsum(5, undefined) -> 31\nsum(undefined) -> 50\n\nFunction expression as a default parameter\nThe JavaScript function expression can also be paased as a fucntion default parameter.\n\nIn the example below, the getNum() function returns 5. We used the function expression as a default value of parameter q.\n\nThe output shows that when the second argument is missing, the parameter uses the value returned from the getNum() function.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      function getNum() {\n         return 5;\n      }\n      function mul(p = 5, q = getNum()) {\n         return p * q;\n      }\n\n      output.innerHTML += \"mul(10)  -> \" + mul(10) + \"<br/>\";\n      output.innerHTML += \"mul() -> \" + mul() + \"<br/>\";\n   </script>\n</body>\n</html>\nOutput\nmul(10) -> 50\nmul() -> 25\nFunction Optional Parameters\nThe function default parameters are also called the optional parameters, as the function will give output without any error even if we don't pass the arguments for the optional parameter.\n\nYou should pass all required parameters at the start and optional parameters at the function end.\n\nfunction sum(p, q=10){\n   return p+q;\n}\nIn the above JavaScript code snippet, we put the optional parameter q at the end of the parameter list.\n\nExample\nThe JavaScript code below shows that the first parameter is required, and the second parameter is optional.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      let output = document.getElementById(\"output\");\n      function func(p, q=10) {\n         return p + q;\n      }\n      output.innerHTML += \"func(10, 20) -> \" + func(10, 20);\n   </script>\n</body>\n</html>\nOutput\nfunc(10, 20) -> 30\nIf we put the optional parameter at beginning, we may encounter error while calling the function with undefined value.\n\nfunction sum(p=10, q){\n   return p+q;\n}\nsum(,10) // Error\nsum(10) // NaN\nSo, if you pass only a single argument, it replaces the default value of the first parameter, and the second parameter remains undefined.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 43,
       "fields": {
         "title": "JS Function Constructor",
         "description": "The Function() Constructor\nThe JavaScript Function() constructor can dynamically create a function object at runtime. The functions created using Function() constructor have global scope only.\n\nThe Function() constructor can be used to define the function at runtime, but you should use the Function() constructor with caution as it can lead to vulnerabilities in the code.\n\nWe can pass multiple arguments to the Function() constructor. All arguments except the last argument are the names of the parameters in the new function to be created. The last argument is the function body.\n\nSyntax\nFollowing is the syntax to use the Function() constructor to create an object of the function in JavaScript –\n\nconst obj = new Function(arg1, arg2..., functionBody);\nThe Function() constructor can be called with or without new keyword to create a new function object. All the parameters are JavaScript strings.\n\nParameters\narg1, arg2... − These are arguments (optional) names that are used in function body. These are treated as the names of parameters in the function to be created.\n\nfunctionBody − This argument contains the JavaScript statements comprising the function definition.\n\nExample\nIn the example below, we have passed the 3 arguments to the Function() constructor. The first 2 arguments are arguments for the func() function, and the third is a body of the func() function.\n\nIn the output, the func() function returns the multiplication of 5 and 7.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const func = new Function(\"p\", \"q\", \"return p * q\");\n      document.getElementById(\"output\").innerHTML = \n      \"The value returned from the function is: \" + func(5, 7);\n   </script>\n</body>\n</html>\nOutput\nThe value returned from the function is: 35\nExample\nIn the example below, we passed the one argument to the Function() constructor. So, it considers it as the function body. All the parameters except the last one are optional.\n\nIn the output, you can observe that the func() function returns the sum of 10 and 20.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const func = new Function(\"return 10 + 20\");\n      document.getElementById(\"output\").innerHTML =\n      \"The value returned from the function is: \" + func();\n   </script>\n</body>\n</html>\nOutput\nThe value returned from the function is: 30\nAdvertisement\n\nFunction Declaration or Function Expression as Parameter\nCreating function using Function constructor is less efficient than creating function using a function declaration or function expression and calling it within the code.\n\nWe can write multiple statements in the functionBody parameter of the Function() constructor. All statements are separated by semicolons. We can create a function with function declaration or function expression and pass it as a statement in the <functionBody parameter.\n\nExample\nIn this example, we defined a function sum with function expression and passed to the Function() constructor as a part of the parameter (functionBody). Here the return statement is required.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const add = new Function(\n      \"const sum = function (a, b) {return  a+ b};  return sum\",\n      )();    \n      document.getElementById(\"output\").innerHTML = add(5,10) // 15\n   </script>\n</body>\n</html>\nExample\nIn this example, we defined a function anonymous function with function declaration and passed to the Function() constructor as a part of the parameter (functionBody). Here the return statement at the end is not required.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const sayHello = new Function(\n      \"return function (name) { return `Hello, ${name}` }\",\n      )();    \n      document.getElementById(\"output\").innerHTML = \n      sayHello(\"world\"); // Hello, world\n   </script>\n</body>\n</html>\nPlease note that in both the examples above, the new Function is self-invoked.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 44,
       "fields": {
         "title": "JS Function Hoisting",
         "description": "Function Hoisting\nThe function hoisting in JavaScript is a default behavior in which function declarations are moved to the top of their local scope before execution of the code. So, you can call the function in its scope before it is declared. It's important to notice that only declaration is hoisted not the initialization. So the variables or functions should have been initialized before they are used.\n\nSimilar to the function hoisting, variable hoisting is also a default behavior in which variable declarations are moved to the top of their local scope. We can use the function before it has been declared.\n\nLet's consider the following JavaScript code.\n\nadd(5,10); // 15\nfunction add(x, y){\n   return x + y;\n}\n\nIn the above JavaScript code, the function add is called before its declaration. This is possible because the JavaScript interpreter hoists the function declaration to the top of the scope. So, the above code is equivalent to –\n\nfunction add(x, y){\n   return x + y;\n}\nadd(5,10); // 15\n\nThe function hoisting only works with function declarations, not with function expressions. So, if the function is defined using a function expression, it is not hoisted to the top.\n\nadd(5,10); // ReferenceError: Cannot access 'add' before initialization\nconst add = function (x, y){\n   return x + y;\n}\n\nLet's write some complete JavaScript examples of function hoisting.\n\nExample: Function Hoisting\nIn the example below, we have defined the printMessage() function, printing the position from where it is called.\n\nAlso, we call the printMessage() function before and after the function definition. It prints the output without any error as the function is hoisted at the top of its scope.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      printMessage(\"Top\");        \n      function printMessage(pos) {\n         document.getElementById(\"output\").innerHTML += \n         \"The function is called from the \" + pos + \"<br/>\";\n      }        \n      printMessage(\"Bottom\");\n   </script>\n</body>\n</html>\nOutput\nThe function is called from the Top\nThe function is called from the Bottom\n\nExample\nIn the example below, we have defined the function inside the 'if' block. So, the function is hoisted at the top of the 'if' block, and you can execute the function only inside the 'if' block before its initialization.\n\nYou can't access the function outside the 'if' block.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      // test(\"Top\"); // Out of scope\n      if (1) {\n         test(\"Top\"); // In the same scope\n         function test(pos) {\n            document.getElementById(\"output\").innerHTML += \n            \"The function is called from the \" + pos + \"<br/>\";\n         }\n         test(\"Bottom\"); // In the same scope\n      }\n   </script>\n</body>\n</html>\nOutput\nThe function is called from the Top\nThe function is called from the Bottom\n\nHoisting is a very important behavior in JavaScript. However, it is always advisable to declare functions or variables at the beginning of the code, since JavaScript interprets code in the sequence of declaration, then initialization, and then usage.\n\nJavaScript Variable Hoisting\nThe hoisting behavior of JavaScript moves variable declarations to the top of the variable's scope by default. In JavaScript, variables declared with the 'var' keyword are hoisted to the top of their scope, but variables declared with the 'let' and 'const' keywords are not hoisted to the top.\n\nFor example,\n\nvar x = y;\nvar y;\nThe above code is similar to the below code, as the variable declarations are hoisted to the top.\n\nvar y;\nvar x = y;\n\nLet's understand variable hoisting with the following examples.\n\nExample: Variable Hoisting\nIn the example below, we have initialized the variable y, printed its value in the output, and declared it at the end. The code prints the value without any error, as variable y is hoisted to the top in the global scope.\n\n<html>\n<head>\n   <title> JavaScript - Variable Hoisting </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      y = 10;\n      document.getElementById(\"output\").innerHTML = \n      \"The value of the y is : \" + y;\n      var y;\n   </script>\n</body>\n</html>\nOutput\nThe value of the y is : 10\n\nExample: Variable Hoisting with Function\nIn the example below, we have defined the printNum() function. In the printNum() function, we have initialized the variable y, printed its value, and declared it afterward.\n\nThe variable y is hoisted to the top of the function, so you can access it before its declaration, but you can't access it outside the function.\n\n<html>\n<head>\n   <title> JavaScript - Variable Hoisting with function </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const output = document.getElementById(\"output\");\n      function printNum() {\n         y = 20;\n         output.innerHTML += \"The value of the variable y is : \" + y;\n         var y; // Function scope\n      }\n      printNum();\n      // Variable Y can't be accessible here\n   </script>\n</body>\n</html>\nOutput\nThe value of the variable y is : 20\n\nHowever, variable initialization is not hoisted to the top of the block.\n\nExample: Variable initialization is not hoisted\nThe example below demonstrates that the variable is hoisted to the top, but the variable initialization is not. Here, we print the variable x without initializing it. So, it prints 'undefined' in the output.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      var x;\n      document.getElementById(\"output\").innerHTML = \"x is -> \" + x;\n      x = 10;\n   </script>\n</body>\n</html>\nOutput\nx is -> undefined\n\nExample: Hoisting with let and const keywords\nThe example below demonstrates that variables declared with the 'let' and 'const' keywords are not hoisted to the top. Therefore, you must always define them before using them.\n\nWe use a 'try…catch' block to handle the error. In the output, you can observe the error given when trying to access a variable declared with the 'let' keyword.\n\n<html>\n<head>\n   <title> Hoisting with let and const </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const output = document.getElementById(\"output\");\n      try {\n         x = 10;\n         output.innerHTML += \"The value of x is -> \" + x;\n         let x;\n      } catch (error) {\n         output.innerHTML += error.message;\n      }\n   </script>\n</body>\n</html>\nOutput\nCannot access 'x' before initialization\nPrint Page\n",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 45,
       "fields": {
         "title": "JS Self-invoking Functions",
         "description": "Self-Invoking Functions\nThe self-invoking functions are JavaScript functions that execute immediately as they are defined. To define a self-invoking function, you can enclose an anonymous function within parentheses followed by another set of parentheses. These are also called self-executing anonymous functions.\n\nSyntax\nThe syntax to define self-invoking functions in JavaScript is as follows −\n\n(function () {\n   // function body\n})();\nThe function definition is enclosed inside a pair of parentheses. The second pair of parentheses at the end executes the function.\n\nAn alternative syntax is as follows −\n\n(function () {\n   // function body\n}());\nThe first syntax is clearer.\n\nExample\nIn the example below, we print the message in the output using the self-executing function.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      (function () {\n         document.getElementById(\"output\").innerHTML = \n         \"Self-invoked function is executed!\";\n      }());\n   </script>\n</body>\n</html>\nOutput\nSelf-invoked function is executed!\n\nSelf-Invoking Functions with Parameters\nYou can create a self-invoking function with parameters and pass arguments to it. It is common practice to pass references to global objects such as window, etc.\n\n(function (paras) {\n   // function body\n})(args);\nThe paras are the list of parameters in the definition of the anonymous function, and the args are arguments passed.\n\nExample\nIn the example below, we created an anonymous function with a parameter name. We have passed an argument to it.\n\n<html>\n<body>\n   <div id = \"demo\"></div>\n   <script>\n      const output = document.getElementById(\"demo\");\n      (function (name) {\n         output.innerHTML = `Welcome to ${name}`;\n      })(\"Tutorials Point !\");\n   </script>\n</body>\n</html>\nOutput\nWelcome to Tutorials Point !\n\nPrivate Scope of Self-Invoking Functions\nWhatever code is defined inside the self-executing function remains in the private scope and doesn't pollute the global scope. So, developers can make the code clearer and remove errors like naming conflicts, etc. Also, the code of the self-invoking function remains hidden and can't be accessed by other parts of the code.\n\nExample\nIn the example below, we have defined the variable 'a' outside or inside the function. The variable defined outside is a global variable, and the variable defined inside the function is a private variable, limited to the self-executing function's scope.\n\nAlso, we have printed the value of the variable from inside and outside of the function. Users can observe the variable's value in the output.\n\nIn this way, we can avoid naming conflicts.\n\n<html>\n<body>\n   <div id = \"output\"> </div>\n   <script>\n      const output = document.getElementById(\"output\");\n      let a = 10;\n         (function () {\n            output.innerHTML += \"Entering to the function <br/>\";\n            var a = 20;\n            output.innerHTML += \"The value of a is \" + a + \"<br>\";\n            output.innerHTML += \"Exiting to the function <br/>\";\n         }());\n         output.innerHTML += \"The value of the outside the function is \" + a;\n   </script>\n</body>\n</html>\nOutput\nEntering to the function\nThe value of a is 20\nExiting to the function\nThe value of the outside the function is 10\n\nExample\nIn some cases, it is required to access the variable of the self-executing function outside of the function. In this case, we can make that variable global using the 'window' object as shown below and access the variable in the global scope.\n\n<html>\n<body>\n   <div id = \"output\"> </div>\n   <script>\n      (function () {\n         var string = \"JavaScript\";\n         window.string = string;\n      })();\n      document.getElementById(\"output\").innerHTML =\n      \"The value of the string variable is: \" + string;\n   </script>\n</body>\n</html>\nOutput\nThe value of the string variable is: JavaScript\n\nPrivate scope of a self-invoking function can be accessed using the call() or apply() methods.\n\nBenefits of Using Self-Invoking Functions\nAvoiding the global scope − Developers can avoid the global scope for variables and functions using the self-invoking function, helping to avoid naming conflicts and making the code more readable.\n\nInitialization − The self-executing functions can be used for the initialization of variables.\n\nCode privacy − Programmers can prevent access to the code of the self-executing function by other parts of the code.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 46,
       "fields": {
         "title": "JS Arrow Functions",
         "description": "Arrow Functions\nThe arrow functions in JavaScript allow us to create shorter and anonymous functions. Arrow functions are written without the 'function' keyword. JavaScript arrow functions were introduced in ES6.\n\nBefore ES6, we could define JavaScript functions with function declarations or function expressions. Function expressions were used to define anonymous functions. Arrow functions allow us to write function expressions with a shorter syntax.\n\nLet's look at the syntax to write a function expression:\n\nconst varName = function(parameters) {\n    // function body\n};\nThe above function expression can be written as an arrow function:\n\nconst varName = (parameters) => {\n    // function body\n};\nHere, the 'function' keyword is removed, and '=>' is added after the parentheses.\n\nSyntax\nThe syntax to use arrow functions in JavaScript is as follows:\n\nconst varName = (p1, p2, ... pN) => Expression;\nOR\nconst varName = (p1, p2, ...pN) => {\n    // function body\n};\nHere, the parameters p1, p2, …, pN are optional. We can use the variable name followed by a pair of parentheses to invoke the arrow function.\n\nArrow Function with Single Statement\nWhen the arrow function contains a single statement, we don't need to write the 'return' keyword or use braces (curly brackets).\n\nconst add = (x, y) => x + y;\nPlease note, we can always write an arrow function with the 'return' keyword and braces:\n\nconst add = (x, y) => {return x + y};\n\nExample\nIn the example below, the arrow function contains a single statement, so we don't need to use curly braces or a return statement.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const divide = (x, y) => x / y;\n      document.getElementById(\"output\").innerHTML = divide(10, 5);\n   </script>\n</body>\n</html>\nOutput\n2\nArrow Function with Multiple Statements\nWhen the function body contains multiple statements, we should always use the 'return' statement to return a value. Also, we should use curly braces.\n\nExample\nIn the example below, the arrow function contains multiple statements, so we need to use braces and the return statement.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const divide = (x, y) => {\n         let res = x / y;\n         return res;\n      };\n      document.getElementById(\"output\").innerHTML = divide(10, 5);\n   </script>\n</body>\n</html>\nOutput\n2\nNote: When using block body with braces, we must use the return statement.\n\nArrow Functions Without Parameters\nThe parameters p1, p2, …, pN in the above syntaxes are optional. We can write an arrow function without any parameters.\n\nconst greet = () => \"Hello World!\";\nWe can also write using block body with braces and a return keyword:\n\nconst greet = () => {return \"Hello World!\"};\n\nExample\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const greet = () => \"Hello World!\";\n      document.getElementById(\"output\").innerHTML = greet();\n   </script>\n</body>\n</html>\nOutput\nHello World!\n\nArrow Function with Parameters\nExample: Arrow function with a single parameter\nThe code below demonstrates that when you need to pass a single parameter to the function, you don't need to write parameters in a pair of parentheses.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const divide = x => 20 / x;\n      let res = divide(2);\n      document.getElementById(\"output\").innerHTML = \n      \"The value returned from the arrow function is: \" + res;\n   </script>\n</body>\n</html>\nOutput\nThe value returned from the arrow function is: 10\nExample: Arrow function with multiple parameters\nWe pass multiple parameters to the arrow function expression in the code below. When the body of the arrow function contains multiple statements, we need to write them inside curly braces and use the return statement to return the value.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const sum = (a, b, c, d) => {\n         let sum = a + b + c + d;\n         return sum;\n      };\n      let res = sum(10, 30, 45, 60);\n      document.getElementById(\"output\").innerHTML = \n      \"The sum of 10, 30, 45, and 60 is: \" + res;\n   </script>\n</body>\n</html>\nOutput\nThe sum of 10, 30, 45, and 60 is: 145\nArrow Function as an Expression\nThe arrow function can easily be used as an expression due to its shorter syntax.\n\nExample\nIn the code below, we use the ternary operator. Based on the boolean value of the 'isMul' variable, we assign the arrow function expression to the 'func' variable.\n\nAfter that, we use the 'func' variable to call the arrow function stored in it.\n\n<html>\n<body>\n   <p id=\"output\"> </p>\n   <script>\n      let isMul = true;\n      const func = isMul ? () => {\n         let res = 5 * 5;\n         document.getElementById(\"output\").innerHTML +=\n         \"The multiplication value is: \" + res + \"<br>\";\n      } : () => {\n         let res = 5 + 5;\n         document.getElementById(\"output\").innerHTML +=\n         \"The sum value is: \" + res + \"<br>\";\n      };\n\n      func();\n   </script>\n</body>\n</html>\nOutput\nThe multiplication value is: 25\nArrow Function with Default Parameters\nExample\nThe code below explains how programmers can pass default parameters to the arrow function. It is similar to passing default parameters to standard function definitions.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      const output = document.getElementById(\"output\");\n      let isMul = true;\n      const mul = (a = 10, b = 15) => a * b;\n      output.innerHTML += \"mul(5, 8) = \" + mul(5, 8) + \"<br>\";\n      output.innerHTML += \"mul(6) = \" + mul(6) + \"<br>\";\n      output.innerHTML += \"mul() = \" + mul() + \"<br>\";\n   </script>\n</body>\n</html>\nOutput\nmul(5, 8) = 40\nmul(6) = 90\nmul() = 150\nBenefits of Using Arrow Functions\nHere, we have explained the benefits of using arrow functions.\n\nShorter syntax − Arrow functions decrease the code size required to define functions.\n\nImplicit return − To return the resultant value of the expression from an arrow function containing only a single statement, developers don't need to use the 'return' keyword.\n\nEase of use as an expression − Arrow functions can be easily used as expressions.\n\nLimitations of Using Arrow Functions\nThere are some limitations of arrow functions, which we have explained below.\n\nNo Arguments − Arrow functions can't have an arguments object.\n\nNo prototype − Arrow functions can't have a prototype property, as they are stored in variables as expressions.\n\nNo 'new' keyword − Arrow functions can't be used with the 'new' keyword to create their object.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 47,
       "fields": {
         "title": "JS Function Invocation",
         "description": "Function Invocation\nThe function invocation in JavaScript is the process of executing a function. A JavaScript function can be invoked using the function name followed by a pair of parentheses. When you write function code in JavaScript, it defines the function with expressions and statements. To evaluate these expressions, it is necessary to invoke the function. Function invocation is synonymous with function call or function execution.\n\nA JavaScript function can be defined using function declaration or function expression. The code inside the curly braces in the function definition is not executed when the function is defined. To execute the code, we need to invoke the function.\n\n\"Call a function\" and \"invoke a function\" are two interchangeable terms that are commonly used. However, we can invoke a function without calling it. For example, self-invoking functions are invoked without calling them.\n\nSyntax\nThe syntax of function invocation in JavaScript is as follows:\n\nfunctionName()\nOR\nfunctionName(arg1, arg2, ... argN);\nHere, 'functionName' is the function to be invoked. We can pass as many arguments as the number of parameters listed in the function definition.\n\nExample\nIn the example below, we have defined the 'merge()' function taking two parameters. After that, we used the function name to invoke the function by passing the arguments.\n\n<html>\n<body>\n   <p id = \"output\"> </p>\n   <script>    \n      function merge(str1, str2) {\n         return str1 + str2;\n      }\n      document.getElementById(\"output\").innerHTML = merge(\"Hello\", \" World!\");  \n   </script>\n</body>\n</html>\nOutput\nHello World!\n\nInvocation of Function Constructor\nWhen you invoke a function with the 'new' keyword, it works as a function constructor. The function constructor is used to create an object from the function definition.\n\nSyntax\nFollowing is the syntax to invoke the function as a constructor.\n\nconst varName = new funcName(arguments);\nIn the above syntax, we invoked the function with the 'new' keyword and passed the arguments.\n\nExample\nIn the example below, we use the function as an object template. Here, the 'this' keyword represents the function object, and we use it to initialize the variables.\n\n<html>\n<body>\n   <p id = \"output\"> The ODCar object is: </p>\n   <script>\n      function Car(name, model, year) {\n         this.name = name;\n         this.model = model;\n         this.year = year;\n      }\n      const ODCar = new Car(\"OD\", \"Q6\", 2020);\n      document.getElementById(\"output\").innerHTML += JSON.stringify(ODCar);\n   </script>\n</body>\n</html>\nOutput\nThe ODCar object is: {\"name\":\"OD\",\"model\":\"Q6\",\"year\":2020}\n\nObject Method Invocation\nWe haven't covered JavaScript objects yet in this tutorial but we will cover it in upcoming chapters. Here, let's learn the object method invocation in short.\n\nThe JavaScript object can also contain the function, and it is called the method.\n\nSyntax\nFollowing is the syntax below to invoke the JavaScript object method.\n\nobj.func();\nIn the above syntax, the 'obj' is an object containing the method, and 'func' is a method name to execute.\n\nExample\nIn the example below, we have defined the 'obj' object containing the 'name' property and the 'getAge()' method.\n\nOutside the object, we access the method by the object reference and invoke the method. In the output, the method prints 10.\n\n<html>\n<body>\n   <p id = \"output\">The age of John is: </p>\n   <script>\n      const obj = {\n         name: \"John\",\n         getAge: () => {\n            return 10;\n         }\n      }\n      document.getElementById(\"output\").innerHTML +=  obj.getAge();\n   </script>\n</body>\n</html>\nOutput\nThe age of John is: 10\n\nSelf-Invoking Functions\nSelf-invoking functions in JavaScript are executed just after they are defined. There is no need to call these types of functions to invoke them. Self-invoking functions are always defined using anonymous function expressions. These types of functions are also called immediately invoked function expressions (IIFEs). To invoke these functions, we wrap the function expression within a grouping operator (parentheses) and then add a pair of parentheses.\n\nExample\nTry the following example. In this example, we define a function to show a \"Hello world\" message in an alert box.\n\n<html>\n   <head>\n      <script>\n           (function () {alert(\"Hello World\")})();\n      </script>\n   </head>\n   <body>\n   </body>\n</html>\nOther methods to invoke the function\nJavaScript contains two special methods to invoke the function differently. Here, we have explained each method in the table below.\n\nMethod\tFunction invocation\tArguments\nCall()\tImmediate invocation\tSeparate arguments\nApply()\tImmediate invocation\tArray of arguments\nThe difference between the call() and apply() method is how they take function arguments. We will learn each of the above methods with examples in the next chapters one by one.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 48,
       "fields": {
         "title": "JS Function Call",
         "description": "Function call() Method\nThe Function call() method allows us to invoke a function with a specific value for 'this' and arguments provided individually. When a normal function is called, the value of 'this' inside the function is the object that the function was accessed on. We can manipulate the 'this' value and assign an arbitrary object to 'this' by using the call() method. In other words, we can call an existing function as a method of an object without attaching the function to the object as a method.\n\nIn JavaScript, every function is a Function object. The Function object provides properties and methods for functions, defined on Function.prototype and shared by all Function instances. Some important methods provided by the Function object are call(), apply(), and bind().\n\nLet us understand the syntax of the Function call() method.\n\nSyntax\nThe syntax of Function call() method in JavaScript is as follows:\n\nfuncName.call(thisArg, arg1, arg2, ... argN);\nIn the above syntax, 'funcName' is the name of the function to be called.\n\nParameters\nthisArg − It represents the context for the function, an object whose properties or methods we need to access using the 'this' keyword inside the function.\n\narg1, arg2, ... argN − N arguments to pass to the function, optional.\n\nBy default, the context of the function is the global (window) object. So, the 'this' keyword refers to the 'window' object.\n\nReturn value\nThe call() method returns the value returned from the function.\n\nExamples\nLet's understand JavaScript Function call() method with some examples.\n\nFunction call() method without specifying arguments\nIn the example below, we have defined the test() function. We have invoked the function using the function name and call() method. In both cases, the function prints the same output. When you don't pass any arguments, the call() method gives the same output as a normal function call.\n\n<html>\n<head>\n   <title> JavaScript - Function call() method </title>\n</head>\n<body>\n   <p id = \"output1\"> </p>\n   <p id = \"output2\"> </p>\n   <script>    \n      function test() {\n         return \"The function is invoked!\";\n      }\n        \n      document.getElementById(\"output1\").innerHTML = test();\n      document.getElementById(\"output2\").innerHTML = test.call();\n   </script>\n</body>\n</html>\nOutput\nThe function is invoked!\nThe function is invoked!\n\nFunction call() method with 'this' argument only\nAs discussed, 'this' argument specifies the context of the function. Here, we have defined person1 and person2 objects containing name and age properties.\n\nWe passed the object as an argument of the call() method. In printMessage() function, we access the object's properties passed as a function argument using 'this' keyword.\n\nIn the output, observe that it prints the object properties' value according to the object passed as an argument of the call() method.\n\n<html>\n<head>\n   <title> JavaScript - Function call() method </title>\n</head>\n<body>\n<p id = \"output1\"> </p>\n<p id = \"output2\"> </p>\n<script>\n   function printMessage() {\n      return \"The age of the \" + this.name + \" is \" + this.age;\n   }\n   const person1 = {\n      name: \"John Doe\",\n      age: 22,\n   }\n\n   const person2 = {\n      name: \"Jane Doe\",\n      age: 40,\n   }\n   document.getElementById(\"output1\").innerHTML = printMessage.call(person1);\n   document.getElementById(\"output2\").innerHTML = printMessage.call(person2);\n</script>\n</body>\n</html>\nOutput\nThe age of the John Doe is 22\nThe age of the Jane Doe is 40\n\nFunction call() method with multiple arguments\nThe example below demonstrates passing multiple arguments to the call() method. The printSum() function returns the sum of function parameters and object properties in the code below.\n\n<html>\n<head>\n   <title> JavaScript - Function call() method </title>\n</head>\n<body>\n<p id = \"output\"> </p>\n<script>\n\n   function printSum(p1, p2) {\n      return (this.num1 + this.num2 + p1 + p2);\n   }\n\n   const nums = {\n      num1: 5,\n      num2: 10,\n   }\n\n   const ans = printSum.call(nums, 40, 32);\n   document.getElementById(\"output\").innerHTML = \"Total sum is \" + ans;\n</script>\n</body>\n</html>\nOutput\nTotal sum is 87\n\nWhen you pass the 'this' keyword as the first argument of the call() method instead of an object, it specifies the function itself as a function context.\n\nUsing a method of a different object\nUsing Function call() method, an object can use a method defined in another object. In the example below, we create three objects – student, student1, and student2. We define a method getAge() of the object student. This getAge() method is used by the other two objects (student1 and student2) to access the age. The objects student1 and student2 are passed as arguments to the call() method.\n\n<html>\n<head>\n   <title> JavaScript - Function call() method </title>\n</head>\n<body>\n<p id = \"output1\"> </p>\n<p id = \"output2\"> </p>\n<script>\n\n   const student = {\n      getAge: function(){\n         return this.age;\n      }\n   }\n   const student1 = {\n      name: \"John\",\n      age: 22\n   }\n\n   const student2 = {\n      name: \"Doe\",\n      age: 18\n   }\n  \n   document.getElementById(\"output1\").innerHTML =student.getAge.call(student1);\n   document.getElementById(\"output2\").innerHTML =student.getAge.call(student2);\n\n</script>\n</body>\n</html>\nThe Function call() and apply() methods are similar but with minor differences; call() accepts a list of arguments while apply() accepts an array of arguments. We will cover the Function apply() method in detail in the next chapter of this tutorial.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 49,
       "fields": {
         "title": "JS Function Apply",
         "description": "Function apply() Method\nThe Function apply() method in JavaScript allows us to invoke a function with a specific value for 'this' and arguments provided as an array.\n\nThe Function call() and apply() methods are very similar, but the main difference between them is that the apply() method takes a single array containing all function arguments, whereas the call() method takes individual arguments.\n\nSimilar to the Function call() method, we can use the apply() method to manipulate the 'this' value and assign an arbitrary object to 'this'.\n\nSyntax\nThe syntax of the Function apply() method in JavaScript is as follows −\n\nfunc.apply(thisArg, [arg1, arg2, ... argN]);\n\nParameters\nthisArg − The 'thisArg' argument represents the function context. It is an object whose properties are needed to access the reference function using the 'this' keyword.\n\n[arg1, arg2, ... argN] − These are arguments to pass to the function.\n\nReturn value\nIt returns the resultant value returned from the function.\n\nExamples\nLet's understand JavaScript Function apply() method with some examples.\n\nUsing apply() method without passing arguments\nIn the code below, we have defined the test() function that prints a message in the output.\n\nWe invoked the function in a standard way and used the apply() method without passing any arguments to invoke the function. The output shows that the apply() method gives the same output as a normal function call.\n\n<html>\n<head>\n    <title> JavaScript - Function apply() method </title>\n</head>\n<body>\n  <p id = \"output1\"> </p>\n  <p id = \"output2\"> </p>\n  <script>\n    function test() {\n      return \"The function test is invoked!\";\n    }\n    document.getElementById(\"output1\").innerHTML = test();\n    document.getElementById(\"output2\").innerHTML = test.apply();\n  </script>\n</body>\n</html>\nOutput\nThe function test is invoked!\nThe function test is invoked!\n\nUsing apply() method with 'this' argument only\nIn the code below, the 'car' object contains three different properties. We passed the car object as a 'thisArg' argument of the apply() method.\n\nIn the showCar() function, we access the properties of the car object using the 'this' keyword and print it into the output.\n\n<html>\n<head>\n  <title> JavaScript - Function apply() method </title>\n</head>\n<body>\n  <p id = \"output\"> </p>\n  <script>\n    function showCar() {\n      return \"The price of the \" + this.name + \" \" + \n        this.model + \" is: \" + this.price;\n    }\n    let car = {\n      name: \"OD\",\n      model: \"Q6\",\n      price: 10000000,\n    }\n    document.getElementById(\"output\").innerHTML = showCar.apply(car);\n  </script>\n</body>\n</html>\nOutput\nThe price of the OD Q6 is: 10000000\n\nUsing apply() method with an array of function arguments\nIn the example below, we pass the nums object as the first argument of the apply() method. Then, we pass the array of arguments as an apply() method's argument.\n\nIn the printSum() function, we access the object properties using the 'this' keyword and function arguments using the function parameters.\n\n<html>\n<head>\n    <title> JavaScript - Function apply() method </title>\n</head>\n<body>\n<p id = \"output\"> </p>\n<script>\n\n    function printSum(p1, p2) {\n      return this.num1 + this.num2 + p1 + p2;\n    }\n\n    const nums = {\n      num1: 5,\n      num2: 10,\n    }\n\n    const ans = printSum.apply(nums, [40, 32]);\n    document.getElementById(\"output\").innerHTML = \"Total sum is \" + ans;\n</script>\n</body>\n</html>\nOutput\nTotal sum is 87\n\nUsing apply() method with built-in functions\nYou can also use the apply() method with built-in object methods. We can invoke the built-in object methods (such as Math.max or Math.min) using the apply() method.\n\nIn the example below, we use the apply() method with built-in JavaScript functions - Math.max and Math.min. We can't directly use these methods for arrays. We invoke the Math.max and Math.min methods using apply() method. We pass null as thisArg and the array of five integers as the function argument.\n\n<html>\n<head>\n    <title> JavaScript - Function apply() method </title>\n</head>\n<body>\n<p id = \"output-max\"> Max element in the array: </p>\n<p id = \"output-min\"> Max element in the array:</p>\n<script>\n\n  const numbers = [7, 6, 4, 3, 9];\n\n  document.getElementById(\"output-max\").innerHTML += Math.max.apply(null, numbers);\n\n  document.getElementById(\"output-min\").innerHTML += Math.min.apply(null, numbers);\n\n</script>\n</body>\n</html>\nOutput\nMax element in the array: 9\nMax element in the array: 3\n\nNotice, if you use Math.max() or Math.min() methods directly for arrays to find max or min element in the array, the result will be NaN.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 50,
       "fields": {
         "title": "JS Function Bind",
         "description": "Function bind() Method\nThe function bind() method in JavaScript creates a new function with a specified this value and optional arguments, without invoking the original function immediately. It is commonly used to set the context (this) for a function and partially apply arguments. This method is used to bind a particular object to a common function.\n\nTo understand the function bind() method, we should first understand the \"this\" keyword. In JavaScript (and other programming languages also), this is a special keyword that is used within functions to refer to the object on which the function is invoked. The value of this is depended on how a function is being called and behaviour of this can vary in different contexts.\n\nSyntax\nThe syntax of JavaScript function bind() method is as follows −\n\nfunctionToBind.bind(thisValue, arg1, arg2, ...); \nHere functionToBind is the original function whose this value and arguments you want to set.\n\nParameters\nthisValue − The value that should be passed as the this parameter when the new function is called.\n\narg1, arg2, ... − Optional arguments that will be fixed (partially applied) when the new function is called. These arguments will be prepended to the arguments provided to the new function.\n\nLets now understand the Function bind() method with the help of some program examples.\n\nWithout Function bind() Method\nHere we will create a general and common function greet() which simply prints to the console. We create a constant object named person and give it some property i.e. name and we then invoke the function greet by passing it a message \"Hello\".\n\n<html>\n<body>\n   <div id = \"demo\"> </div>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function greet(message) {\n         output.innerHTML = message + ', ' + this.name;    \n      }\n      const person = { name: 'John Doe' };\n      greet('Hello'); \n   </script>      \n</body>\n</html>\nOutput\nHello, \nIn this example, when the greet function is called directly without using bind, the this value is not explicitly set, leading to an undefined or global object (window in a browser environment) being used as this.\n\nWith Function bind() method\nTo overcome the issue in the previous code where it could not fetch any associated name, we make use of the bind function to bind the object person to the function greet.\n\n<html>\n<body>\n   <div id = \"demo\"> </div>\n   <script>\n      const output = document.getElementById(\"demo\");\n      // Original function\n      function greet(message) {\n         output.innerHTML = message + ', ' + this.name;\n      }\n      // Object with a 'name' property\n      const person = { name: 'John Doe' };    \n      const greetPerson = greet.bind(person, 'Hello');\n      greetPerson();\n   </script>      \n</body>\n</html>\nOutput\nHello, John Doe\nThe bind method was able to create a new function greetPerson wherein the this value has been explicitly set to the person object and argument \"Hello\" is partially applied as in the previous code as well.\n\nUsing bind() ensures that the function is executed in the desired context, preventing issues related to the default behaviour of this in JavaScript functions.\n\nExample: Binding different objects to same function\nWe have created three objects with x and y coordinates of a point, a function printVal is created to print to the console the coordinates of the point. The bind method binds the points to the printVal function and prints the x, y coordinates of each of the points.\n\n<html>\n<body>\n   <div id = \"demo\"> </div>\n   <script>\n      const output = document.getElementById(\"demo\");\n      const points1 = { \n         X: 100, \n         Y: 100\n      } \n      const points2 = { \n         X: 200, \n         Y: 100\n      } \n\n      const points3 = { \n         X: 350, \n         Y: 400\n      } \n      function printVal() { \n         output.innerHTML += \"Coordinates: \"+this.X + \",\" + this.Y + \"<br>\"; \n      } \n\n      const printFunc2 = printVal.bind(points1); \n      printFunc2(); \n\n      const printFunc3 = printVal.bind(points2); \n      printFunc3(); \n\n      const printFunc4 = printVal.bind(points3); \n      printFunc4(); \n   </script>      \n</body>\n</html>\nOutput\nCoordinates: 100,100\nCoordinates: 200,100\nCoordinates: 350,400\nExample: Setting the default values of function parameters\nThis is a new scenario wherein we make use of the bind function to predefine the parameter. The multiply() function simply takes 2 inputs and returns their product. By using the bind() method we can set any of the parameters to a default value as needed.\n\nIn the below example, it sets the variable y to 2 and hence upon calling the function by passing just 1 parameter i.e. x as 5 it gets multiplies by the preset 2 and returns the output of 5x2=10.\n<html>\n<body>\n   <div id = \"output\"> </div>\n   <script>\n      // Original function with parameters\n      function multiply(x, y) {\n         return x * y;\n      }\n\n      // Using bind to preset the first parameter\n      const multiplyByTwo = multiply.bind(null, 2);\n      \n      // Calling the bound function with only the second parameter\n      document.getElementById(\"output\").innerHTML= multiplyByTwo(5); \n   </script>      \n</body>\n</html>\nOutput\n10\nIt is important to note that the bind method creates and returns a new function and does not modify the original function. The same function can be reused and yet made to match different use cases without actually modifying.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 51,
       "fields": {
         "title": "JS Closures",
         "description": "What is Closure?\nThe concept of closures in JavaScript allows nested functions to access variables defined in the scope of the parent function, even if the execution of the parent function is finished. In short, you can make global variables local or private using the closures.\n\nA JavaScript closure is basically a combination of the function and its lexical environment. This allows an inner function to access the outer function scope. A closure is created every time a function is created at the function creation time.\n\nBefore you start learning the concept of closures, you need to know the concept of lexical scoping, nested functions, and returning functions.\n\nLexical Scoping\nIn JavaScript, the lexical scoping is a concept in which the scope of the variables is determined at the code compilation time based on the structure of the code. For example, the nested function can access the variables from the parent function's scope is called lexical scoping.\n\nNested Function\nYou can define the function inside the function, and the inner function is called the nested function. Let's learn it via the example below.\n\nExample\nIn the example below, we have defined the inner() function inside the outer() function. Also, the inner() function is executed inside the outer() function.\n\n<html>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function outer() {\n         output.innerHTML += \"The outer function is executed! <br>\";\n         function inner() {\n            output.innerHTML += \"The inner function is executed! <br>\";\n         }\n         inner();\n      }\n      outer();\n   </script>\n</body>\n</html>\nOutput\nThe outer function is executed!\nThe inner function is executed!\nReturning Function\nWhen any function returns the function instead of a value or variable, it is called the returning function. Let's look at the example below.\n\nExample\nIn the below code, the outer() function returns the function definition, and we store it in the 'func' variable. After that, we use the 'func' variable to invoke a function stored in that.\n\n<html>\n<head>\n   <title> JavaScript - Returning function </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function outer() {\n         output.innerHTML += \"The outer function is executed! <br>\";\n         return function inner() {\n            output.innerHTML += \"The inner function is executed! <br>\";\n         }\n      }\n      const func = outer();\n      func();\n      func();\n   </script>\n</body>\n</html>\nOutput\nThe outer function is executed!\nThe inner function is executed!\nThe inner function is executed!\nNow, you learned the prerequisite required to learn the closures.\n\nThe definition of JavaScript closure is a bit confusing, but we will learn the closure concept step by step so it will be clear to you.\n\nA Counter Dilemma\nFor example, you create the counter to increment and decrement the variable. As shown below, you need to use the global variable for the counter.\n\nExample\nIn the example below, the 'cnt', a global variable is initialized with 100. Whenever the decrement() function is executed, it decreases the value of the 'cnt' variable by 1.\n\n<html>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      var cnt = 100;\n      function decrement() {\n         cnt = cnt - 1;\n         output.innerHTML += \"The value of the cnt is: \" + cnt + \"<br>\";\n      }\n      decrement();\n      decrement();\n      decrement();\n   </script>\n</body>\n</html>\nOutput\nThe value of the cnt is: 99\nThe value of the cnt is: 98\nThe value of the cnt is: 97\nThe above code perfectly works as a decrement counter, but the problem is 'cnt' variable can be accessed in the code anywhere, and any part of the code can change it without executing the decrement() function.\n\nHere, JavaScript closure comes into the picture.\n\nExample: JavaScript Closures\nThe counter() function returns the decrement() function in the example below. The 'cnt' variable is defined inside the counter() function rather than in the global scope.\n\nThe decrement() function decreases the value of the 'cnt' by 1 and prints in the output.\n\nThe 'func' variable contains the decrement() function expression. Whenever you execute the func(), it calls the decrement() function.\n\n<html>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function counter() {\n         let cnt = 100; // Works as a global variable for the decrement function.\n         return function decrement() {\n            cnt = cnt - 1;\n            output.innerHTML += \"The value of the cnt is: \" + cnt + \"<br>\";\n         }\n      }\n      const func = counter(); // Returns the decrement() function expression\n      func();\n      func();\n      func();\n   </script>\n</body>\n</html>\nOutput\nThe value of the cnt is: 99\nThe value of the cnt is: 98\nThe value of the cnt is: 97\nNow, let's remember the definition of closure again. It says that the nested function can access the variables from the outer function's scope even if the execution of the outer function is finished.\n\nHere, the execution of the counter() function is finished. Still, you can call the decrement() function and access the 'cnt' variable with an updated value.\n\nLet's look at another example of closure.\n\nExample\nIn the example below, the name() function returns the getFullName() function. The getFullName() function merges the string with the 'name' variable, defined in the outer function's scope.\n\n<html>\n<head>\n   <title> JavaScript - Closure </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function name() {\n         let name = \"John\";\n         return function getFullName() {\n            return name + \" Doe\";\n         }\n      }\n\n      const fullName = name();\n      output.innerHTML += \"The full name is \" + fullName();\n   </script>\n</body>\n</html>\nOutput\nThe full name is John Doe\nBenefits of Closure\nFollowings are some benefits of the closures in JavaScript −\n\nEncapsulation − The closure allows developers to hide or encapsulate the data. It makes data private and inaccessible from the global scope. So, you can expose only the required variables and functions and hide other internal details of the code.\n\nPreserving State − The function remembers its lexical scope even if the execution of the outer function is completed. So, developers can maintain the state as we were maintaining the state of the counter in the above examples.\n\nImproved memory efficiency − The closure allows you to manage memory efficiently, as you can only retain access to the necessary variables and don't need to define the variables globally.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 52,
       "fields": {
         "title": "JS Variable Scope",
         "description": "JavaScript Variable Scope\nThe variable scope in JavaScript determines to the accessibility and visibility of the variable in different parts of the code. The scope is the current context of the code execution. This means the variable scope is determined by where it is executed not by where it is declared.\n\nIn JavaScript, the objects and functions are also variables. So the JavaScript variable scope also determines the accessibility or visibility of objects and functions also in the program.\n\nIt is essential to learn the variable scope in JavaScript to write clear code and avoid naming conflicts.\n\nThere are following types of variable scope in JavaScript.\n\nBlock scope\n\nFunction scope\n\nLocal scope\n\nGlobal scope\n\nHere, we will cover the block, function, and local scope. We will discuss Global scope in detain in JavaScript Global variable chapter.\n\nJavaScript Block Scope\nBefore JavaScript ES6, there were only Global and Function scopes. ES6 introduced the let and const keywords. These keywords provide the Block Scope in JavaScript.\n\nThe JavaScript variables defined using the 'let' and 'const' keyword inside a { } block can be accessible only inside the block in which they are defined.\n\n{\n   let x = 10; // x is accessible here\n}\n//x is not accessible here\nA variable defined with var keyword is does not provide block scope.\n\n{\n   var x = 10; // x is accessible here\n}\n//x is accessible here also\nExample\nIn the example below, we defined the variable 'a' inside the 'if' block. In the output, you can see that variable 'a' is accessible only inside the 'if' block. If you try to access the variable 'a' outside the 'if' block, it will throw a reference error like 'variable a is not defined'.\n\n<html>\n<head>\n   <title> JavaScript - Block scope </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      if (true) {\n         let a = 10;\n         document.getElementById(\"output\").innerHTML = \"a = \" + a;\n      }\n      // a can't be accessed here\n   </script>\n</body>\n</html>\nOutput\na = 10\nExample\nIn the below code, we have defined the test() function. In the function, we have added a { } block using the curly braces, and inside the { } block, we have defined the variable 'x'. The variable 'x' can't be accessible outside the { } block as it has a block scope.\n\n<html>\n<head>\n   <title> JavaScript - Block scope </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function test() {\n         {\n            let x = 30;\n            output.innerHTML = \"x = \" + x;\n         }\n         // variable x is not accessible here\n      }\n      test();\n   </script>\n</body>\n</html>\nOutput\nx = 30\nWhenever you define the variable using the 'let' or 'const' keyword inside the block, like loop block, if-else block, etc., it can't be accessible outside the block.\n\nJavaScript Function Scope\nIn JavaScript, each function creates a scope. The variables defined inside a function have function scope. The variable defined in a function are accessible from within the same function only. These variable are not accessible from the outside of the function.\n\nWhenever you define the variable inside the function using the 'var' keyword, the variable can be accessible throughout the function, even if it is defined inside the particular block.\n\nFor example,\n\nfunction func() {\n   {\n      var x; // function scope\n      let y; // Block scope\n      const z = 20; // Block scope\n   }\n   // x is accessible here, but not y & z\n}\nExample\nIn the example below, we have defined the variable 'x', 'y', and 'z' using the var, let, and const keywords, respectively. The variable 'x' can be accessible inside the function anywhere as it has a function scope, but 'y' and 'z' can only be accessible inside the block in which it is defined.\n\n<html>\n<head>\n   <title> JavaScript - Function scope </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function func() {\n         {\n            var x = 30;\n            let y = 20;\n            const z = 10;\n            output.innerHTML += \"x -> Inside the block = \" + x + \"<br>\";\n            output.innerHTML += \"y -> Inside the block = \" + y + \"<br>\";\n            output.innerHTML += \"z -> Inside the block = \" + z + \"<br>\";\n         }\n         output.innerHTML += \"x -> Outside the block = \" + x + \"<br>\";\n         // y and z can't be accessible here\n      }\n\n      func();\n   </script>\n</body>\n</html>\nOutput\nx -> Inside the block = 30\ny -> Inside the block = 20\nz -> Inside the block = 10\nx -> Outside the block = 30\nAdvertisement\n\nJavaScript Local Scope\nThe JavaScript local scope is a combination of the function and block scope. The JavaScript compiler creates a local variable when the function is invoked and deletes it when the function invocation completes.\n\nIn short, variables defined inside the function or block are local to that particular scope. The function parameters are treated as local variables inside the function.\n\nExample\nIn the below code, we have defined the variables inside the function using the var, let, and const keywords. All variables are local to the function. It can't be accessible outside the function.\n\nSimilarly, we can define the looping variables in the local scope.\n\n<html>\n<head>\n   <title> JavaScript - Local scope </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function func() {\n         let first = 34;\n         var second = 45;\n         const third = 60;\n\n         output.innerHTML += \"First -> \" + first + \"<br>\";\n         output.innerHTML += \"Second -> \" + second + \"<br>\";\n         output.innerHTML += \"Third -> \" + third + \"<br>\";\n      }\n      func();\n   </script>\n</body>\n</html>\nOutput\nFirst -> 34\nSecond -> 45\nThird -> 60\nWe notice that the when a variable is defined inside a function, the variable become Local to the function. In this situation, the variable has function scope. When a variable is defined inside a particular block, it becomes local to that block and has block scope.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 53,
       "fields": {
         "title": "JS Global Variables",
         "description": "JavaScript Global Variables\nThe global variables in JavaScript are the variables that are defined outside of the function or any particular block. They are accessible from anywhere in JavaScript code. All scripts and functions can access the global variables.\n\nYou can define the global variables using the var, let, or const keyword. The variables defined without using any of the var, let or const keywords automatically becomes global variables.\n\nJavaScript Global Scope\nThe global variables have global scope. So a variable declared outside of a function or block has global scope. The global scope is visible or accessible in all other scope. In client side JavaScript the global scope is the web page in which all the code is being executed. A global variable declared with var keyword belongs to window object.\n\nvar x = 10; // Global Scope\nlet y = 20; // Global Scope\t\nconst z = 30; // Global Scope\nHere the variables, x, y and z are declared outside of any function and block, so they have global scope and are called global variable.\n\nGlobal Variable Examples\nLet's learn more about global variables using the example below.\n\nExample\nWe have defined the x, y, and z global variables in the code below. You can observe that variables can be accessed anywhere inside the code.\n\n<html>\n<head>\n   <title> JavaScript - Global variables </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      var x = 10;\n      let y = 20;\n      const z = 30;\n      document.getElementById(\"output\").innerHTML = \n      \"x = \" + x + \"<br>\" +\n      \"y = \" + y + \"<br>\" +\n      \"z = \" + z;\n   </script>\n</body>\n</html>\nOutput\nx = 10\ny = 20\nz = 30\nExample\nIn the example below, we have defined the variables a and b using the var and let keywords. You can see that a and b variables can be accessible inside the function or outside the function as they are global variables.\n\n<html>\n<head>\n   <title> JavaScript - Global variables </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      var a = 10;\n      let b = 20;\n      function test() {\n         output.innerHTML += \"a -> Inside the function = \" + a + \"<br>\";\n         output.innerHTML += \"b -> Inside the function = \" + b + \"<br>\";\n      }\n      test();\n      output.innerHTML += \"a -> Outside the function = \" + a + \"<br>\";\n      output.innerHTML += \"b -> Outside the function = \" + b + \"<br>\";\n   </script>\n</body>\n</html>\nOutput\na -> Inside the function = 10\nb -> Inside the function = 20\na -> Outside the function = 10\nb -> Outside the function = 20\nAdvertisement\n\nAutomatic Global Variables\nWhen you define the variables anywhere inside the code without using the var, let, or const keywords, the variable automatically becomes the global variable and can be accessible anywhere inside the code.\n\nExample\nIn the below code, we have defined the variable 'a' without using any keyword inside the function. Even if we have defined the variable in the function, it becomes global as we haven't used any keyword to define the function.\n\nThe output shows that variable 'a' can be accessible inside or outside the function.\n \n<html>\n<head>\n   <title> JavaScript - Global variables </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      const output = document.getElementById(\"demo\");\n      function test() {\n      a = 90;\n            output.innerHTML += \"a -> Inside the function = \" + a + \"<br>\";\n        }\n        test();\n        output.innerHTML += \"a -> Outside the function = \" + a + \"<br>\";\n    </script>\n</body>\n</html>\nOutput\na -> Inside the function = 90\na -> Outside the function = 90\nDefining the global variables inside the function or particular block is not a good practice, as naming conflict can occur in the code.",
         "module_id": 4,
         "content": null
       }
     },
     
     {
       "model": "lessons.lesson",
       "pk": 54,
       "fields": {
         "title": "JS Smart Function Parameters",
         "description": "The concept of smart function parameters in JavaScript is a way to make a function adaptable to different use cases. It allows the function to handle the different kinds of arguments passed to it while invoking it.\n\nIn JavaScript, the function is an important concept for reusing the code. In many situations, we need to ensure the function is flexible to handle different use cases.\n\nHere are different ways to define a function with smart parameters.\n\nDefault Function Parameters\nIn JavaScript, the use of default function parameters is a way to handle the undefined argument values or arguments that haven't passed to the function during invocation of the function.\n\nIn the below code snippet, we set default values of the parameters, a and b to 100 and 50.\n\nfunction division (a = 100, b = 50) {\n   // Function body\n}\nExample\nIn the below code, the division() function returns the division of the parameters a and b. The default value of parameter a is 100, and parameter b is 50 whenever you want to pass any argument or pass an undefined argument, parameters with initialized with their default value which you can observe from the values printed in the output.\n\n<html>\n<head>\n   <title> JavaScript - Default parameters </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      function division(a = 100, b = 50) {\n         return a / b;\n      }\n      document.getElementById(\"output\").innerHTML = \n      division(10, 2) + \"<br>\" +\n      division(10, undefined) + \"<br>\" +\n      division();\n   </script>\n</body>\n</html>\nOutput\n5\n0.2\n2\n\nJavaScript Rest Parameter\nWhen the number of arguments that need to pass to the function is not fixed, you can use the rest parameters. The JavaScript rest parameters allow us to collect all the reaming (rest) arguments in a single array. The rest parameter is represented with three dots (...) followed by a parameter. Here this parameter works as the array inside the function.\n\nSyntax\nFollow the below syntax to use the rest parameters in the function declaration.\n\nfunction funcName(p1, p2, ...args) { \n   // Function Body;\n}\nIn the above syntax, 'args' is rest parameter, and all remaining arguments will be stored in the array named args.\nExample\nIn the example below, the sum() function returns the sum of all values passed as an argument. We can pass an unknown number of arguments to the sum() function. The function definition will collect all arguments in the 'nums' array. After that, we can traverse the 'nums' array in the function body and calculate the sum of all argument values.\n\nThe sum() function will also handle the 0 arguments also.\n\n<html>\n<head>\n   <title> JavaScript - Rest parameters </title>\n</head>\n<body>\n   <p id = \"demo\"> </p>\n   <script>\n      function sum(...nums) {\n         let totalSum = 0;\n         for (let p = 0; p < nums.length; p++) {\n            totalSum += nums[p];\n         }\n         return totalSum;\n      }\n      document.getElementById(\"demo\").innerHTML = \n      sum(1, 5, 8, 20, 23, 45) + \"<br>\" +\n      sum(10, 20, 30) + \"<br>\" +\n      sum() + \"<br>\";\n   </script>\n</body>\n</html>\nOutput\n102\n60\n0\nNote – You should always use the rest parameter as a last parameter.\n\nJavaScript Destructuring or Named parameters\nYou can pass the single object as a function argument and destructuring the object in the function definition to get only the required values from the object. It is also called the named parameters, as we get parameters based on the named properties of the object.\n\nSyntax\nFollow the below syntax to use the destructuring parameters with the function.\n\nfunction funcName({ prop1, prop2, ... }) { }\nIn the above syntax, prop1 and prop2 are properties of the object passed as an argument of the function funcName.\n\nExample\nIn the example below, we have defined the 'watch' object containing three properties and passed it to the printWatch() function.\n\nThe printWatch() function destructuring the object passed as an argument and takes the 'brand' and 'price' properties as a parameter. In this way, you can ignore the arguments in the function parameter which are not necessary.\n\n<html>\n<head>\n   <title> JavaScript - Parameter Destructuring </title>\n</head>\n<body>\n   <p id = \"output\"> </p>\n   <script>\n      function printWatch({ brand, price }) {\n         return \"The price of the \" + brand + \"'s watch is \" + price;\n      }\n\n      const watch = {\n         brand: \"Titan\",\n         price: 10000,\n         currency: \"INR\",\n      }\n      document.getElementById(\"output\").innerHTML = printWatch(watch);\n   </script>\n</body>\n</html>\nOutput\nThe price of the Titan's watch is 10000\nThe above three concepts give us flexibility to pass the function arguments.",
         "module_id": 4,
         "content": null
       }
     }
     
]

  
