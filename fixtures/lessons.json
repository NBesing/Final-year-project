
  [
   {
      "model": "lessons.lesson",
      "pk": 1,
      "fields": {
          "module_id": 1,
          "title": "JS Overview",
          "description": "In this lesson we'll talk about JavaScript, its history, client-side and server-side usage, advantages, limitations, imperative vs. declarative programming, development tools, and its current state.",
          "content": {
              "subtopics": [
                  {
                      "title": "What is JavaScript?",
                      "notes": "JavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities. JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript."
                  },
                  {
                      "title": "History of JavaScript",
                      "notes": "JavaScript is developed by Brendan Eich, a computer scientist and programmer at Netscape Communications Corporation. The initial name of the JavaScript was 'Mocha'. It was later renamed to 'LiveScript', and then 'JavaScript'. ECMAScript standardized JavaScript in 1996-1997, with subsequent revisions leading up to ECMAScript 2023."
                  },
                  {
                      "title": "Client-Side JavaScript",
                      "notes": "Client-side JavaScript is the most common form used in web development. It runs in the user's web browser and allows interactive behavior like form validation, dynamic content updates, and event handling."
                  },
                  {
                      "title": "Server-Side JavaScript",
                      "notes": "JavaScript's server-side usage gained prominence with the advent of Node.js. It allows JavaScript to be used beyond the browser, enabling server-side scripting for web applications."
                  },
                  {
                      "title": "Advantages of JavaScript",
                      "notes": "JavaScript offers benefits such as reduced server interaction, immediate user feedback, increased interactivity, and the ability to create richer user interfaces."
                  },
                  {
                      "title": "Limitations of JavaScript",
                      "notes": "JavaScript has limitations such as lack of file system access, no built-in networking capabilities, and absence of multi-threading support."
                  },
                  {
                      "title": "Imperative vs. Declarative JavaScript",
                      "notes": "JavaScript supports both imperative (step-by-step) and declarative (what should be done) programming paradigms. It provides flexibility in coding styles."
                  },
                  {
                      "title": "JavaScript Development Tools",
                      "notes": "Development tools like Visual Studio Code and Chrome DevTools are widely used for JavaScript development. These tools enhance productivity and aid in debugging and optimizing code."
                  },
                  {
                      "title": "Where is JavaScript Today?",
                      "notes": "JavaScript has evolved significantly, with ES6 (2015) introducing modern features and ES14 (2023) continuing to enhance the language. It remains a pivotal technology in web development."
                  }
              ]
          }
      }
   },
   {
      "model": "lessons.lesson",
      "pk": 2,
      "fields": {
          "module_id": 1,
          "title": "JS Enabling",
          "description": "All modern browsers come with built-in support for JavaScript, and it has enabled JavaScript by default. Frequently, you may need to enable or disable this support manually. This chapter explains how to turn JavaScript support on and off in your browsers: Chrome, Microsoft Edge, Firefox, Safari, and Opera.",
          "content": {
              "subtopics": [
                  {
                      "title": "JavaScript in Chrome",
                      "notes": "\n\nHere are the steps to turn on or turn off JavaScript in Chrome −\n\n<ul><li>Click the Chrome menu at the top right-hand corner of your browser</li>.\n<li>Select the Settings option.\nClick on the Privacy and Security tab from the left sidebar.\nClick Show advanced settings at the end of the page.\nNext, click on the Site Settings tab.\nNow, scroll to the bottom of the page, and find the content section. Click on the JavaScript tab in the content section.\nHere, you can select a radio button to turn JavaScript on or off.\nAlso, you can add the URLS of the custom website to block and unblock JavaScript on particular websites."
                  },
                  {
                      "title": "JavaScript in Microsoft Edge",
                      "notes": "Here are simple steps to turn on or turn off JavaScript in your Microsoft Edge −\n\nClick Edge menu (three dots) at top right-hand corner of the edge browser.\nFollow More Tools → Internet Options from the menu.\nSelect Security tab from the dialog box.\nClick the Custom Level button.\nScroll down till you find Scripting option.\nSelect Enable radio button under Active scripting.\nFinally click OK and come out.\nTo disable JavaScript support in your Microsoft Edge, you need to select Disable radio button under Active scripting."
                  },
                  {
                      "title": "JavaScript in Firefox",
                      "notes": "Here are the steps to turn on or turn off JavaScript in Firefox −\n\nOpen a new tab → type about: config in the address bar.\nThen you will find the warning dialog. Select I’ll be careful, I promise!\nThen you will find the list of configure options in the browser.\nIn the search bar, type javascript.enabled.\nThere you will find the option to enable or disable javascript by right-clicking on the value of that option → select toggle.\nIf javascript.enabled is true, it converts to false upon clicking toggle. If javascript is disabled, it gets enabled upon clicking toggle."
                  },
                  {
                      "title": "JavaScript in Safari",
                      "notes": "When you install the Safari web browser, JavaScript comes installed by default. If you have disabled it and want to enable it, follow the steps below.\n\nClick on the safari menu from the top-left corner.\nSelect the preferences in the dropdown menu. It will open a new window.\nOpen the security tab.\nCheck the Enable JavaScript checkbox in the ‘web content’ section to enable the javascript. You can disable the JavaScript by unchecking the checkbox.\nNow, close the preference window and reload the web page."
                  },
                  {
                      "title": "JavaScript in Opera",
                      "notes": "Here are the steps to turn on or turn off JavaScript in Opera −\n\nFollow Tools → Preferences from the menu.\nSelect the Advanced option from the dialog box.\nSelect Content from the listed items.\nSelect Enable JavaScript checkbox.\nFinally, click OK and come out.\nTo disable JavaScript support in your Opera, you should not select the enable JavaScript checkbox."
                  },
                  {
                      "title": "Warning for Non-JavaScript Browsers",
                      "notes": "If you have to do something important using JavaScript, then you can display a warning message to the user using <noscript> tags.\n\nYou can add a noscript block immediately after the script block as follows ",
                      "code": "<html>\n<head>\n<script>\ndocument.write(\"Hello World!\");\n</script>\n\n<noscript>\nSorry...JavaScript is needed to go ahead.\n</noscript>\n</head>\n<body>\n</body>\n</html>"
                  }
              ]
          }
      }
   },
   {
      "model": "lessons.lesson",
      "pk": 3,
      "fields": {
        "module_id": 1,
        "title": "JS Placement",
        "description": "We will be seeing how to ...",
        "content": {
          "subtopics": [
            {
              "title": "JavaScript Placement in HTML File",
              "notes": "There is flexibility to place JavaScript code anywhere in an HTML document. However, the most preferred ways to include JavaScript in an HTML file are as follows −\n\nScript in <head>...</head> section.\n\nScript in <body>...</body> section.\n\nScript in <body>...</body> and <head>...</head> sections.\n\nScript in an external file and then include in <head>...</head> section.\nIn the following section, we will see how we can place JavaScript in an HTML file in different ways."
            },
            {
              "title": "JavaScript in <head>...</head> section",
              "notes": "If you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows",
              "code": "<html>\n<head>\n<script type = \"text/javascript\">\nfunction sayHello() {\nalert(\"Hello World\")\n}\n</script>\n</head>\n<body>\n<input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n</body>\n</html>"
            },
            {
              "title": "JavaScript in <body>...</body> section",
              "notes": "If you need a script to run as the page loads so that the script generates content in the page, then the script goes in the <body> portion of the document. In this case, you would not have any function defined using JavaScript. Take a look at the following code.",
              "code": "<html>\n<head>\n</head>\n<body>\n<script type = \"text/javascript\">\ndocument.write(\"Hello World\")\n</script>\n<p>This is web page body </p>\n</body>\n</html>"
            },
            {
              "title": "JavaScript in <body> and <head> Sections",
              "notes": "You can put your JavaScript code in <head> and <body> sections altogether as follows",
              "code": "<html>\n<head>\n<script type = \"text/javascript\">\nfunction sayHello() {\nalert(\"Hello World\")\n}\n</script>\n</head>\n<body>\n<script type = \"text/javascript\">\ndocument.write(\"Hello World\")\n</script>\n<input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n</body>\n</html>"
            },
            {
              "title": "JavaScript in External File",
              "notes": "As you begin to work more extensively with JavaScript, you will likely find cases where you are reusing identical JavaScript code on multiple pages of a site.\n\nYou are not restricted to be maintaining identical code in multiple HTML files. The script tag provides a mechanism to allow you to store JavaScript in an external file and then include it in your HTML files.\n\nTo use JavaScript from an external file source, you need to write all your JavaScript source code in a simple text file with the extension \".js\" and then include that file as shown below.\n\nFor example, you can keep the following content in the filename.js file, and then you can use the sayHello function in your HTML file after including the filename.js file.\n\nfilename.js\nfunction sayHello() {\nalert(\"Hello World\")\n}\nHere is an example to show how you can include an external JavaScript file in your HTML code using the script tag and its src attribute.\n\nYou may include the external script reference within the <head> or <body> tag.",
              "code": "<html>\n<head>\n<script type = \"text/javascript\" src = \"filename.js\"></script>\n</head>\n<body>...\n</body>\n</html>"
            },
            {
              "title": "External References",
              "notes": "You can add an external JavaScript file in the HTML using the below 3 ways.",
              "code": ""
            },
            {
              "title": "1. Using the full file path",
              "notes": "When you need to add any hosted JavaScript file or a file that doesn’t exist in the same project into the HTML, you should use the full file path.\n\nFor example,",
              "code": "<head>\n<script src = \"C://javascript/filename.js\"></script>\n</head>"
            },
            {
              "title": "2. Using the relative file path",
              "notes": "For example,\n<head>\n<script src = \"javascript\\filename.js\"></script>\n</head>",
              "code": ""
            },
            {
              "title": "3. Using the filename only",
              "notes": "If HTML and JavaScript both files are in the same folder, you can use the file name.",
              "code": "<head>\n<script src = \"filename.js\"></script>\n</head>"
            },
            {
              "title": "Advantages of using the <script> tag",
              "notes": "Here are the advantages of using the <script> tag to add JavaScript in the HTML.\n\nEase of Integration\nThe <script> tag allows developers to integrate JavaScript into the HTML file easily. Adding JavaScript to the HTML file allows you to add behavior and interactivity to the web page.\n\nImmediate Execution\nWhenever the browser finds a <script> tag on the web page, it immediately executes the JavaScript code defined inside that. It enables website visitors to interact with the web pages and get real-time updates immediately.\n\nInline and External scripts\nYou can use the <script> tag to add the inline or external script into the HTML file. If you want to load JavaScript before the HTML of a web page, you can add the <script> tag in the <head> tag. Otherwise, you can add the <script> tag in the <body> tag.\n\nExternal Libraries and Frameworks integration\nThe <script> tag enables you to add external libraries and frameworks to the HTML web page.\n\nFor example, in the below code, we have added JQuery to the web page using its CDN.",
              "code": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js\"></script>"
            },
            {
              "title": "Global Scope Access",
              "notes": "Whatever code you define in the script tag has access to the global scope of the web page. You can access the global variables, functions, etc., anywhere in the code.",
              "code": ""
            }
          ]
        }
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 4,
      "fields": {
        "module_id": 1,
        "title": "JS Syntax",
        "description": "JavaScript syntax comprises a set of rules that define how to construct a JavaScript code. JavaScript can be implemented using JavaScript statements that are placed within the <script>...</script> HTML tags in a web page.\n\nYou can place the <script> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <head> tags.\n\nThe <script> tag alerts the browser program to start interpreting all the text between these tags as a script. The script tag takes two important attributes −\nLanguage − This attribute specifies what scripting language you are using. Typically, its value will be javascript. Although recent versions of HTML (and XHTML, its successor) have phased out the use of this attribute.\n\nType − This attribute is what is now recommended to indicate the scripting language in use and its value should be set to \"text/javascript\". JavaScript has become the default language in HTML5 and modern browsers, so now adding type is not required.",
        "content": {
          "subtopics": [
            {
              "title": "Your First JavaScript Code",
              "notes": "Let us take a sample example to print out \"Hello World\". We call the document.write method which writes a string into our HTML document. This method can be used to write text, HTML, or both. Take a look at the following code",
              "code": "<html>\n<head>\n<title> Your first JavaScript program </title>\n</head>\n<body>\n<script language=\"javascript\" type=\"text/javascript\">\ndocument.write(\"Hello World!\")\n</script>\n</body>\n</html>\nThis code will produce the following result −\n\nHello World!"
            },
            {
              "title": "JavaScript Values",
              "notes": "In JavaScript, you can have two types of values.\n\nFixed values (Literals)\n\nVariables (Dynamic values)",
              "code": ""
            },
            {
              "title": "JavaScript Literals",
              "notes": "In the below code, 10 is a Number literal and ‘Hello’ is a string literal.",
              "code": "<html>\n<body>\n<script>\ndocument.write(10); // Number Literal\ndocument.write(\"<br />\"); // To add line-break\ndocument.write(\"Hello\"); // String Literal\n</script>\n</body>\n</html>\nThis code will produce the following result −\n\n10\nHello"
            },
            {
              "title": "JavaScript Variables",
              "notes": "In JavaScript, variables are used to store the dynamic data.\n\nYou can use the below keyword to define variables in JavaScript.\n\nvar\nlet\nconst\nYou can use the assignment operator (equal sign) to assign values to the variable.\n\nIn the below code, variable a contains the numeric value, and variable b contains the text (string).",
              "code": "<html>\n<body>\n<script>\nlet a = 5; // Variable Declaration\ndocument.write(a); // Using variable\ndocument.write(\"<br>\");\nlet b = \"One\";\ndocument.write(b);\n</script>\n</body>\n</html>\nThis code will produce the following result −\n\n5\nOne"
            },
            {
              "title": "Whitespace and Line Breaks",
              "notes": "JavaScript ignores spaces, tabs, and newlines that appear in JavaScript programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.",
              "code": ""
            },
            {
              "title": "Semicolons are Optional",
              "notes": "Simple statements in JavaScript are generally followed by a semicolon character, just as they are in C, C++, and Java. JavaScript, however, allows you to omit this semicolon if each of your statements are placed on a separate line. For example, the following code could be written without semicolons.",
              "code": "<script>\nvar1 = 10\nvar2 = 20\n</script>\nBut when formatted in a single line as follows, you must use semicolons −\n\n<script>\nvar1 = 10; var2 = 20;\n</script>"
            },
            {
              "title": "Case Sensitivity",
              "notes": "JavaScript is a case-sensitive language. This means that the language keywords, variables, function names, and any other identifiers must always be typed with a consistent capitalization of letters.\n\nSo the identifiers Time and TIME will convey different meanings in JavaScript.\n\nIn the code below, we compare the ‘time’ and ‘Time’ strings, which returns false.",
              "code": "<html>\n<body>\n<script>\nlet a = \"time\";\nlet b = \"Time\";\ndocument.write(\"a == b? \" + (a == b));\n</script>\n</body>\n</html>\nThis code will produce the following result −\n\na == b? false"
            },
            {
              "title": "JavaScript and Camel Case",
              "notes": "Pascal Case − We can create variables like SmartWatch, MobileDevice, WebDrive, etc. It represents the upper camel case string.\n\nLower Camel Case − JavaScript allows developers to use variable names and expression names like smartwatch, mobileDevice, webDriver, etc. Here the first character is in lowercase.\n\nUnderscore − We can use underscore while declaring variables like smart_watch, mobile_device, web_driver, etc.",
              "code": "let sum = x + y;"
            },
            {
              "title": "JavaScript Keywords",
              "notes": "JavaScript contains multiple keywords which we can use for a particular task. For example, the function keyword can be used to define the function. The let, var, and const keywords can be used to define variables.\n\nLet’s understand the use of the keyword via the example below.",
              "code": ""
            },
            {
              "title": "Example",
              "notes": "In this example, we used the function keyword to define the function. We used the var keyword inside the function to define the sum variable.\n\nAlso, we used the let and const keywords outside the function to define two variables and initialize them with values. After that, we called the function using the function name and passed variables as an argument.",
              "code": "<html>\n<body>\n<script>\nfunction getSum(first, second) {\nvar sum = first * second;\ndocument.write(\"The sum of \" + first + \" and \" + second + \" is \" + sum);\n}\nlet first = 3;\nconst second = 4;\ngetSum(first, second);\n</script>\n</body>\n</html>"
            }
          ]
        }
      }
    },
    
    
    {
      "model": "lessons.lesson",
      "pk": 5,
      "fields": {
        "module_id": 1,
        "title": "JS Hello World",
        "description": "Learn how to write a basic 'Hello World' program in JavaScript.",
        "content": {
          "subtopics": [
            {
              "topic": "Write 'Hello World' Program in JavaScript",
              "notes": "'Hello, World!' is often the first program programmers write when learning a new programming language. JavaScript 'Hello World' is a simple program generally used to demonstrate the basic syntax of the language. This program will make use of different JavaScript methods to print 'Hello World'.",
              "code": ""
            },
            {
              "topic": "Writing Hello World in JavaScript",
              "notes": "'Hello, World!' is often the first program programmers write when learning a new programming language. JavaScript 'Hello World' is a simple program generally used to demonstrate the basic syntax of the language. This program will make use of different JavaScript methods to print 'Hello World'.",
              "code": "console.log('Hello, World!');"
            },
            {
              "topic": "Using document.write()",
              "notes": "In JavaScript, the simplest way to print 'Hello World' is to use the document.write() method. The document.write() method writes the content (a string of text) directly to the HTML document or web page. Let’s look at the following",
              "code": "<script>\ndocument.write('Hello World')\n</script>"
            },
            {
              "topic": "Example",
              "notes": "Let's try to write a JavaScript program that prints 'Hello World!' to the document or web page. In the below program, we placed the JavaScript code within the <head> section. You can try to put the JavaScript part inside the <body> section and execute the program.",
              "code": "<html>\n<head>\n<script>\ndocument.write('Hello World');\n</script>\n</head>\n<body>\n</body>\n</html>"
            },
            {
              "topic": "Using console.log()",
              "notes": "The console.log() is a very convenient method to print the message to the web Console. It is very useful to debug JavaScript codes in the browsers. Let's look at the simple application of the console.log() to print 'Hello World' to the web console.",
              "code": "<script>\nconsole.log('Hello World')\n</script>"
            },
            {
              "topic": "Example",
              "notes": "Let's try to write a complete JavaScript program with HTML.",
              "code": "<html>\n<head>\n<script>\nconsole.log('Hello World');\n</script>\n</head>\n<body>\n<p> Please open the console before clicking 'Edit & Run' button </p>\n</body>\n</html>\nIt will produce the following message in the web console −\n\nHello World"
            },
            {
              "topic": "Using innerHTML",
              "notes": "The innerHTML property of an HTML element defines the HTML content of the element. We can use this property to display the Hello World message. By changing the innerHTML property of the element, we can display the message in the HTML document or webpage.\n\nTo use the innerHTML property of an element, we need to access that element first. We can use the document.getElementById() method to access the element. Let's look at a complete example.",
              "code": "let message = 'Hello, World!';\nconsole.log(message);"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we define a div element with the id 'output'. We access this element using document.getElementById('output'). Then we change the innerHTML property and display our message 'Hello World'.",
              "code": "<html>\n<head>\n<title>Using innerHTML property</title>\n</head>\n<body>\n<div id='output'></div>\n<script>\ndocument.getElementById('output').innerHTML = 'Hello World';\n</script>\n</body>\n</html>"
            }
          ]
        }
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 6,
      "fields": {
        "module_id": 1,
        "title": "JS Console.log()",
        "description": "",
        "content": {
          "subtopics": [
            {
              "topic": "JavaScript console.log() method",
              "notes": "The console.log() is one of the most important methods in JavaScript. It is used to print the message in the web console.\n\nWe can use the console.log() method to debug the code by printing the output in the console. For example, if the developer requests an API and wants to check the data received as a response, they might use the console.log() method. Also, there are other use cases of the console.log() method.",
              "code": ""
            },
            {
              "topic": "Syntax",
              "notes": "You can follow the syntax below to use the console.log() method −",
              "code": "console.log(msg1, msg2, …, msgN);"
            },
            {
              "topic": "Console.log() with client-sided JavaScript",
              "notes": "Whenever we use the console.log() method in the frontend code, it prints the output in the browser's console.\n\nHere is a shortcut to open the console in Chrome browser −\n\nPress Ctrl + Shift + J together on Windows/Linux and Cmd + Option + J on Mac.\nMost browsers have the same shortcut key to open the console. However, if you can’t open the console in any browser, you may search on Google.\n\nAlternatively, to open the Console, right-click the mouse and follow Inspect -> Console options.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have printed the 'Hello World!' message using the console.log() method.\n\nAlso, we defined two integer variables and used another console.log() method to print the sum of num1 and num2. Here, developers can observe how we have printed variables in the console. The example also demonstrates that we can perform addition, multiplication, etc. operations in the console.log() method parameter.",
              "code": "<html>\n<head>\n<title> Console.log() method with HTML </title>\n</head>\n<body>\n<h3> Message is printed in the console </h3>\n<p> Please open the console before clicking 'Edit & Run' button </p>\n<script>\nconsole.log('Hello World!');\nvar num1 = 30;\nvar num2 = 20;\nconsole.log('The sum of ', num1, ' and ', num2, ' is: ', num1 + num2);\n</script>\n</body>\n</html>\nIt will produce the following result in the Console −\n\nHello World!\nThe sum of  30  and  20  is:  50"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have created a JavaScript object containing the name, domain, and description properties. We have printed the object in the web console using the console.log() method.\n\nIn the console, we can see that it prints the object, and we can expand the object by clicking the arrow given at the start of the object to see the detailed information.",
              "code": "<html>\n<head>\n<title> Console.log() method with HTML </title>\n</head>\n<body>\n<h3> Message is printed in the console </h3>\n<p> Please open the console before clicking 'Edit & Run' button </p>\n<script>\n// Defining the object\nvar obj = {\nwebsite: 'Tutorialspoint',\nDomain: 'www.tutorialspoint.com',\ndescription: 'This site is for learning.'\n};\nconsole.log(obj);\n</script>\n</body>\n</html>"
            },
            {
              "topic": "Console.log() with server-side JavaScript",
              "notes": "The console.log() method with the backend code prints the output in the terminal where the backend server is running.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "We have written the below code printing the ‘Hello World!’ message into the app.js file and used the ‘node app.js’ command in the terminal to run the server. It prints the message in the terminal that we can observe.",
              "code": "let message = 'Hello world!';\nconsole.log(message);\n\nThis will produce the following result −\n\nHello world!\n\nYou can use the console.log() method with frontend and backend code to debug the code by printing output in the console."
            }
          ]
        }
      }
    },
    

    {
      "model": "lessons.lesson",
      "pk": 7,
      "fields": {
        "module_id": 1,
        "title": "JS Comments",
        "description": "JavaScript comments are used to explain the purpose of the code. The comments are not executed as a part of the program and are solely meant for human developers to understand the code better.\n\nYou can use comments for various purposes, such as:\n\n- Explaining the purpose of a particular piece of code.\n- Adding documentation to your code for yourself and others who may read it.\n- Temporarily disabling or 'commenting out' a block of code for testing or debugging without deleting it.\n\nA good developer always writes comments to explain the code.\n\nThere are two common ways to write comments in JavaScript:\n\n- Single-line comments\n- Multi-line comments",
        "content": {
          "subtopics": [
            {
              "topic": "Single-line comments in JavaScript",
              "notes": "We can start a single-line comment with the double forward slash (//). We can write comments between // and the end of the line.\n\nSyntax\nThe syntax for single-line comments is given below",
              "code": "<script>\n// single-line comment message\n</script>"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have explained each step of the JavaScript code using single-line comments. In the output, the code prints the concatenated string.",
              "code": "<html>\n<head>\n<title> Single line comments </title>\n</head>\n<body>\n<script>\n// Defining the string1\nvar string1 = 'JavaScript';\n// Defining the string2\nvar string2 = 'TypeScript';\n// Printing the strings\ndocument.write(string1, ' ', string2);\n</script>\n</body>\n</html>"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have commented the 'bool1 = false;' line to avoid the execution of that code. In the output, we can see that the value of the bool1 variable is true, as we commented out the code that updates the bool1 variable’s value.\n\nAlso, we can add single-line comments after writing the code, as we added after the document.write() method.",
              "code": "<html>\n<head>\n<title> Single line comments </title>\n</head>\n<body>\n<script>\nvar bool1 = true;\n// bool1 = false;\ndocument.write('The value of the bool1 is: ', bool1); // print variable value\n</script>\n</body>\n</html>"
            },
            {
              "topic": "Multi-line comments in JavaScript",
              "notes": "The multi-line comment is useful when we need to comment on multiple lines of code or explain larger codes. We can write multi-line comments between /* and */.\n\nSyntax\nThe syntax for multi-line comments is given below",
              "code": "<script>\n/* First line of comment message\nThe second line of the comment message */\n</script>"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have defined 'a' and 'b' variables. After that, we have written the code to swap the values of 'a' and 'b' in 3 lines and commented it out using multi-line comments.\n\nThe output prints the actual values of 'a' and 'b' as the browser ignores the commented code.",
              "code": "<html>\n<head>\n<title> Multi line comments </title>\n</head>\n<body>\n<script>\nvar a = 100;\nvar b = 200;\n\n/* a = a + b;\nb = a - b;\na = a - b; */\n\ndocument.write('a = ' + a + '<br>' + 'b = ' + b);\n</script>\n</body>\n</html>"
            }
          ]
        }
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 8,
      "fields": {
        "module_id": 1,
        "title": "JS Variables",
        "description": "JavaScript variables are used to store data that can be changed later on. These variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.\n\nBefore you use a variable in a JavaScript program, you must declare it. In JavaScript, you can declare the variables in 4 ways −\n\n- Without using any keywords.\n\n- Using the 'var' keyword.\n\n- Using the 'let' keyword.\n\n- Using the 'const' keyword.\n\nThe let and const keywords were introduced to JavaScript in 2015 (ES6). Prior to ES6, only var keyword was used to declare the variable in JavaScript. In this section, we will discuss 'var' keyword. We will cover the 'let' and 'const' keywords in subsequent chapters.",
        "content": {
          "subtopics": [
            {
              "topic": "Variable Declaration in JavaScript",
              "notes": "You can follow the syntax below to declare the variables without using any keywords.",
              "code": "<script>\nMoney = 10;\nName = \"tutorialspoint\";\n</script>"
            },
            {
              "topic": "",
              "notes": "Furthermore, you can use the var keyword to declare the variables as shown below.",
              "code": "<script>\nvar money;\nvar name;\n</script>"
            },
            {
              "topic": "",
              "notes": "You can also declare multiple variables with the same var keyword as follows",
              "code": "<script>\nvar money, name;\n</script>"
            },
            {
              "topic": "Variable Initialization using the Assignment Operator",
              "notes": "Storing a value in a variable is called variable initialization. You can do variable initialization at the time of variable creation or at a later point in time when you need that variable.\n\nFor instance, you might create a variable named money and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows.",
              "code": "<script>\nvar name = \"Ali\";\nvar money;\nmoney = 2000.50;\n</script>"
            },
            {
              "topic": "",
              "notes": "Note − Use the var keyword only for declaration or initialization, once for the life of any variable name in a document. You should not re-declare the same variable twice.\n\nJavaScript is an untyped language. This means that a JavaScript variable can hold a value of any data type. Unlike many other languages, you don't have to tell JavaScript during variable declaration what type of value the variable will hold. The value type of a variable can change during the execution of a program and JavaScript takes care of it automatically.",
              "code": ""
            },
            {
              "topic": "JavaScript Data Types",
              "notes": "In JavaScript, the variable can hold the value of the dynamic data type. For example, you can store the value of number, string, boolean, object, etc. data type values in JavaScript variables.",
              "code": "<script>\nvar num = 765; // Number\nvar str = \"Welcome\"; // String\nvar bool = false; // Boolean\n</script>"
            },
            {
              "topic": "JavaScript Variable Names (Identifiers)",
              "notes": "In JavaScript, a unique character sequence is used to name the variables called identifiers.\n\nHere are some rules for the naming of the identifiers in JavaScript −\n\nValid characters − In JavaScript, a variable name can contain digits, alphabetical characters, and special characters like underscore (_) and dollar sign ($). JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, 123test is an invalid variable name but _123test is a valid one.\n\nCase sensitivity − Variable names are case sensitive. It means Name and name are different identifiers.\n\nUnicode support − The identifiers can also contain the Unicode. So, developers may define variables in any language.\n\nReserved keywords − You should not use any of the JavaScript reserved keywords as a variable name. For example, break or boolean variable names are not valid. Here, we have given a full list of the JavaScript reserved keywords.",
              "code": "let name = 'John'; \nlet age = 30; \nlet person = { name: 'John', age: 30 };"
            },
            {
              "topic": "JavaScript Dollar Sign ($) and Under Score (_)",
              "notes": "You can use the $ and _ to define the variables in JavaScript, as the JavaScript engine considers it a valid character.\n\nExample (Demonstrating the identifiers)\nIn this example, we have defined the variables using the var keyword. The first variable name starts with the underscore, and the second variable name starts with the dollar sign. Programmers can uncomment the third variable declaration to check the error generated by JavaScript when we start any identifier with the digit.",
              "code": "<html>\n<head>\n<title> Variables in JavaScript </title>\n</head>\n<body>\n<script>\nvar _abc = \"Hi!\";\nvar $abc = \"Hello!\";\n// var 9abc = \"Bye!\";  // This is invalid\ndocument.write(\"_abc \" + _abc + \"<br>\");\ndocument.write(\"$abc = \" + $abc + \"<br>\");\n</script>\n</body>\n</html>\nIt produces the following result −\n\n_abc Hi!\n$abc = Hello!"
            },
            {
              "topic": "Undefined Variable Value in JavaScript",
              "notes": "When you don't initialize the variable after declaring, it contains the undefined value. However, you can also assign the undefined value to the variable.\n\nLet's look at the example below.\n\nExample",
              "code": "<html>\n<body>\n<script>\nvar num;\ndocument.write(\"The value of num is: \" + num + \"<br/>\");\n</script>\n</body>\n</html>\nThis produces the following result −\n\nThe value of num is: undefined"
            },
            {
              "topic": "JavaScript Variable Scope",
              "notes": "The scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.\n\nGlobal Variables − A global variable has global scope which means it can be defined anywhere in your JavaScript code.\n\nLocal Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.\n\nWithin the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look into the following example.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have defined the variable named myVar outside the function and initialized it with the 'global' value. Also, we have defined the variable with the same identifier inside the checkscope() function and initialized it with the 'local' value.\n\nWe print the myVar variable's value inside the function. So, the local variable takes preference over the global variable and prints the 'local' in the output.",
              "code": "<html>\n<head>\n<title> JavaScript Variable Scope Example</title>\n</head>\n<body onload = \"checkscope();\">\n<script>\nvar myVar = \"global\"; // Declare a global variable\nfunction checkscope() {\nvar myVar = \"local\"; // Declare a local variable\ndocument.write(myVar);\n}\n</script>\n</body>\n</html>\nThis produces the following result −\n\nlocal"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have defined the variables without using the var keyword. The name variable contains the value of the string type, and the number variable contains the value of the float data type.\n\nWhen we define the variables without using any keyword, JavaScript considers them global variables and can use them anywhere inside the code.",
              "code": "<html>\n<head>\n<title> Variables without var keyword </title>\n</head>\n<body>\n<script>\nname = \"tutorialspoint\"; // String type variable\nnumber = 10.25; // Number type variable\ndocument.write(\"name = \" + name + \", number = \" + number + \"<br>\");\n</script>\n</body>\n</html>"
            },
            {
              "topic": "",
              "notes": "This produces the following result −\n\nname = tutorialspoint, number = 10.25\nAlso, the identifier doesn't lose the previous value if we declare the variable using the var keyword with the value and re-declare the same identifier without initialization. Let’s understand it via the example below.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have declared the age variable and initialized it with 10. Again, we have declared the age variable but haven’t initialized it. Still, it prints 10 in the output because it doesn’t lose the previous initialization’s value. However, if we update the value of the age variable, it successfully updates it.",
              "code": "<html>\n<head>\n<title> Variables with var keyword </title>\n</head>\n<body>\n<script>\nvar age = 10;\nvar age;\ndocument.write(\"age = \" + age + \"<br>\");\n</script>\n</body>\n</html>\nThis produces the following result −\n\nage = 10"
            }
          ]
        }
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 9,
      "fields": {
        "module_id": 1,
        "title": "JS Let Statement",
        "description": "Learn about the let statement in JavaScript.",
        "content": {
          "subtopics": [
            {
              "topic": "What is JavaScript let statement?",
              "notes": "The JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This means a variable declared with let is only accessible within the block of code in which it is defined.\n\nThe let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.\n\nThe main reason behind introducing the let keyword is to improve the scoping behaviors of variables and the safety of the code.\n\nVariable Declaration with let statement\nFollowing is the syntax to declare a variable with let statement.\nLet's have a look at some examples for variable declaration with let.",
              "code": "let name = 'John';\nlet age = 35;\nlet x = true;"
            },
            {
              "topic": "JavaScript Block Scope vs. Function Scope",
              "notes": "The scope of the variable declared with the let keyword is block-scoped. It means if you define the variable with the let keyword in a specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.",
              "code": "{\n  let x = 'John';\n}\n// here x can't be accessed"
            },
            {
              "topic": "",
              "notes": "The var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.",
              "code": "function foo() {\n  if (true) {\n    let x = 5;\n    var y = 10;\n  }\n  // here x can't be accessed while y is accessible\n}"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.\n\nWe defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.",
              "code": "<html>\n<head>\n  <title> Variable declaration with let keyword </title>\n</head>\n<body>\n  <script>\n    let x = 10;\n    var y = 20;\n    function test() {\n      let x = 50;\n      var y = 100;\n      document.write('x = ' + x + ', y = ' + y + '<br/>');\n    }\n    test();\n  </script>\n</body>\n</html>"
            },
            {
              "topic": "Example",
              "notes": "In the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.\n\nWe print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has block scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.",
              "code": "<html>\n<head>\n  <title> Variable declaration with let keyword </title>\n</head>\n<body>\n  <script>\n    function test() {\n      let bool = true;\n      if (bool) {\n        let x = 30;\n        var y = 40;\n        document.write('x = ' + x + ', y = ' + y + '<br/>');\n      }\n      // x can't be accessible here\n      document.write('y = ' + y + '<br/>');\n    }\n    test();\n  </script>\n</body>\n</html>"
            },
            {
              "topic": "Redeclaring Variables in JavaScript",
              "notes": "You can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name in different blocks within the same function.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "In the example below, you can observe that variables declared with the let keyword can’t be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.\n\nThe code prints the value of the newly declared variable in the output.",
              "code": "<html>\n<head>\n  <title> Variable redeclaring </title>\n</head>\n<body>\n  <script>\n    function test() {\n      if (1) {\n        let m = 70;\n        // let m = 80; // redeclaration with let keyword is not possible\n        var n = 80;\n        var n = 90; // redeclaration with var keyword is possible\n        document.write('m = ' + m + ', n = ' + n);\n      }\n    }\n    test();\n  </script>\n</body>\n</html>"
            },
            {
              "topic": "Variable Hoisting",
              "notes": "The hoisting behavior of JavaScript moves the declaration of the variables to the top of the code. The let keyword doesn't support hoisting, but the var keyword does.",
              "code": ""
            },
            {
              "topic": "Example",
              "notes": "In the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.",
              "code": "<html>\n<head>\n  <title> Variable hoisting </title>\n</head>\n<body>\n  <script>\n    function test() {\n      // Hoisting is not supported by let keyword\n      // m = 100;\n      // document.write('m = ' + m + '<br/>');\n      // let m;\n      n = 50;\n      document.write('n = ' + n + '<br/>');\n      var n;\n    }\n    test();\n  </script>\n</body>\n</html>"
            }
          ]
        }
      }
    },
    

    {
      "model": "lessons.lesson",
      "pk": 10,
      "fields": {
        "module_id": 1,
        "title": "JS Constants",
        "description": "JavaScript constants are the variables whose values remain unchanged throughout the execution of the program. You can declare constants using the const keyword.\n\nThe const keyword is introduced in the ES6 version of JavaScript with the let keyword. The const keyword is used to define variables having constant references. A variable defined with const can't be redeclared or reassigned. The const declaration has block as well as function scope.",
        "content": {
          "subtopics": [
            {
              "topic": "Declaring JavaScript Constants",
              "notes": "You always need to assign a value at the time of declaration if the variable is declared using the const keyword.",
              "code": "const x = 10;"
            },
            {
              "topic": "",
              "notes": "In any case, you can't declare variables with the const keyword without initialization.",
              "code": "const y; // Incorrect way\ny = 20;"
            },
            {
              "topic": "Can't be Reassigned",
              "notes": "You can't update the value of variables declared with the const keyword.",
              "code": "const y = 20;\ny = 40; // This is not possible"
            },
            {
              "topic": "Block Scope",
              "notes": "A JavaScript variable declared with the const keyword has block-scope. This means the same variable is treated as different outside the block.\n\nIn the example below, the x declared within the block is different from the x declared outside the block. So we can redeclare the same variable outside the block.",
              "code": "{\n  const x = \"john\";\n}\nconst x = \"Doe\";"
            },
            {
              "topic": "",
              "notes": "But we can't redeclare the const variable within the same block.",
              "code": "{\n  const x = \"john\";\n  const x = \"Doe\"; // incorrect\n}"
            },
            {
              "topic": "Constant Arrays and Objects in JavaScript",
              "notes": "We can declare arrays and objects using the const keyword, but there is a little twist in array and object declaration.\n\nThe variable with the const keyword keeps a constant reference but not a constant value. So, you can update the same array or object declared with the const keyword, but you can't reassign the reference of the new array or object to the constant variable.",
              "code": ""
            },
            {
              "topic": "Example (Constant Arrays)",
              "notes": "In the example below, we have defined the array named 'arr' using the const keyword. After that, we update the array element at the 0th index and insert the 'fence' string at the end of the array.\n\nIn the output, you can observe that it prints the updated array.",
              "code": "<html>\n<head>\n  <title> Constant Arrays </title>\n</head>\n<body>\n  <script>\n    // Defining the constant array\n    const arr = [\"door\", \"window\", \"roof\", \"wall\"];\n    // Updating arr[0]\n    arr[0] = \"gate\";\n    // Inserting an element to the array\n    arr.push(\"fence\");\n    // arr = [\"table\", \"chair\"] // reassigning array will cause an error.\n    // Printing the array\n    document.write(arr);\n  </script>\n</body>\n</html>\nWhen you execute the above code, it will produce the following result −\ngate,window,roof,wall,fence"
            },
            {
              "topic": "Example (Constant Objects)",
              "notes": "In the below example, we created the 'obj' object with the const keyword. Next, we update the 'animal' property of the object and insert the 'legs' property in the object. In the output, the code prints the updated object.",
              "code": "<html>\n<head>\n  <title> Constant Objects </title>\n</head>\n<body>\n  <script>\n    // Defining the constant object\n    const obj = {\n      animal: \"Lion\",\n      color: \"Yellow\"\n    };\n    // Changing animal name\n    obj.animal = \"Tiger\";\n    // Inserting legs property\n    obj.legs = 4;\n    // Printing the object\n    document.write(JSON.stringify(obj));\n    // obj = { name: \"cow\" } // This is not possible\n  </script>\n</body>\n</html>\nIt will produce the following result −\n{\"animal\":\"Tiger\",\"color\":\"Yellow\",\"legs\":4}"
            },
            {
              "topic": "No Const Hoisting",
              "notes": "Variables defined with the const keyword are not hoisted at the top of the code.\n\nIn the example below, the const variable x is accessed before it is defined. It will cause an error. We can catch the error using try-catch statement.",
              "code": "<html>\n<body>\n  <script>\n    try {\n      document.write(x);\n    } catch (e) {\n      document.write(e.message);\n    }\n    const x = 10;\n  </script>\n</body>\n</html>"
            },
            {
              "topic": "",
              "notes": "Here are some other properties of the variables declared with the const keyword:\n\n- Block scope.\n- It can't be redeclared in the same scope.\n- Variables declared with the const keyword can't be hoisted at the top of the code.\n- Constant variables value is a primitive value.",
              "code": ""
            },
            {
              "topic": "Which should you use among var, let, and const?",
              "notes": "For block scope, you should use the let keyword.\nIf you need to assign a constant reference to any value, use the const keyword.\nWhen you require to define the variable inside any particular block, like a loop, 'if statement', etc. and need to access it outside the block but inside the function, you may use the var keyword.\nHowever, you can use any keyword to define global variables.\nRedeclaring variables is not a good practice. So, you should avoid it, but if necessary, you may use the var keyword.",
              "code": ""
            }
          ]
        }
      }
    },
    
    {
      "model": "lessons.lesson",
      "pk": 11,
      "fields": {
          "module_id": 1,
          "title": "JS Data Types",
          "description": "Data types in JavaScript refer to the types of the values that we are storing or working with. One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the types of values that can be represented and manipulated in a programming language.\n\nJavaScript data types can be categorized as primitive and non-primitive (object). JavaScript (ES6 and higher) allows you to work with seven primitive data types −\n\n- Strings of text, e.g., \"This text string\"\n- Numbers, e.g., 123, 120.50\n- Boolean, e.g., true or false\n- null\n- undefined\n- BigInt\n- Symbol\n\nBigInt and Symbol are introduced in ES6. In ES5, there were only five primitive data types.\n\nIn addition to these primitive data types, JavaScript supports a composite data type known as an object. We will cover objects in detail in a separate chapter.\n\nThe Object data type contains the following sub-data types −\n\n- Object\n- Array\n- Date",
          "content": {
              "subtopics": [
                  {
                      "topic": "Why are data types important?",
                      "notes": "In any programming language, data types are important for operation manipulation.\n\nFor example, the below code generates the “1010” output.\n\n```javascript\nlet sum = \"10\" + 10;\n```\nHere, the JavaScript engine converts the second operand to a string and combines it using the '+' operator rather than adding them.\n\nSo, you need to ensure that the type of operands is correct.\n\nNow, let's learn about each data type with examples."
                  },
                  {
                      "topic": "JavaScript String",
                      "notes": "In JavaScript, a string is a sequence of characters and can be created using 3 different ways given below −\n\n- Using single quotes\n- Using double quotes\n- Using backticks"
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we have created strings using single quotes, double quotes, and backticks. In the output, it prints the same result for all 3 strings.",
                      "code": "<html>\n<head>\n<title>JavaScript String</title>\n</head>\n<body>\n<script>\nlet str1 = \"Hello World!\"; // Using double quotes\nlet str2 = 'Hello World!'; // Using single quotes\nlet str3 = `Hello World!`; // Using backticks\ndocument.write(str1 + \"<br>\");\ndocument.write(str2 + \"<br>\");\ndocument.write(str3 + \"<br>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Number",
                      "notes": "A JavaScript number is always stored as a floating-point value (decimal number).\n\nJavaScript does not make a distinction between integer values and floating-point values.\n\nJavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we demonstrate JavaScript numbers with and without decimal points.",
                      "code": "<html>\n<head>\n<title>JavaScript Number</title>\n</head>\n<body>\n<script>\nlet num1 = 10; // Integer\nlet num2 = 10.22; // Floating point number\ndocument.write(\"The value of num1 is \" + num1 + \"<br/>\");\ndocument.write(\"The value of num2 is \" + num2);\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "Example (Exponential notation of numbers)",
                      "notes": "JavaScript also supports exponential notation of numbers. We have explained this in the below example code.",
                      "code": "<html>\n<head>\n<title>JavaScript Number Exponential Notation</title>\n</head>\n<body>\n<script>\nlet num1 = 98e4; // 980000\nlet num2 = 98e-4; // 0.0098\ndocument.write(\"The value of num1 is: \" + num1 + \"<br/>\");\ndocument.write(\"The value of num2 is: \" + num2);\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Boolean",
                      "notes": "Boolean represents one of two values: true or false.",
                      "code": "<html>\n<head>\n<title>JavaScript Boolean</title>\n</head>\n<body>\n<script>\nlet bool1 = true;\nlet bool2 = false;\ndocument.write(\"The value of bool1 is \" + bool1 + \"<br/>\");\ndocument.write(\"The value of bool2 is \" + bool2 + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Undefined",
                      "notes": "When you declare a variable but don't initialize it, it contains an undefined value. However, you can manually assign an undefined value to the variable also.",
                      "code": "<html>\n<head>\n<title>JavaScript Undefined</title>\n</head>\n<body>\n<script>\nlet houseNo; // Contains undefined value\nlet apartment = \"Ajay\";\napartment = undefined; // Assigning the undefined value\ndocument.write(\"The value of house No is: \" + houseNo + \"<br/>\");\ndocument.write(\"The value of apartment is: \" + apartment + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Null",
                      "notes": "When any variable's value is unknown, you can use null. It is good practice to use null for the empty or unknown value rather than undefined.",
                      "code": "<html>\n<head>\n<title>JavaScript Null</title>\n</head>\n<body>\n<script>\nlet houseNo = null; // Unknown house number\nlet apartment = \"B-2\";\napartment = null; // Updating the value to null\ndocument.write(\"The value of houseNo is: \" + houseNo + \"<br/>\");\ndocument.write(\"The value of apartment is: \" + apartment + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript BigInt",
                      "notes": "JavaScript stores only 64-bit long floating point numbers. If you want to store a very large number, you should use BigInt. You can create BigInt by appending 'n' to the end of the number.",
                      "code": "<html>\n<head>\n<title>JavaScript BigInt</title>\n</head>\n<body>\n<script>\nlet largeNum = 1245646564515635412348923448234842842343546576876789n;\ndocument.write(\"The value of largeNum is \" + largeNum + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Symbol",
                      "notes": "The Symbol data type is introduced in the ES6 version of JavaScript. It is used to create unique primitive and immutable values.\n\nThe Symbol() constructor can be used to create a unique symbol, and you may pass a string as a parameter of the Symbol() constructor."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we created the sym1 and sym2 symbols for the same string. After that, we compared the value of sym1 and sym2, and it gave a false output. It means both symbols are unique.",
                      "code": "<html>\n<head>\n<title>JavaScript Symbol</title>\n</head>\n<body>\n<script>\nlet sym1 = Symbol(\"123\");\nlet sym2 = Symbol(\"123\");\nlet res = sym1 === sym2;\ndocument.write(\"Is sym1 and sym2 the same? \" + res + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Object",
                      "notes": "In JavaScript, the object data type allows us to store a collection of data in key-value format. There are multiple ways to define an object, which we will see in the Objects chapter.\n\nHere, we will create an object using object literals."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we used '{}' (Object literals) to create an obj object. The object contains the 'animal' property with the string value, the 'legs' property with the number value, and the value of the 'color' variable is assigned to the 'horseColor' property.\n\nThe JSON.stringify() method converts the object to strings and shows it in the output.",
                      "code": "<html>\n<head>\n<title>JavaScript Object</title>\n</head>\n<body>\n<script>\nlet color = \"Brown\";\nconst obj = {\n   animal: \"Horse\",\n   legs: 4,\n   horseColor: color\n}\ndocument.write(\"The given object is: \" + JSON.stringify(obj) + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Array",
                      "notes": "In JavaScript, an array is a list of elements of different data types. You can create an array using two square brackets '[]' and insert multiple comma-separated values inside the array.",
                      "code": "<html>\n<head>\n<title>JavaScript Array</title>\n</head>\n<body>\n<script>\nconst colors = [\"Brown\", \"Red\", \"Pink\", \"Yellow\", \"Blue\"];\ndocument.write(\"The given array is: \" + colors + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "JavaScript Date",
                      "notes": "You can use the JavaScript Date object to manipulate the date."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we used the Date() constructor to create a date. In the output, you can see the current date and time according to your time zone.",
                      "code": "<html>\n<head>\n<title>JavaScript Date</title>\n</head>\n<body>\n<script>\nlet date = new Date();\ndocument.write(\"The today's date and time is: \" + date + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "Dynamic Types",
                      "notes": "JavaScript is a dynamically typed language like Python and Ruby. So, it decides the variable's data type at runtime but not at compile time. We can initialize or reassign the value of any data type to the JavaScript variables."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we initialized the first variable with the string value. After that, we updated its values to the number and boolean value.",
                      "code": "<html>\n<head>\n<title>JavaScript Dynamic Data Type</title>\n</head>\n<body>\n<script>\nlet first = \"One\"; // it is string\nfirst = 1; // now it's Number\ndocument.write(\"The value of the first variable is \" + first + \"<br/>\");\nfirst = true; // now it's Boolean\ndocument.write(\"The value of the first variable is \" + first + \"<br/>\");\n</script>\n</body>\n</html>"
                  },
                  {
                      "topic": "Checking Data Types Using the typeof Operator",
                      "notes": "The typeof operator allows you to check the type of the variable."
                  },
                  {
                      "topic": "Example",
                      "notes": "In the example below, we used the typeof operator to check the data type of various variables.",
                      "code": "<html>\n<head>\n<title>typeof Operator</title>\n</head>\n<body>\n<script>\nlet num = 30;\nlet str = \"Hello\";\nlet bool = true;\ndocument.write(\"The data type of num is: \" + typeof num + \"<br/>\");\ndocument.write(\"The data type of str is: \" + typeof str + \"<br/>\");\ndocument.write(\"The data type of bool is: \" + typeof bool + \"<br/>\");\n</script>\n</body>\n</html>"
                  }
              ]
          }
      }
  },
  
  {
   "model": "lessons.lesson",
   "pk": 12,
   "fields": {
       "module_id": 1,
       "title": "JS Type Conversion",
       "description": "Type Conversions in JavaScript refer to the automatic or explicit process of converting data from one data type to another in JavaScript. These conversions are essential for JavaScript to perform operations and comparisons effectively. JavaScript variables can contain the values of any data type as it is a weakly typed language.\n\nThere are two types of type conversion in JavaScript −\n\nImplicit type conversion\nExplicit type conversion\n\nThe implicit type conversion is also known as coercion.",
       "content": {
           "subtopics": [
               {
                   "topic": "Implicit Type Conversion",
                   "notes": "When type conversion is done by JavaScript automatically, it is called implicit type conversion. For example, when we use the '+' operator with the string and number operands, JavaScript converts the number to a string and concatenates it with the string.\n\nHere are some examples of the implicit type conversion.",
                   "code": ""
               },
               {
                   "topic": "Converting to String (Implicit conversion)",
                   "notes": "In this example, we used the '+' operator to implicitly convert different values to the string data type.",
                   "code": "\"100\" + 24; // Converts 24 to string\n'100' + false; // Converts false boolean value to string\n\"100\" + null; // Converts null keyword to string"
               },
               {
                   "topic": "",
                   "notes": "Please note that to convert a value to string using '+' operator, one operand should be string.\n\nLet's try the example below, and check the output ",
                   "code": "<html>\n<head>\n<title>Implicit conversion to string</title>\n</head>\n<body>\n<script>\ndocument.write(\"100\" + 24 + \"<br/>\");\ndocument.write('100' + false + \"<br/>\");\ndocument.write(\"100\" + null+ \"<br/>\");\ndocument.write(\"100\" + undefined+ \"<br/>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Converting to Number (Implicit conversion)",
                   "notes": "When you use the string values containing the digits with the arithmetic operators except for the '+' operator, it converts operands to numbers automatically and performs the arithmetic operation, which you can see in the example below.\n\nBoolean values also get converted to a number.",
                   "code": "'100' / 50; // Converts '100' to 100\n'100' - '50'; // Converts '100' and '50' to 100 and 50\n'100' * true; // Converts true to 1\n'100' - false; // Converts false to 0\n'tp' / 50 // Converts 'tp' to NaN"
               },
               {
                   "topic": "",
                   "notes": "Try the example below and check the output",
                   "code": "<html>\n<head>\n<title>Implicit conversion to Number</title>\n</head>\n<body>\n<script>\ndocument.write(('100' / 50) + \"<br>\");\ndocument.write(('100' - '50') + \"<br>\");\ndocument.write(('100' * true) + \"<br>\");\ndocument.write(('100' - false) + \"<br>\");\ndocument.write(('tp' / 50) + \"<br>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Converting to Boolean (Implicit conversion)",
                   "notes": "When you use the Nullish (!!) operator with any variable, it implicitly converts its value to the boolean value.",
                   "code": "num = !!0; // !0 = true, !!0 = false\nnum = !!1; // !1 = false, !!1 = true\nstr = !!\"\"; // !\"\" = true, !!\"\" = false\nstr = !!\"Hello\"; // !\"Hello\" = false, !!\"Hello\" = true"
               },
               {
                   "topic": "Null to Number (Implicit conversion)",
                   "notes": "In JavaScript, the null represents the empty. So, null automatically gets converted to 0 when we use it as an operand of the arithmetic operator.",
                   "code": "let num = 100 + null; // Converts null to 0\nnum = 100 * null; // Converts null to 0"
               },
               {
                   "topic": "Undefined with Number and Boolean (Implicit conversion)",
                   "notes": "Using the undefined with the 'number' or 'boolean' value always gives the NaN in the output. Here, NaN means not a number.",
                   "code": "<html>\n<head>\n<title>Using undefined with a number and boolean value</title>\n</head>\n<body>\n<script>\nlet num = 100 + undefined; // Prints NaN\ndocument.write(\"The value of the num is: \" + num + \"<br>\");\nnum = false * undefined; // Prints NaN\ndocument.write(\"The value of the num is: \" + num + \"<br>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Explicit Type Conversion",
                   "notes": "In many cases, programmers are required to convert the data type of the variable manually. It is called the explicit type conversion.\n\nIn JavaScript, you can use the constructor functions or built-in functions to convert the type of the variable.",
                   "code": ""
               },
               {
                   "topic": "Converting to String (Explicit conversion)",
                   "notes": "You can use the String() constructor to convert the numbers, boolean, or other data types into the string.",
                   "code": "String(100); // number to string\nString(null); // null to string\nString(true); // boolean to string"
               },
               {
                   "topic": "Example",
                   "notes": "You can use the String() constructor function to convert a value to the string. You can also use typeof operator to check the type of the resultant value.",
                   "code": "<html>\n<head>\n<title>Converting to string explicitly</title>\n</head>\n<body>\n<script>\ndocument.write(typeof String(100) + \"<br/>\");\ndocument.write(typeof String(null)+ \"<br/>\");\ndocument.write(typeof String(true) + \"<br/>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "",
                   "notes": "We can also use the toString() method of Number object to convert number to string.",
                   "code": "const num = 100;\nnum.toString() // Converts 100 to '100'"
               },
               {
                   "topic": "Converting to Number (Explicit conversion)",
                   "notes": "You can use the Number() constructor to convert a string into a number. We can also use unary plus (+) operator to convert a string to number.",
                   "code": "Number('100'); // Converts '100' to 100\nNumber(false); // Converts false to 0\nNumber(null); // Converts null to 0\nnum = +\"200\"; // Using the unary operator"
               },
               {
                   "topic": "",
                   "notes": "Convert a string to a float using the parseFloat() function.",
                   "code": "However, you can also use the below methods and variables to convert the string into numbers.\nparseFloat() - To extract the floating point number from the string.\nparseInt() - To extract the integer from the string.\n+ - It is an unary operator."
               },
               {
                   "topic": "Example",
                   "notes": "You can use the Number() constructor function or unary (+) operator to convert a string, boolean, or any other value to a number.\n\nThe Number() function also converts the exponential notation of a number to a decimal number.",
                   "code": "<html>\n<head>\n<title>Converting to number explicitly</title>\n</head>\n<body>\n<script>\ndocument.write(Number(\"200\") + \"<br/>\");\ndocument.write(Number(\"1000e-2\") + \"<br/>\");\ndocument.write(Number(false) + \"<br/>\");\ndocument.write(Number(null) + \"<br/>\");\ndocument.write(Number(undefined) + \"<br/>\");\ndocument.write(+\"200\" + \"<br/>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Converting to Boolean (Explicit conversion)",
                   "notes": "You can use the Boolean() constructor to convert the other data types into Boolean.",
                   "code": "Boolean(100); // Converts number to boolean (true)\nBoolean(0); // 0 is falsy value (false)\nBoolean(\"\"); // Empty string is falsy value (false)\nBoolean(\"Hi\"); // Converts string to boolean (true)\nBoolean(null); // null is falsy value (false)"
               },
               {
                   "topic": "Example",
                   "notes": "You can use the Boolean() constructor to convert values to the Boolean. All false values like 0, empty string, null, undefined, etc., get converted to false and other values are converted to true.",
                   "code": "<html>\n<head>\n<title>Converting to boolean explicitly</title>\n</head>\n<body>\n<script>\ndocument.write(Boolean(100) + \"<br/>\");\ndocument.write(Boolean(0) + \"<br/>\");\ndocument.write(Boolean(\"\") + \"<br/>\");\ndocument.write(Boolean(\"Hi\") + \"<br/>\");\ndocument.write(Boolean(null) + \"<br/>\");\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Converting Date to String/Number",
                   "notes": "You can use the Date object's Number() constructor or getTime() method to convert the date string into the number. The numeric date represents the total number of milliseconds since 1st January 1970.\n\nFollow the syntax below to convert the date into a number.",
                   "code": "Number(date);\nOR\ndate.getTime();"
               },
               {
                   "topic": "",
                   "notes": "You can use the String() constructor or the toString() method to convert the date into a string.\n\nFollow the syntax below to convert the date into the string.",
                   "code": "String(date);\nOR\ndate.toString();"
               },
               {
                   "topic": "",
                   "notes": "Let's try to demonstrate this with the help of a program.",
                   "code": "<html>\n<head>\n<title>Converting date to string / number</title>\n</head>\n<body>\n<script>\nlet date = new Date();\nlet numberDate = date.getTime();\ndocument.write(\"The Numeric date is: \" + numberDate + \"<br/>\");\nlet dateString = date.toString();\ndocument.write(\"The string date is: \" + dateString + \"<br/>\");\n</script>\n</body>\n</html>"
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 13,
   "fields": {
       "module_id": 1,
       "title": "JS Strict Mode",
       "description": "In JavaScript, the strict mode is introduced in the ES5 (ECMAScript 2009). The purpose behind introducing the \"strict mode\" is to make the JavaScript code more secure.\n\nThe 'use strict' literal expression is used to add the strict mode in the JavaScript code. It removes the silent errors from the code, such as you can't use the variable without declaration, you can't modify the readable property of the object, etc.",
       "content": {
           "subtopics": [
               {
                   "topic": "Enabling Strict Mode",
                   "notes": "To enable strict mode, you should write the following literal expression to the top of your code",
                   "code": "'use strict';\nThe 'use strict' directive is used enable JavaScript's strict mode."
               },
               {
                   "topic": "Why Use the Strict Mode?",
                   "notes": "Here, we have listed some reasons for using the strict JavaScript mode −\n\nError Prevention − The strict mode prevents the common errors which developers make while writing the JavaScript code, such as initializing the variable without declaration or using the reserved keywords as an identifier.\nSafer Code − The strict mode prevents the creation of global variables accidentally. Also, it doesn't allow to use of statements like 'with', which can lead to vulnerability in the code.\nFuture Compatibility − You can align your code with the future versions of JavaScript by using the script mode. For example, the current version of JavaScript doesn't contain keywords like 'public' but is reserved for future versions. So, the strict mode won't allow you to use it as an identifier from now.",
                   "code": ""
               },
               {
                   "topic": "Strict Mode in the Global Scope",
                   "notes": "When you add the 'use strict' at the top of the JavaScript code; it uses the strict mode for the whole code.",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "In the example below, we have defined the 'y' variable and initialized it with the 50. The code prints the value of 'y' in the output.\n\nAlso, we initialized the variable 'x' without declaring it. So, it gives the error in the console and doesn't print the output.\n\nIn short, the strict mode doesn't allow you to use the variable without its declaration.",
                   "code": "<html>\n<head>\n<title> Using the strict mode globally </title>\n</head>\n<body>\n<script>\n\"use strict\";\nlet y = 50; // This is valid\ndocument.write(\"The value of the X is: \" + y);\nx = 100; // This is not valid\ndocument.write(\"The value of the X is: \" + x);\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Strict Mode in the Local Scope",
                   "notes": "You can also use the \"strict mode\" inside the particular function. So, it will be applied only in the function scope. Let's understand it with the help of an example.",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "In the example below, we used the 'use strict' literal only inside the test() function. So, it removes the unusual errors from the function only.\n\nThe code below allows you to initialize the variable without declaring it outside the function but not inside it.",
                   "code": "<html>\n<head>\n<title> Using the strict mode globally </title>\n</head>\n<body>\n<script>\nx = 100; // This is valid\ndocument.write(\"The value of the X is - \" + x);\nfunction test() {\n\"use strict\";\ny = 50; // This is not valid\ndocument.write(\"The value of the y is: \" + x);\n}\ntest();\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "",
                   "notes": "1. You can't initialize the variable with a value without declaring it.",
                   "code": "<script>\n'use strict';\nnum = 70.90; // This is invalid\n</script>"
               },
               {
                   "topic": "",
                   "notes": "2. Similarly, you can't use the object without declaring it.",
                   "code": "<script>\n'use strict';\nnumObj = {a: 89, b: 10.23}; // This is invalid\n</script>"
               },
               {
                   "topic": "",
                   "notes": "3. You can't delete objects using the delete keyword.",
                   "code": "<script>\n'use strict';\nlet women = { name: \"Aasha\", age: 29 };\ndelete women; // This is invalid\n</script>"
               },
               {
                   "topic": "",
                   "notes": "4. You can't delete the object prototype in the strict mode.",
                   "code": "<script>\n'use strict';\nlet women = { name: \"Aasha\", age: 29 };\ndelete women.prototype; // This is invalid\n</script>"
               },
               {
                   "topic": "",
                   "notes": "5. Deleting the function using the delete operator is not allowed.",
                   "code": "<script>\n'use strict';\nfunction func() { }\ndelete func; // This is invalid\n</script>"
               },
               {
                   "topic": "",
                   "notes": "6. You can't have a function with duplicate parameter values.",
                   "code": "<script>\n'use strict';\nfunction func(param1, param1, param2) {\n// Function with 2 param1 is not allowed!\n}\n</script>"
               },
               {
                   "topic": "",
                   "notes": "7. You can't assign octal numbers to variables.",
                   "code": "<script>\n'use strict';\nlet octal = 010; // Throws an error\n</script>"
               },
               {
                   "topic": "",
                   "notes": "8. You can't use escape characters.",
                   "code": "<script>\n'use strict';\nlet octal = \\010; // Throws an error\n</script>"
               },
               {
                   "topic": "",
                   "notes": "9. You can't use reserved keywords like eval, arguments, public, etc., as an identifier",
                   "code": "<script>\n'use strict';\nlet public = 100; // Throws an error\n</script>"
               },
               {
                   "topic": "",
                   "notes": "10. In the strict mode, when you use the 'this' keyword inside the function, it refers to the reference object through which the function is invoked. If the reference object is not specified, it refers to the undefined value.",
                   "code": "<script>\n'use strict';\nfunction test() {\nconsole.log(this); // Undefined\n}\ntest();\n</script>"
               }
           ]
       }
   }
},

 {
    "model": "lessons.lesson",
    "pk": 14,
    "fields": {
        "module_id": 1,
        "title": "JS Reserved Keywords",
        "description": "The reserved keywords in JavaScript are predefined keywords used to serve the built-in functionality of the programming language. For example, the var and let keywords are used to define variables, the function keyword is used to define the functions, etc. JavaScript contains more than fifty reserved keywords.\n\nIn simple terms, you can't use the reserved keywords as an identifier. If you do, you will get the conflicts, and the code will generate the wrong output or throw an error.",
        "content": {
            "subtopics": [
                {
                    "topic": "Introduction to Reserved Keywords",
                    "notes": "Reserved keywords are words that cannot be used as identifiers (e.g., variables, functions, or labels).",
                    "code": ""
                },
                {
                    "topic": "List of Reserved Keywords",
                    "notes": "A list of reserved keywords in JavaScript.",
                    "code": "abstract, arguments, await, boolean, break, byte, case, catch, char, class, const, continue, debugger, default, delete, do, double, else, enum, eval, export, extends, false, final, finally, float, for, function, goto, if, implements, import, in, instanceof, int, interface, let, long, native, new, null, package, private, protected, public, return, short, static, super, switch, synchronized, this, throw, throws, transient, true, try, typeof, var, void, volatile, while, with, yield"
                },
                {
                    "topic": "Using Keywords as Identifiers",
                    "notes": "Keywords cannot be used as identifiers in JavaScript.",
                    "code": "let for = 5; // This will cause an error"
                },
                {
                    "topic": "Future Reserved Keywords",
                    "notes": "Some keywords are reserved for future use.",
                    "code": ""
                },
                {
                    "topic": "Strict Mode and Reserved Keywords",
                    "notes": "In strict mode, using certain keywords will cause an error.",
                    "code": ""
                },
                {
                    "topic": "Best Practices for Reserved Keywords",
                    "notes": "Best practices for avoiding reserved keywords.",
                    "code": ""
                },
                {
                    "topic": "Common Mistakes with Keywords",
                    "notes": "Common mistakes made when using keywords.",
                    "code": ""
                },
                {
                    "topic": "Reserved Keywords in Other Languages",
                    "notes": "Comparison of reserved keywords in JavaScript and other programming languages.",
                    "code": ""
                },
                {
                    "topic": "Examples of Reserved Keywords",
                    "notes": "Examples of using reserved keywords in JavaScript.",
                    "code": "let newVariable = 10; // new is a reserved keyword, so we use newVariable"
                },
                {
                    "topic": "Avoiding Reserved Keywords",
                    "notes": "How to avoid using reserved keywords in your code.",
                    "code": ""
                }
            ]
        }
    }
},
{
   "model": "lessons.lesson",
   "pk": 15,
   "fields": {
       "module_id": 2,
       "title": "JS Operators",
       "description": "Learn about the different operators in JavaScript.",
       "content": {
           "subtopics": [
               {
                   "topic": "Introduction to Arithmetic Operators",
                   "notes": "Arithmetic operators are used to perform mathematical operations.",
                   "code": ""
               },
               {
                   "topic": "Addition Operator",
                   "notes": "The addition operator (+) adds numbers.",
                   "code": "let sum = 5 + 10;"
               },
               {
                   "topic": "Subtraction Operator",
                   "notes": "The subtraction operator (-) subtracts numbers.",
                   "code": "let difference = 10 - 5;"
               },
               {
                   "topic": "Multiplication Operator",
                   "notes": "The multiplication operator (*) multiplies numbers.",
                   "code": "let product = 5 * 10;"
               },
               {
                   "topic": "Division Operator",
                   "notes": "The division operator (/) divides numbers.",
                   "code": "let quotient = 10 / 5;"
               },
               {
                   "topic": "Modulus Operator",
                   "notes": "The modulus operator (%) returns the division remainder.",
                   "code": "let remainder = 10 % 3;"
               },
               {
                   "topic": "Increment Operator",
                   "notes": "The increment operator (++) increases a number by one.",
                   "code": "let x = 5; x++;"
               },
               {
                   "topic": "Decrement Operator",
                   "notes": "The decrement operator (--) decreases a number by one.",
                   "code": "let x = 5; x--;"
               },
               {
                   "topic": "Unary Negation Operator",
                   "notes": "The unary negation operator (-) negates a number.",
                   "code": "let x = -5;"
               },
               {
                   "topic": "Unary Plus Operator",
                   "notes": "The unary plus operator (+) attempts to convert the operand to a number.",
                   "code": "let x = +'5';"
               }
           ]
       }
   }
},
{
   "model": "lessons.lesson",
   "pk": 16,
   "fields": {
       "module_id": 2,
       "title": "JS Arithmetic Operators",
       "description": "Learn about the different arithmetic operators in JavaScript.",
       "content": {
           "subtopics": [
               {
                   "topic": "Introduction to Operators",
                   "notes": "In JavaScript, an operator is a symbol that performs an operation on one or more operands, such as variables or values, and returns a result. Let us take a simple expression 4 + 5 is equal to 9. Here 4 and 5 are called operands, and ‘+’ is called the operator.\n\nJavaScript supports the following types of operators.\n\n- Arithmetic Operators\n- Comparison Operators\n- Logical (or Relational) Operators\n- Bitwise Operators\n- Assignment Operators\n- Miscellaneous Operators\n\nLets have a look on all operators one by one.",
                   "code": ""
               },
               {
                   "topic": "JavaScript Arithmetic Operators",
                   "notes": "The JavaScript arithmetic operators are used to perform mathematical calculations such as addition, multiplication, subtraction, division, etc. on numbers. JavaScript supports the following arithmetic operators −\n\nAssume variable x holds 10 and variable y holds 20, then −\n\n| Operator  | Description                              | Example       |\n| --------- | ---------------------------------------- | ------------- |\n| + (Addition) | Adds two operands.                      | x + y will give 30. |\n| - (Subtraction) | Subtracts the second operand from the first. | x - y will give -10. |\n| * (Multiplication) | Multiplies both operands.                 | x * y will give 200. |\n| / (Division) | Divides the numerator by the denominator. | y / x will give 2. |\n| % (Modulus) | Outputs the remainder of an integer division. | y % x will give 0 |\n| ++ (Increment) | Increases an integer value by one.        | x++ will give 11. |\n| -- (Decrement) | Decreases an integer value by one.        | x-- will give 9. |",
                   "code": ""
               },
               {
                   "topic": "JavaScript Comparison Operators",
                   "notes": "The JavaScript comparison operators compare two values and returns a boolean result (true or false). JavaScript supports the following comparison operators −\n\nAssume variable x holds 10 and variable y holds 20, then −\n\n| Operator  | Description                                            | Example        |\n| --------- | ------------------------------------------------------ | -------------- |\n| == (Equal) | Checks if the value of two operands is equal or not. If yes, then the condition becomes true. | (x == y) is not true. |\n| != (Not Equal) | Checks if the value of two operands is equal or not. If the values are not equal, then the condition becomes true. | (x != y) is true. |\n| === (Strict equality) | It checks whether the value and data type of the variable is equal or not. If yes, then the condition becomes true. | (x === y) is not true. |\n| !== (Strict inequality) | It checks whether the value and data type of the variable is equal or not. If the values are not equal, then the condition becomes true. | (x !== y) is true. |\n| > (Greater than) | Checks if the value of the left operand is greater than the value of the right operand. If yes, then the condition becomes true. | (x > y) is not true. |\n| < (Less than) | Checks if the value of the left operand is less than the value of the right operand. If yes, then the condition becomes true. | (x < y) is true. |\n| >= (Greater than or Equal to) | Checks if the value of the left operand is greater than or equal to the value of the right operand. If yes, then the condition becomes true. | (x >= y) is not true. |\n| <= (Less than or Equal to) | Checks if the value of the left operand is less than or equal to the value of the right operand. If yes, then the condition becomes true. | (x <= y) is true. |",
                   "code": "let x = 3 + 5 * 2; // 13, not 16"
               },
               {
                   "topic": "JavaScript Arithmetic Operators",
                   "notes": "Arithmetic operators in JavaScript perform mathematical calculations on numeric values (operands). Most of the arithmetic operators are binary operators as they perform calculations on two operands. Some arithmetic operators are unary operators. The unary operators perform computation on a single operand.\n\nJavaScript supports many arithmetic operators such as addition, subtraction, multiplication, division operators, etc. It uses the common symbols for arithmetic operators such as \"+\" for addition, \"-\" for subtraction, \"*\" for multiplication, \"/ \" for division etc.\n\nThe operands can be literals, variables or the expression.",
                   "code": "var z = 3 + 5;  // 3 and 5 are literal values.\nconst x = 3; y = 5;\nvar z = x + y ; // x and y are variables.\nvar z = 3 + 2*x  // expression"
               },
               {
                   "topic": "",
                   "notes": "In general, arithmetic operators are used to perform mathematical operations but they can be used for other operations as well. For example, the addition operator (+) can be used for string concatenation.\n\nHere, we have given a table containing the mathematical operators and explaining the functionality of each operator.\n\n| Operator  | Name        | Description                           |\n| --------- | ----------- | ------------------------------------- |\n| +         | Addition    | Adds two operands                     |\n| -         | Subtraction | Subtracts the second operand from the first |\n| *         | Multiplication | Multiply both operands                   |\n| /         | Division    | Divide the numerator by the denominator |\n| %         | Modulus     | Outputs the remainder of an integer division |\n| ++        | Increment   | Increases an integer value by one     |\n| --        | Decrement   | Decreases an integer value by one     |",
                   "code": ""
               },
               {
                   "topic": "JavaScript Addition (+) Operator",
                   "notes": "The JavaScript addition (+) operator adds two numeric operands. It is denoted by the plus (+) symbol.",
                   "code": "var x = 5, y = 10;\nvar sum = x + y;"
               },
               {
                   "topic": "",
                   "notes": "This operator can also be used to concatenate strings and/or numbers.",
                   "code": "var z = '10' + 3  // returns 103\nvar z = '10' + '3'  // returns 103\n\n- If one operand is string, the addition operator converts the other operand to string and concatenate it with first operand.\n- If both the operands are string, it just concatenates the second operand to the first operand.\n- If both operands are numeric values, it will return the numeric value."
               },
               {
                   "topic": "Example",
                   "notes": "In the below example, we demonstrate adding two decimal numbers and concatenating the strings and numbers.",
                   "code": "<html>\n<body>\n   <script>\n      const x = 3; y = 5;\n      var z = x + y ;\n      document.write(z +\"</br>\");\n      var z = '10' + 3 \n      document.write(z +\"</br>\");\n      var z = '10' + '3';\n      document.write(z +\"</br>\");\n   </script>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Subtraction (-) Operator",
                   "notes": "JavaScript subtraction (-) operator subtracts the right operand from the left operand and produces their difference. It is denoted by the minus (-) symbol.\n\n| Example     | Result      |\n| ----------- | ----------- |\n| 20 - 10     | returns 10  |\n| '20' - 10   | returns 10  |\n| '20' - '10' | returns 10  |\n| '20ee' - 10 | returns NaN |\n| NaN - 10    | returns NaN |\n| Infinity - 10 | returns infinity |\n\n- The subtraction operator uses numeric operands but can also be used for non-numeric operands such as strings.\n- If both operands are numbers, then resultant is number.\n- If any or both operands are strings (containing only numbers), it first converts the strings to number and then performs subtraction operations.\n- If string contains non numeric value, it will return NaN.\n- If any operand is NaN or Infinity, the result will be NaN or Infinity respectively.",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "In the below example, we demonstrate the subtraction two decimal numbers and of other datatypes.",
                   "code": "<html>\n<body>\n   <script>\n      var x = 20, y = 10;\n      var z = x - y ;\n      document.write(z +\"</br>\");\n      var z = '20' - 10;\n      document.write(z +\"</br>\");\n      var z = '20' - '10';\n      document.write(z +\"</br>\");\n      var z = '20ee' - 10;\n      document.write(z +\"</br>\");\n      var z = NaN - 10;\n      document.write(z +\"</br>\");\n      var z = Infinity - 10;\n      document.write(z +\"</br>\");\n   </script>\n</body>\n</html>"
               }
           ]
       }
   }
},


{
   "model": "lessons.lesson",
   "pk": 17,
   "fields": {
       "module_id": 2,
       "title": "JS Comparison Operators",
       "description": "The comparison operators in JavaScript compare two variables or values and return a boolean value, either true or false based on comparison result. For example, we can use the comparison operators to check whether two operands are equal or not.\n\nThe comparison operators are used in logical expressions. A logical expression is evaluated to either true or false.\n\nThe comparison operators are binary operators as they perform operations on two operands. The operands can be numerical, string, logical, or object values.\n\nThere are eight comparison operators in JavaScript to perform different types of comparison. Here, we have given a table explaining each comparison operator with the example.",
       "content": {
           "subtopics": [
               {
                   "topic": "How comparison is done?",
                   "notes": "If both operands are of same type, the comparison operators compare the values. However, if the operands are of different types, JavaScript performs appropriate type conversion for the comparison. This is known as type coercion.\n\nThe comparison is done by checking the numerical values of the operands if both the operands are numbers. The strings are compared based on lexicographical ordering, using Unicode values. The following type coercion is done when a string is compared with a number.\n\n- If the string contains only numeric value, it is converted to number type.\n\n- If the string contains non-numeric values as well, it will be converted to NaN.\n\n- If the string is empty, it is converted to zero.\n\nThe strict equality (===) and strict inequality (!==) operators perform strict comparison. These operators don't perform type conversion before performing the comparison operation.",
                   "code": ""
               },
               {
                   "topic": "Dealing with falsy values",
                   "notes": "There are some falsy values in JavaScript. JavaScript deals with these falsy values differently while performing the comparison. Followings are the falsy values −\n-  0 (zero)\n- false\n- '' or \"\" (Empty String)\n- null\n- undefined\n- NaN\n\nAll comparison operators (except === and !==) convert false and empty string to zero before performing the comparison.\n\nIn addition to the above, the less and greater than operators (<, <=, >, >=) convert null to zero and undefined to NaN.",
                   "code": ""
               },
               {
                   "topic": "JavaScript Equality (==) Operator",
                   "notes": "The 'equality' operator checks if the value of two operands is equal or not. It returns true if the operands are equal, otherwise it returns false. If the operands are of different types, it performs type conversion and then compares the operands.\n\nLet’s look at some examples of comparison with no type conversion. The both operands are of the same type.",
                   "code": "const a = 10;\nconst b = 20;\na == 10; // true\na == b; // false\n\"Hello\" == \"Hello\"; // true"
               },
               {
                   "topic": "",
                   "notes": "Now let’s check some examples of comparison with type conversion. Here the operands are of different types.",
                   "code": "5 == '5'; // true\n0 == false; // true\n0 == ''; // true\n\nIn the first example above, '5' is converted to 5 (string to number conversion). The false and empty string (' '), are converted to zero (0) before comparison."
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the equality operator in JavaScript −",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a == b);\n  document.getElementById(\"output\").innerHTML = \"(a == b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Inequality (!=) Operator",
                   "notes": "The 'inequality' operator checks if the values of two operands are not equal. It returns true if the operands are not equal, otherwise it returns false. Same as the equality operator, type conversion is performed if the operands are not of the same type.\n\nIn the example below, two values of the same type are compared for inequality check. If the values are not equal, the inequality operator will return true.\n\n10 != 10; // false\n10 != 20; // true\n\"Hello\" != \"Hello\"; // false\n\nLet’s check for inequality when the operands are of different types\n\n10 != '10'; // false\n0 != false; // false\n\nHere in the first example, '10' is typecasted to 10. Here string is converted to number type. In the second example, false (Boolean value) is converted to zero (number).",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the inequality operator in JavaScript.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a != b);\n  document.getElementById(\"output\").innerHTML = \"(a != b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Strict Equality (===) Operator",
                   "notes": "The 'strict equality' operator checks whether the values and data types of the two operands are equal or not. It returns true if both operands are equal and of the same type.\n\nIn other words, it checks the equality of the operands without the type conversion. If the operands are of different types, it returns false without further checking the value.",
                   "code": "10 === 10; // true\n10 === 20; // false\n\"Hello\" === \"Hello\"; // true\n10 === '10'; // false\n0 === false; // false"
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the strict equality operator in JavaScript.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a === b);\n  document.getElementById(\"output\").innerHTML = \"(a === b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "Strict Inequality (!==) Operator",
                   "notes": "The 'strict inequality' operator checks whether the two operands are not equal in value or type. It returns true if the operands are of the same type but not equal or are of different types.\n\nSame as the strict equality operator, it also first checks the inequality of operands without type conversion. If the operands are of different types, it will return true without further checking the value.",
                   "code": "10 !== 10; // returns false\n10 !== 20; // returns true\n\"Hello\" !== \"Hello\"; // returns false\n10 !== '10'; // returns true\n0 !== false; // returns true"
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the strict inequality operator in JavaScript.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a !== b);\n  document.getElementById(\"output\").innerHTML = \"(a !== b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Greater Than (>) Operator",
                   "notes": "The 'greater than' operator checks if the value of the left operand is greater than the value of the right operand. If yes, it returns true; otherwise, it returns false.",
                   "code": "20 > 10; // true\n10 > 10; // false\n\"ab\" > \"aa\"; // true\n10 > '5'; // true"
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the greater than operator in JavaScript −",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a > b);\n  document.getElementById(\"output\").innerHTML = \"(a > b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "Greater Than or Equal (>=) Operator",
                   "notes": "The 'greater than or equal' operator checks if the value of the left operand is greater than or equal to the value of the right operand. If yes, it returns true; otherwise, it returns false.",
                   "code": "10 >= 5; // true\n5 >= 5; // true\n\"ab\" >= \"aa\"; // true\n10 >= '5'; // true"
               },
               {
                   "topic": "Example",
                   "notes": "The following code shows how to use the greater than or equal to operator in JavaScript.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const a = 10;\n  const b = 20;\n  let result = (a >= b);\n  document.getElementById(\"output\").innerHTML = \"(a >= b) => \" + result;\n</script>\n<p> Set the variables to different values and then try...</p>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Less Than (<) Operator",
                   "notes": "The 'less than' operator returns true if the value of the left operand is less than the value of the right operand; otherwise, it returns false.",
                   "code": "10 < 20; // true\n5 < 5; // false\n\"ab\" < \"aa\"; // true\n10 < '5'; // false"
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 18,
   "fields": {
       "module_id": 2,
       "title": "JS Logical Operators",
       "description": "The logical operators in JavaScript are generally used with Boolean operands and return a boolean value. There are mainly three types on logical operators in JavaScript - && (AND), || (OR), and ! (NOT). These operators are used to control the flow the program.\n\nAlthough the logical operators are typically used with Boolean values, they can be used with any type. For each non-boolean value, the operator converts to a boolean. The falsy values are converted to false and truthy values to true.\n\nThere are six falsy values in JavaScript: false, null, undefined, 0 (zero), '' (empty string), NaN. The value other than falsy values are treated as truthy values. So non zero numbers, non-empty strings, etc., are truthy values.\n\nThe && and || operators return the value of one of the operands based on condition. So if the operands are non-boolean, they return a non-boolean value. The ! operator always returns a Boolean value.\n\nThe operands may be literals, variables or expressions. These are first evaluated to boolean equivalent before performing the logical operation.\n\nIn the below table, we have given the logical operators with its description and example. Let’s assume: x = true, y = false.",
       "content": {
           "subtopics": [
               {
                   "topic": "JavaScript Logical AND (&&) Operator",
                   "notes": "The logical AND (&&) operator evaluates the operands from left to right. If the first operand can be converted to false, it will return the value of the first operand, otherwise it will return the value of the second operand.\n\nx && y\nIn the above expression if x is a falsy value then it will return the value of x otherwise it will return the value of y.\n\nThe above rule is followed for all types of operands, whether they are Boolean values, numbers or strings, etc.\n\nLet's first discuss with Boolean operands. In general, for a set of Boolean operands, it will return true if both operands are true else it returns false.\n\n- true && true; // returns true\n- true && false; // returns false\n- false && true; // returns false\n- false && false; // returns false\n\nFor number operands, the && operator will return the first operand if it is falsy values (0, -0, and 0n), otherwise second operand.\n\n- 0 && 10; // returns 0\n- 10 && 20; // returns 20 \n- 20 && 0; // returns 0\n\nFor string values, empty string is converted to false and non-empty string to true. Look at the below example.",
                   "code": "let str1 = '';\nlet str2 = 'Hello';\nlet str3 = 'World';\nconsole.log(str1 && str2); // returns '' empty string\nconsole.log(str2 && str3); // returns World"
               },
               {
                   "topic": "Example",
                   "notes": "Now let's look at an example of a logical expression.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const x = 3;\n  const y = -2;\n  document.getElementById(\"output\").innerHTML = x > 0 && y > 2;\n</script>\n</body>\n</html>\nHere x > 0 is evaluated to true and y > 2 is evaluated to false. And the final expression becomes true && false which is evaluated as false."
               },
               {
                   "topic": "Logical OR Operator",
                   "notes": "The logical OR operator (||) returns true if at least one operand is true.",
                   "code": "let result = true || false; // true"
               },
               {
                   "topic": "Multiple && Operators",
                   "notes": "If we have multiple && operators in an expression, the && operator evaluates the expression from left to right and it converts each operand to a boolean value. If the result is false, then it returns the value of that operand and terminates the execution. If all the operands are truthy then it returns the value of the last operand.",
                   "code": "10 && null && false; // returns null\ntrue && 10 && 20; // returns 20"
               },
               {
                   "topic": "JavaScript Logical OR (||) Operator",
                   "notes": "The logical OR (||) operator also evaluates the operands from left to right. If the first operand can be converted to true, it will return the value of the first operand, otherwise it will return the value of the second operand.\n\nx || y\nIn the above expression if x is a truthy value then it will return the value of x otherwise it will return the value of y.\n\nAs || is a logical operator but it can be applied to any type of operand not only boolean.\n\nLet's first discuss with Boolean operands. In general, for a set of Boolean operands, it will return false if both operands are false else it returns true.\n\n- true || true; // returns true\n- true || false; // returns true\n- false || true; // returns true\n- false || false; // returns false\n\nFor number operands, the || operator will return the first operand if it is truthy values (other than 0, -0, and 0n), otherwise second operand.\n\n- 0 || 10; // returns 10\n- 10 || 20; // returns 10\n- 20 || 0; // returns 20\n\nFor string values, empty string is converted to false and non-empty string to true. Look at the below example.",
                   "code": "let result = (true && false) || true; // true"
               },
               {
                   "topic": "Example",
                   "notes": "",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  let str1 = '';\n  let str2 = 'Hello';\n  let str3 = 'World';\n  document.getElementById(\"output\").innerHTML = str1 || str2 + '<br>' + str2 || str3;\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Example",
                   "notes": "Now let's look at an example with expression −",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  const x = 3;\n  const y = -2;\n  document.getElementById(\"output\").innerHTML = x > 0 || y > 2;\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Multiple || Operators",
                   "notes": "We may have multiple || operators in an expression. The || operator evaluates the expression from left to right and it converts each operand to a boolean value. If the result is true, then it returns the value of that operand and terminates the execution. If all the operands are falsy then it returns the value of the last operand.",
                   "code": "null || 10 || false // returns 10\nfalse || null || undefined // returns undefined"
               },
               {
                   "topic": "JavaScript Logical NOT (!) Operator",
                   "notes": "",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  document.getElementById(\"output\").innerHTML = !true + '<br>' + !false + '<br>' + !0 + '<br>' + !20 + '<br>' + !('Hello World');\n</script>\n</body>\n</html>\n\nlet x = false; x ||= true; // x is true"
               },
               {
                   "topic": "Logical Operators Precedence",
                   "notes": "An expression may have more than one logical operator in JavaScript. In such situations, the operators are evaluated on the basis of their precedence. The NOT (!) operator has the highest precedence. Then AND (&&) operator has the higher precedence than OR (||) operator.\n\n- Logical NOT (!)\n- Logical AND (&&)\n- Logical OR (||)",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n  document.getElementById(\"output\").innerHTML = (false || true && !false); // returns true\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "Short Circuit Evaluation",
                   "notes": "Logical expressions are evaluated from left to right. These are tested for short-circuit evaluation. Following is the rule of short circuit evaluation −\n\n- false && any_value returns false\n- true || any_value returns true\n\nThe any_value part is not evaluated so it doesn't have any effect on final result.",
                   "code": ""
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 19,
   "fields": {
       "module_id": 2,
       "title": "JS Bitwise Operators",
       "description": "The bitwise operators in JavaScript perform operations on the integer values at the binary level. They are used to manipulate each bit of the integer values. Bitwise operators are similar to logical operators but they work on individual bits.\n\nJavaScript bitwise operators works on 32-bits operands. In JavaScript, numbers are stored as 64-bit floating point number. JavaScript converts the numbers to 32-bit signed integer before performing the operation. After bitwise operation, it converts the result to 64-bits number.\n\nThere are seven bitwise operators in JavaScript. Following is the list of bitwise operators with description.",
       "content": {
           "subtopics": [
               {
                   "topic": "Introduction to Bitwise Operators",
                   "notes": "Bitwise operators perform operations on binary representations of numbers.",
                   "code": ""
               },
               {
                   "topic": "Bitwise AND Operator",
                   "notes": "The bitwise AND operator (&) returns a 1 in each bit position for which the corresponding bits of both operands are 1.",
                   "code": "let result = 5 & 1; // 1"
               },
               {
                   "topic": "Bitwise OR Operator",
                   "notes": "The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1.",
                   "code": "let result = 5 | 1; // 5"
               },
               {
                   "topic": "Bitwise XOR Operator",
                   "notes": "The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1.",
                   "code": "let result = 5 ^ 1; // 4"
               },
               {
                   "topic": "Bitwise NOT Operator",
                   "notes": "The bitwise NOT operator (~) inverts the bits of its operand.",
                   "code": "let result = ~5; // -6"
               },
               {
                   "topic": "Bitwise Left Shift Operator",
                   "notes": "The bitwise left shift operator (<<) shifts the bits of its first operand to the left by the number of positions specified by the second operand.",
                   "code": "let result = 5 << 1; // 10"
               },
               {
                   "topic": "Bitwise Right Shift Operator",
                   "notes": "The bitwise right shift operator (>>) shifts the bits of its first operand to the right by the number of positions specified by the second operand.",
                   "code": "let result = 5 >> 1; // 2"
               },
               {
                   "topic": "Bitwise Zero-Fill Right Shift Operator",
                   "notes": "The bitwise zero-fill right shift operator (>>>) shifts the bits of its first operand to the right by the number of positions specified by the second operand, filling in zeros from the left.",
                   "code": "let result = 5 >>> 1; // 2"
               },
               {
                   "topic": "Using Bitwise Operators",
                   "notes": "How to use bitwise operators in JavaScript.",
                   "code": "let x = 5; let y = 1; let result = x & y;"
               },
               {
                   "topic": "Bitwise Operator Applications",
                   "notes": "Common applications of bitwise operators.",
                   "code": ""
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 20,
   "fields": {
       "module_id": 2,
       "title": "Assignment Operators in JavaScript",
       "description": "Learn about assignment operators in JavaScript.",
       "content": {
           "subtopics": [
               {
                   "topic": "Arithmetic Assignment Operators",
                   "notes": "In this section, we will cover simple assignment and arithmetic assignment operators. An arithmetic assignment operator performs arithmetic operation and assigns the result to a variable. Following is the list of operators with example −",
                   "code": ""
               },
               {
                   "topic": "Simple Assignment (=) Operator",
                   "notes": "A simple assignment (=) operator assigns a value to a variable. We can assign a single value to multiple variables. This is known as assignment chaining.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 5;\n    let y = x + 10; \n    document.getElementById(\"output\").innerHTML = \n    \"Value of x : \" + x + \"<br>\" +\n    \"Value of y : \" + y;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Addition Assignment (+=) Operator",
                   "notes": "The JavaScript addition assignment operator performs addition on the two operands and assigns the result to the left operand. Here addition may be numeric addition or string concatenation.\n\nx += b;\nIn the above statement, it adds values of b and x and assigns the result to x.",
                   "code": ""
               },
               {
                   "topic": "Example: Numeric Addition Assignment",
                   "notes": "",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 5;\n    x += 7;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Example: String Concatenation Assignment",
                   "notes": "",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x =\"Hello\";\n    x += \" World\";\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Multiplication Assignment (*=) Operator",
                   "notes": "The multiplication assignment operator in JavaScript multiplies both operands and assigns the result to the left operand.\n\nlet x *= b;\nIn the above statement, it multiplies x and b and assigns the result to x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 10;\n    x *= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Division Assignment (/=) Operator",
                   "notes": "This operator divides left operand by the right operand and assigns the result to left operand.\n\nlet x /= b;\nIn the above statement, it divides x by b and assigns the result (quotient) to x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 10;\n    x /= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Remainder Assignment (%=) Operator",
                   "notes": "The JavaScript remainder assignment operator performs the remainder operation on the operands and assigns the result to left operand.\n\nlet x %= b;\nIn the above statement, it divides x by b and assigns the result (remainder) to x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 12;\n    x %= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Exponentiation Assignment (**=) Operator",
                   "notes": "This operator performs exponentiation operation on the operands and assigns the result to left operand.\n\nlet x **= b;\nIn the above statement, it computes x**b and assigns the result to x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 5;\n    x **= 3;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Bitwise Assignment Operators",
                   "notes": "A bitwise assignment operator performs bitwise operation on the operands and assigns the result to a variable. These operations perform two operations, first a bitwise operation and second the simple assignment operation. Bitwise operation is done on bit-level. A bitwise operator treats both operands as 32-bit signed integers and performs the operation on corresponding bits of the operands. The simple assignment operator assigns the result to the variable (left operand).\n\nFollowing is the list of operators with example",
                   "code": ""
               },
               {
                   "topic": "Bitwise AND Assignment Operator",
                   "notes": "The JavaScript bitwise AND assignment (&=) operator performs bitwise AND operation on the operands and assigns the result to the left operand (variable).\n\nlet x &= b;\nIn the above statement, it performs bitwise AND on x and b and assigns the result to the variable x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 7;\n    x &= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Bitwise OR Assignment Operator",
                   "notes": "The JavaScript bitwise OR assignment (|=) operator performs bitwise OR operation on the operands and assigns the result to the left operand (variable).\n\nlet x |= b;\nIn the above statement, it performs bitwise OR on x and b and assigns the result to the variable x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 7;\n    x |= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "Bitwise XOR Assignment Operator",
                   "notes": "The JavaScript bitwise XOR assignment (^=) operator performs bitwise XOR operation on the operands and assigns the result to the left operand (variable).\n\nlet x ^= b;\nIn the above statement, it performs bitwise XOR on x and b and assigns the result to the variable x.",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    let x = 7;\n    x ^= 5;\n    document.getElementById(\"output\").innerHTML = \"Value of x : \" + x;\n  </script>\n</body>\n</html>"
               },
               {
                   "topic": "JavaScript Logical Assignment Operators",
                   "notes": "In JavaScript, a logical assignment operator performs a logical operation on the operands and assigns the result to a variable (left operand). Each logical assignment operator is a combination of two operators: the first is a logical operator and the second is a simple assignment operator.\n\nFollowing is the list of the logical assignment operators with example",
                   "code": "<html>\n<body>\n  <div id=\"output\"></div>\n  <script>\n    var a = 5;\n    var b = 10;\n    var result = (a &&= b);\n    document.getElementById(\"output\").innerHTML = \n    \"Value of (a &&= b) => \" + result + \"<br/>\";\n    result = (a ||= b);\n    document.getElementById(\"output\").innerHTML +=\n    \"Value of (a ||= b) => \" + result;\n  </script>\n</body>\n</html>"
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 21,
   "fields": {
       "module_id": 2,
       "title": "JS Conditional Operators",
       "description": "The conditional operator in JavaScript first evaluates an expression for a true or false value and then executes one of the two given statements depending upon the result of the evaluation. The conditional operator is also known as the ternary operator.\n\nThe JavaScript conditional (ternary) operator is the only operator that takes three operands – a condition followed by a question mark (?), then the first expression to be executed if the condition is truthy followed by a colon (:), and finally the second expression to be executed if the condition is falsy.\n\nThere are six falsy values in JavaScript. These are − 0 (zero), false, empty string ('' or \"\"), null, undefined, and NaN. All other values are treated as truthy in JavaScript.\n\nSyntax\n\nFollowing is the syntax of conditional (ternary) operator in JavaScript −\n\nvar variable = condition ? exp1 : exp2;\n\nParameters\n\nHere, we have explained the parameters in the above statement.\n\n- condition − It is a conditional statement.\n- exp1 − If the conditional statement evaluates truthy, control flow executes the exp1 expression.\n- exp2 − If the conditional statement evaluates falsy, control flow executes the exp2 expression.\n\nIf the value of the condition is any falsy value, the result of the expression will be the value of exp2; otherwise, it will be the value of exp1.",
       "content": {
           "subtopics": [
               {
                   "topic": "Example",
                   "notes": "In the example below, we compare the value of the num1 and num2 variables in the conditional statement. Here, the conditional statement evaluates true, so the result variable contains the value of the first expression.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n   var num1 = 90;\n   var num2 = 67;\n   var res = num1 > num2 ? \"num1 is greater than num2\" : \"num2 is greater than num1\";\n   document.getElementById(\"output\").innerHTML = res;\n</script>\n</body>\n</html>\n\nIt will produce the following result −\n\nnum1 is greater than num2"
               },
               {
                   "topic": "Example",
                   "notes": "In the example below, we assign the value to the object property according to the conditional statement’s result.\n\nNow, imagine what if you need to write the if-else statement to assign value to each property conditionally. The code will become complex, but with the ternary operator, you can easily do it with a single line of code.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n   const year = 2004;\n   const obj = {\n      name: \"John\",\n      age: year < 2005 ? \"adult\" : \"minor\",\n      city: \"New York\"\n   };\n\n   document.getElementById(\"output\").innerHTML = obj.name + \" is \" + obj.age + \" and lives in \" + obj.city;\n</script>\n</body>\n</html>\n\nIt will produce the following result −\n\nJohn is adult and lives in New York"
               },
               {
                   "topic": "Example",
                   "notes": "This example demonstrates that you can also use the expression instead of values. According to the conditional statement, control flow evaluates the first or second expression and assigns the resultant value to the 'result' variable.",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n   let operator = '-';\n   let res = operator == '+' ? 10 + 20 : 10 - 20;\n   document.getElementById(\"output\").innerHTML = \"The result is: \" + res;\n</script>\n</body>\n</html>\n\nIt will produce the following result −\n\nThe result is: -10"
               },
               {
                   "topic": "Handling null values",
                   "notes": "We can use the JavaScript conational operator to handle null value to set a default value if the user passes a null value.",
                   "code": ""
               },
               {
                   "topic": "Example",
                   "notes": "",
                   "code": "<html>\n<body>\n<div id=\"output\"></div>\n<script>\n   const greet = (user) => {\n      const name = user ? user.name : \"stranger\";\n      return `Hello, ${name}`;\n   };\n   document.getElementById(\"output\").innerHTML = greet({ name: \"John\" }) + \"<br>\" + greet(null);\n</script>\n</body>\n</html>"
               },
               {
                   "topic": "",
                   "notes": "It will produce the following result −\n\nHello, John\nHello, stranger",
                   "code": ""
               }
           ]
       }
   }
},

{
   "model": "lessons.lesson",
   "pk": 22,
   "fields": {
       "module_id": 2,
       "title": "JS Typeof Operator",
       "description": "The typeof operator in JavaScript is a unary operator used to get the data type of a particular variable. It is placed before its single operand, which can be of any type. It returns a string value indicating the data type of its operand. JavaScript contains primitive and non-primitive data types.\n\nThere are seven primitive or basic data types in JavaScript – number, string, boolean, undefined, null, symbol, and bigint. There is also a composite data type called object. The object data type contains three sub data types – Object, Array, and Date.\n\nSyntax\nFollowing is the syntax of the typeof operator −\n\ntypeof (operand);\n\nWe can write the operand without parentheses as follows −\n\ntypeof operand;\n\nParameter\noperand − It can be a value, variable, or expression representing the object or primitive. In JavaScript, primitives are data that are not objects and have no methods or properties.\n\nReturn Value\nIt returns the string value representing the data type of the operand.",
       "content": {
           "subtopics": [
               {
                   "topic": "Datatypes Returned by typeof Operator",
                   "notes": "There are seven primitive data types in JavaScript – number, string, boolean, bigint, undefined, null, and symbol. The typeof operator is useful to identify these primitive or basic data types.\n\nThe typeof operator returns the same data type for all primitive values except null. It returns 'object' for null values.\n\nFor objects, dates, and arrays, it returns 'object' as the data type.\n\nFor functions and classes, it returns 'function' as the data type.\n\nLet's use the typeof operator to identify these data types one by one.",
                   "code": "typeof 10; // returns 'number'\ntypeof 'Hello World'; // returns 'string'\ntypeof true; // returns 'boolean'\ntypeof {name: 'Tutorialspoint'}; // returns 'object'\ntypeof function foo(){}; // returns 'function'\ntypeof undefined; // returns 'undefined'\ntypeof null; // returns 'object'\ntypeof Symbol(); // returns 'symbol'\ntypeof 10n; // returns 'bigint'"
               },
               {
                   "topic": "JavaScript typeof Operator to Check Number Type",
                   "notes": "In JavaScript, the number type represents numeric values. JavaScript uses a floating-point representation for all numbers. The JavaScript typeof operator returns 'number' for all types of numbers such as integers, floating points, zero, Infinity, NaN, etc.",
                   "code": "typeof 10; // returns 'number'\ntypeof -10; // returns 'number'\ntypeof 0; // returns 'number'\ntypeof 10.20; // returns 'number'\ntypeof Math.LN10; // returns 'number'\ntypeof Infinity; // returns 'number'\ntypeof NaN; // returns 'number'\ntypeof Number('1'); // returns 'number'\ntypeof Number('hello'); // returns 'number'"
               },
               {
                   "topic": "Example",
                   "notes": "",
                   "code": "<html>\n<body>\n   <p>Using typeof operator to check number data type</p>\n   <div id=\"output\"></div>\n   <script>\n      let num = 42;\n      document.getElementById(\"output\").innerHTML = typeof num;\n   </script>\n   <p>Set the variable to a different value and then try...</p>\n</body>\n</html>\nOutput\nUsing typeof operator to check number data type\nnumber\nSet the variable to a different value and then try..."
               },
               {
                   "topic": "JavaScript typeof Operator to Check String Type",
                   "notes": "Strings represent sequences of characters. The typeof operator helps identify string variables. The JavaScript typeof operator returns 'string' for all types of strings, such as empty string, string of characters, string words, multiline string, etc.",
                   "code": "typeof '10'; // returns 'string'\ntypeof ''; // returns 'string'\ntypeof 'Hello World'; // returns 'string'\ntypeof String(10); // returns 'string'\ntypeof typeof 2; // returns 'string'"
               },
               {
                   "topic": "Example",
                   "notes": "In the example below, we use the typeof operator to check the string data type.",
                   "code": "<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      let str = 'Hello World';\n      document.getElementById(\"output\").innerHTML = typeof str;\n   </script>\n   <p>Set the variable</p>\n"

               },
               {
                   "topic": "JavaScript typeof Operator to Check Function Type",
                   "notes": "Functions are first-class citizens in JavaScript. The JavaScript typeof operator returns 'function' for all types of functions. Interestingly, it returns 'function' for classes also.",
                   "code": "const myFunc = function() { return 'Hello world'; };\ntypeof myFunc; // returns 'function'\nconst func = new Function();\ntypeof func; // returns 'function'\nclass myClass { constructor() { } }\ntypeof myClass; // returns 'function'"
               },
               {
                   "topic": "Example",
                   "notes": "In the example below, we use the typeof operator to check the function data type.",
                   "code": "<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      const myFunc = function() { return 'Hello world'; };\n      document.getElementById(\"output\").innerHTML = typeof myFunc;\n   </script>\n   <p>Set the variable to a different value and then try...</p>\n</body>\n</html>\nOutput\nfunction\nSet the variable to a different value and then try..."
               },
               {
                   "topic": "JavaScript typeof Operator to Check BigInt Type",
                   "notes": "The typeof operator returns 'bigint' for BigInt numbers. BigInt values are numeric values that are too big to be represented by the number primitive.\n\ntypeof 100n; // returns 'bigint'",
                   "code": ""
               },
               {
                   "topic": "JavaScript typeof Operator in Real-Time Development",
                   "notes": "For example, the developer gets the data from an API. If there is only a single string, the API returns the string response, and for multiple strings, the API returns an array of strings. In this scenario, developers need to check whether the type of the response is a string or an array, and if it is an array, they need to traverse each string of the array.",
                   "code": "let type = typeof 42; // returns 'number'"
               }
           ]
       }
   }
},
{
   "model": "lessons.lesson",
   "pk": 23,
   "fields": {
       "module_id": 2,
       "title": "JS Operator Precedence",
       "description": "In JavaScript, operator precedence ensures the priority of the operators to be executed when a single expression contains multiple operators. So, whatever expressions have higher priority, the compiler executes it first over other operators and then executes the operators with the lower precedence.\n\nWhenever you write any JavaScript expression with only 1 or 2 operators, you can easily understand the output of the expression. But when the expression contains multiple operators, you should know the concept of operator precedence to evaluate the expression correctly.\n\nThe best example of operator precedence is that in traditional mathematics, the multiplication operator has higher precedence over the addition or subtraction operator. So, if any mathematical expression contains the multiplication and addition of both operators, you need to perform the multiplication first.",
       "content": {
           "subtopics": [
               {
                   "topic": "Associativity",
                   "notes": "The term associativity refers to the direction compiler should follow while evaluating the expression. In many situations, operators have the same precedence. In such cases, ambiguity occurs that which operation the compiler should perform first. So, the compiler takes the help of associativity. It can be from left to right or right to left.\n\nFor example, we need to execute the below expression.\n\nlet res = 50/5*2;\nConsidering the above expression as (50/5) * 2 gives 20 as an output.\n\nEvaluating the expression like 50/ (5*2) gives the 5 as a resultant value.\n\nTo resolve the above ambiguity, the compiler uses the associativity rule. The associativity for the division and multiplication operator is from left to right. So, it evaluates the expression as (50 / 5) * 2.\n\nThe assignment operator has right-to-left associativity. Consider the below assignment expression.\n\nP = q = 90;\nIn the above expression, 90 is assigned to the q, and the value of the q variable is assigned to the p.\n\nIn short, the JavaScript compiler evaluates the expression based on the operator precedence, and when multiple operators have the same precedence, it uses the associativity rule.",
                   "code": ""
               },
               {
                   "topic": "Examples",
                   "notes": "In the example below, the first expression contains the division, modulo, and multiplication operators with the same precedence. So, the compiler will use the associativity rule, which is left to right for multiplication, division, and modulo operator.\n\nSo, it divides the 30 by 15, takes modulo of (30/15) with 3, and multiples the ((30/15)%3) with 2.\n\nIn the second expression, the exponentiation operator has right-to-left associativity. So, it evaluates the expression same as (2 *8 (3 ** 2)).",
                   "code": "<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      const first = 30 / 15 % 3 * 2;\n      const second = 2 ** 3 ** 2;\n      document.getElementById(\"output\").innerHTML =\n         \"The value of first expression is : \" + first + \"<br>\" + \n         \"The value of second expression is : \" + second;\n   </script>\n</body>\n</html>\nOutput\nIt will produce the following result −\n\nThe value of first expression is : 4\nThe value of second expression is : 512"
               },
               {
                   "topic": "Example",
                   "notes": "This code demonstrates that you can use the grouping operator () to change the operator precedence. In the below code, we have taken the same expressions which we have taken in the above code, but we change the operator precedence.\n\nIn the first expression, first, we take modulo and multiply the resultant value with 2. So, we get 0 and divide 30 by 0, returning infinity.\n\nIn the second expression, the first expression evaluates the (2 ** 3) and (8 ** 2), which is equal to 64.",
                   "code": "<html>\n<body>\n   <div id=\"output\"></div>\n   <script>\n      const first = 30 / ((15 % 3) * 2);\n      const second = (2 ** 3) ** 2;\n      document.getElementById(\"output\").innerHTML =\n         \"The value of first expression is : \" + first + \"<br>\" + \n         \"The value of second expression is : \" + second;\n   </script>\n</body>\n</html>"
               },
               {
                   "topic": "Parentheses and Precedence",
                   "notes": "Parentheses can be used to change the order of evaluation.",
                   "code": "let result = (3 + 5) * 2; // 16"
               },
               {
                   "topic": "Using Operator Precedence",
                   "notes": "How to use operator precedence in JavaScript.",
                   "code": "let result = 10 - 2 / 2; // 9"
               },
               {
                   "topic": "Examples of Operator Precedence",
                   "notes": "Examples of using operator precedence in JavaScript.",
                   "code": "let result = 3 + 4 * 2 / (1 - 5); // 1"
               },
               {
                   "topic": "Common Mistakes with Operator Precedence",
                   "notes": "Common mistakes made when using operator precedence.",
                   "code": "let result = 10 - 2 * 2; // 6, not 16"
               },
               {
                   "topic": "Operator Precedence Table",
                   "notes": "A table of JavaScript operators with their precedence levels.",
                   "code": ""
               },
               {
                   "topic": "Precedence and Associativity in Detail",
                   "notes": "Detailed explanation of operator precedence and associativity.",
                   "code": ""
               },
               {
                   "topic": "Operator Precedence in Practice",
                   "notes": "How operator precedence is used in real-world JavaScript code.",
                   "code": "let result = (a + b) * (c - d);"
               }
           ]
       }
   }
}

]



 

